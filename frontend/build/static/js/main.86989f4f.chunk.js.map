{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/LineGraph.jsx","components/common/FigureOne.jsx","components/common/FigureTwo.jsx","components/Loader.jsx","store/apiActions.js","store/entities/dashboard.js","screens/HomeScreen.jsx","components/hospitalComponents/FigureOne.jsx","components/hospitalComponents/FigureTwo.jsx","components/PieChart.jsx","components/BarChart.jsx","screens/hospital/Dashboard.jsx","components/common/CommonListGroup.jsx","utils/paginate.js","components/Pagination.jsx","store/entities/patients.js","screens/hospital/Patients.jsx","store/entities/hospitals.js","components/patientProfile/PersonalInfo.jsx","components/patientProfile/CurrentInfo.jsx","components/patientProfile/History.jsx","screens/hospital/PatientProfile.jsx","components/healthMinistryComponents/FigureOne.jsx","components/healthMinistryComponents/FigureTwo.jsx","components/HorizontalBarChart.jsx","screens/healthMinistry/AdminDashBoard.jsx","store/toastActions.js","screens/healthMinistry/AddHospital.jsx","store/entities/users.js","screens/healthMinistry/AddHospitalAdmin.jsx","screens/hospital/AddPatient.jsx","screens/hospital/staffs/AddHospitalStaff.jsx","screens/hospital/EditCurrentDetails.jsx","screens/hospital/AcceptanceWaiting.jsx","store/entities/pcr.js","screens/hospital/AddPcrResults.jsx","store/auth.js","screens/hospital/EditProfile.jsx","components/popUp/PopUp.jsx","components/patientProfile/Actions.jsx","components/dialog/Dialog.jsx","screens/hospital/Profile.jsx","screens/hospital/AprovePcrResults.jsx","screens/hospital/wards/AddWard.jsx","http-common.jsx","services/WardService.jsx","screens/hospital/wards/Ward.jsx","screens/hospital/wards/WardsList.jsx","screens/SigninScreen.jsx","components/Logout.jsx","screens/healthMinistry/Hospitals.jsx","screens/hospital/staffs/StaffsList.jsx","screens/healthMinistry/ConfirmData.jsx","screens/hospital/AdmitPatient.jsx","screens/hospital/SerchPCR.jsx","screens/hospital/AdmittedPatients.jsx","screens/ForgotPassword.jsx","screens/ResetPassword.jsx","screens/resetPasswordLoggedIn.jsx","screens/hospital/PcrView.jsx","App.js","reportWebVitals.js","store/entities/entities.js","store/reducer.js","store/middleware/toast.js","store/middleware/api.js","store/localStorage.js","index.js","store/configureStore.js"],"names":["Header","userDetails","useSelector","state","auth","token","loggedIn","user","data","useState","userType","setUsertype","useEffect","role","Navbar","className","Container","Brand","class","Toggle","Collapse","id","Nav","to","Link","Dropdown","Menu","Item","Footer","Row","Col","LineGraph","myProp1","myProp2","myProp3","series","name","myProp4","options","dataLabels","enabled","stroke","curve","xaxis","type","categories","tooltip","x","format","colors","style","backgroundColor","textAlign","height","FigureOne","details","justifyContent","margin","display","fontSize","color","formatNumber","inputNumber","formetedNumber","Number","toFixed","replace","splitArray","split","length","FigureTwo","Loader","Spinner","animation","width","marginTop","apiCallBegan","createAction","apiCallSuccess","apiCallFailed","slice","createSlice","initialState","list","loading","lastFetch","reducers","actions","HomeScreen","publicDashboardRequested","publicDashboardSuccess","publicDashboardFailed","healthMinistryDashboardRequested","healthMinistryDashboardSuccess","healthMinistryDashboardFailed","hospitalDashboardRequested","hospitalDashboardSuccess","hospitalDashboardFailed","configData","REFRESH_TIME","createSelector","entities","hospitalloading","dashboard","dispatch","useDispatch","getData","a","axios","request","url","method","response","console","log","overall","setOverall","dates","setDates","cases","setCases","deaths","setDeaths","recovered","setRecovered","setLoading","fetchOverall","get","fetchGraph","data2","Object","keys","values","position","Card","overallData","recoveredData","deathData","float","activeData","staffData","transferedData","PieChart","labels","legend","BarGraph","Dashboard","figureOne","setFigureOne","figureTwo","setFigureTwo","test","active","death","date","valuesSet_2","BarChart","CommonListGroup","defaultSelected","selected","onSelect","ListGroup","horizontal","onClick","action","map","l","paginate","items","pageNumber","pageSize","startIndex","_","take","value","Pagination","itemsCount","currentPage","onPageChange","pagesCount","Math","ceil","pages","range","page","admittedPatients","waiting","waitingLoading","waitingLAstFetch","admittedPatientsLoading","admittedPatientsLastFetch","patientAdded","medicalHistory","patientsRegisterRequested","patients","registerSuccessful","registering","patientsRegisterRequestFailed","patientsRegisterRequestSucceeded","push","payload","patientsRequested","patientsRequestFailed","patientsReceived","Date","now","admittedPatientsRequested","admittedPatientsRequestFailed","admittedPatientsReceived","waitingPatientsRequested","waitingPatientsRequestFailed","waitingPatientsReceived","patientSymptomsUpdated","patient","_id","patientIndex","findIndex","p","histories","historyIndex","symptoms","patientDrugsUpdated","drugDetails","patientTransferUpdated","patientUpdated","patientId","index","c","patientAdmitRequest","patientAdmitFailed","patientAdmitSuccess","selectedPatientTransferUpdated","patientDischarged","patientChangeWard","ward","historyIndex1","patientURL","refreshTime","loadPatients","getState","moment","diff","onStart","onSuccess","onError","getAllWaitingPatients","getAllPatients","getPatientsLoadingStatus","getAllAdmittedPatients","getAdmittedPatientsLoadingStatus","getPatientAdmitState","updateTransferPatient","hospital","admitPatient","getFilteredPatients","filter","currentMedicalHistory","objectDestructure","firstName","lastName","birthday","getFullYear","contactNo","address","city","line1","line2","province","Patients","history","patientsLoading","passedCategory","useLocation","category","AllCategories","selectedCategory","setSelectedCategory","filtered","setFiltered","setCurrentPage","paginated","setPaginated","searchKeyword","setSearchKeyword","updatedFiltered","filterBy","toLowerCase","includes","nic","nicno","toString","getNic","getFilteredSearchedPatients","marginBottom","fontWeight","Button","padding","InputGroup","FormControl","placeholder","size","onChange","e","target","Table","striped","bordered","hover","variant","hospitalAdded","wardAdded","hospitalCreateRequested","hospitalCreateRequestFailed","hospitalCreateRequestSucceeded","newHospital","wardCreateRequested","wardCreateRequestFailed","wardCreateRequestSucceeded","hospitalRequested","hospitalRequestFailed","hospitalReceived","hospitals","hospitalUpdated","wardUpdated","wardId","wardDelete","hospitalURL","loadHospitals","getHospitalLoadingStatus","getHospitalAddedStatus","getAllHospitals","PersonalInfo","currentHospital","userHospital","bg","text","window","location","district","CurrentInfo","wards","overflow","overflowX","getHospitalName","admittedDate","getCurrentWardName","description","q","dischargeDate","changed","hospitalId","History","patientHistory","filteredHistory","PatientProfile","match","params","setPatients","startDate","setStartDate","endDate","setEndDate","setFilteredHistory","changeHistory","findHistory","setfindHistory","searchHistory","medicalHistories","start_date","end_date","getMedicalHistories","fetchPatient","marginLeft","marginRight","Form","Group","as","controlId","Label","Control","required","Feedback","opacity","disabled","minHeight","border","borderRadius","filteredhistory","totalActiveCases","totalDeaths","totalRecovered","nohospital","totalBeds","freeBeds","HorizontalBarGraph","districts","getTopTen","positiveCases","plotOptions","bar","chart","setChart","setDistrict","districtValues","setDistrictValues","firstValue","secondValue","HorizontalBarChart","toastAction","AddHospital","props","hospitalAddedStatus","setName","contact","setContact","setCity","setProvince","userState","setUserState","message","href","Box","sx","bgcolor","onSubmit","preventDefault","Contact","validateName","alert","validateContact","validateCity","addHospital","sm","userAdded","isEmailSent","isPasswordReset","userCreateRequested","userCreateRequestFailed","userCreateRequestSucceeded","userRequested","userRequestFailed","userReceived","users","sendMAilSuccess","sendMailFailed","resetPasswordSuccess","status","resetPasswordFailed","userURL","addUser","getUserLoadingStatus","userloading","getUserAddedStatus","getAllUsers","getEmailSentState","getPasswordResetState","AddHospitalAdmin","current","toISOString","userAddedStatus","setFirstName","setLastName","email","setEmail","setBirthday","setLine1","setLine2","password","setPassword","passwordConfirm","setPasswordConfirm","fluid","parseInt","pathname","validateFirstName","validateLastName","validateEmail","validatePassword","max","AddPatient","setNicno","person","regex","regex2","validateNIC","AddHospitalStaff","requiredg","EditCurrentDetails","medicalHistoryId","symptom0","Yup","drug0","schema","setSchema","initialValues","setInitialValues","setSymptoms","drugs","setDrugs","formElements","updateSymptoms","setUpdateSymptoms","UpdateSymptoms","sym","i","v","updateDrugs","setUpdateDrugs","UpdateDrugs","updateSymptom","symList","updateSymptomsInDB","updateDrug","drugList","updateDrugsInDB","validationSchema","shape","handleSubmit","handleChange","handleBlur","touched","errors","isValid","dirty","noValidate","va","updated","newSymptoms","isInvalid","newSymptom","newSchema","newInitialValues","handleSymptomsAdded","splice","handleSymptomsDeleted","newDrugs","newDrug","handleDrugsAdded","handleDrugsDeleted","AcceptanceWaiting","useHistory","setUserType","patientsList","patientState","setPatientState","setSelected","allSelected","setAllSelected","select","age","Aproval","decision","transferDetails","transferState","AproveSelected","dicision","selectedPatients","check","checked","selectedList","handleSelected","goBack","toConfirm","toConfirmLoading","toConfirmLastFetch","pcrAdded","pcrCreateRequested","pcr","pcrCreateRequestFailed","pcrCreateRequestSucceeded","pcrRequested","pcrRequestFailed","pcrReceived","tests","pcrStatusChange","result","toConfirmPcrRequested","toConfirmPcrRequestFailed","toConfirmPcrReceived","pcrAprovalUpdated","ids","pcrURL","loadPcrs","getPcrLoadingStatus","getPcrAddedStatus","getAllPcrs","getToConfirmPcrLoadingStatus","getToConfirmPcrs","updatePcrAproval","AddPcrResults","pcrState","setPcrState","matches","selectedResult","setSelectedResult","first_name","last_name","Tel_number","NIC_number","birth_year","min","NIClength","SetNIClength","year","Result","contactNumber","autoComplete","maxLength","minLength","logging","userLoginRequested","userLoginFailed","error","userLoginSucceeded","userLoggedOut","authDataUpdated","admin","newWardList","userUpdated","logout","getLoggedInStatus","userData","EditProfile","currentDistrict","birthDay","dateFormat","districtId","districtList","getDistrict","patientDistrict","updateUser","Actions","popUpHandler","wardHandler","currentWardId","currentHospitalId","tranferSt","hospitalName","setTransferHospital","wardName","setWardName","transferPatient","TransferState","getHospitalId","hospitalUpdate","borderColor","getWardId","wardUpdate","changeWard","AlertDialog","dialogSet","closePopUp","dischargeHandler","Dialog","open","onClose","DialogTitle","DialogContent","DialogActions","Profile","wardsDetails","userHospital_id","getPatientById","currentHospital_id","getCurrentHospitalId","popup","setPopUp","pcrTest","changePatientWard","getWardName","AprovePcrResults","pcrList","getOnlyIds","telephone","updateAprove","AddWard","setTotalBeds","setAdmittedPatients","setEmptyBeds","maxWidth","addWard","create","baseURL","headers","WardService","getAll","http","post","update","put","remove","delete","removeAll","findByTitle","ward_name","Ward","total_beds","currentWard","setCurrentWard","setMessage","WardDataService","then","catch","handleInputChange","event","htmlFor","WardsList","wardAddState","setWardAddState","wardUpdateState","setWardUpdateState","wardDeleteState","setWardDeleteState","service","pagination","activePage","itemsPerPage","start","end","Array","from","Promise","resolve","updateCurrentWard","wardDetails","updateWard","addNewWard","caption","fetchItems","label","Name","trigger","submitText","validate","title","deleteCurrentWard","fetchTotalOfItems","SigninScreen","login","Logout","useStyles","makeStyles","table","minWidth","Hospitals","React","setPage","rowsPerPage","setRowsPerPage","searchKey","setSearchKey","classes","Paper","TableContainer","maxHeight","AddCircleOutline","TextField","TableHead","TableRow","TableCell","align","TableBody","row","TablePagination","rowsPerPageOptions","component","count","newPage","onRowsPerPageChange","StaffList","setData","DeleteOutline","onclick","staff_id","item","ConfirmData","hospitalsLoading","hospitalState","setHospitalState","hospitalDetail","newCases","recover","AdmitPatient","patientAdmitSate","submitState","setSubmitSate","patientName","setPatientName","setWard","isKid","setIsKid","selectedPatient","serachPatient","filteredPatient","getAge","patientDetails","onlyYear","SearchPCR","pcrLoading","patientStatus","setStatus","changePatientStatus","changeStatus","updatedSearchFiltered","AdmittedPatients","ForgotPassword","emailSentState","setSubmitState","ResetPassword","resetPasswordState","confirmPassword","oneOf","ref","resetPassword","ResetPasswordLoggedIn","currentPassword","passwordCurrent","PcrView","App","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","path","Patient","AdminDashboard","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","patientReducer","pcrReducer","hospitalReducer","userReducer","dashboardReducer","entitiesReducer","authReducer","toastGenerator","store","next","toast","api","defaults","withCredentials","config","API_URL","loadState","serializedState","localStorage","getItem","JSON","parse","err","configureStore","reducer","middleware","getDefaultMiddleware","preloadedState","subscribe","stringify","setItem","saveState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86989f4f.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport { Navbar, Nav, Container, NavDropdown, Dropdown} from 'react-bootstrap'\r\nimport { LinkContainer,Link } from 'react-router-bootstrap';\r\nimport {  useSelector } from 'react-redux';\r\n\r\nfunction Header() {\r\n    const userDetails = useSelector(state => state.auth);\r\n    const usertoken = userDetails.token\r\n    let auth = \"\";\r\n    if(userDetails.loggedIn){\r\n        const { user } = userDetails.data.user\r\n        auth = user\r\n    }\r\n\r\n    const [userType, setUsertype] = useState('');\r\n\r\n    useEffect(() => {\r\n        if(userDetails.loggedIn){\r\n            setUsertype(auth.role)\r\n        }\r\n    },[userType]);\r\n\r\n    return (\r\n        <header>\r\n            <Navbar className=\"back\" >\r\n                <Container className='headerContainer'>\r\n                    <Navbar.Brand><h2 class=\"sitename\">Covid-19 Patient Tracker</h2></Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"ml-auto\">\r\n                        \r\n                        {!userDetails.loggedIn && <LinkContainer to = '/signin'>\r\n                            <Nav.Link className = 'navbar-item'><span>Login</span></Nav.Link>\r\n                        </LinkContainer>}\r\n\r\n                        {userDetails.loggedIn && <LinkContainer to = '/logout'>\r\n                            <Nav.Link className = 'navbar-item'><span>Log Out</span></Nav.Link>\r\n                        </LinkContainer>}\r\n\r\n                        {userDetails.loggedIn && userType === 'patient' && <LinkContainer to = '/hospital/patientProfile'>\r\n                            <Nav.Link className = 'navbar-item'><span>Profile</span></Nav.Link>\r\n                        </LinkContainer>}\r\n\r\n                        {userDetails.loggedIn && userType === 'patient' && <LinkContainer to = {'/resetpasswordloggedin'}>\r\n                            <Nav.Link className = 'navbar-item'><span>Reset Password</span></Nav.Link>\r\n                        </LinkContainer>}\r\n\r\n                        \r\n                        {userDetails.loggedIn && userType === 'hospitalAdmin' && <Dropdown className=\"my-2 dropdown\">\r\n                        {/* {auth.loggedIn &&  <Dropdown className=\"my-2 dropdown\"> */}\r\n                        <Dropdown.Toggle   className='dropdown-toogle'>Hospital Admin</Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu  className='dropdown-menu'>\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/dashboard'>\r\n                                    <Nav.Link ><span>Dashboard</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = {'/resetpasswordloggedin'}>\r\n                                    <Nav.Link ><span>Reset Password</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/admittedPatients'>\r\n                                    <Nav.Link ><span>Admitted Patients</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/patients'>\r\n                                    <Nav.Link ><span>Patients</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/addPcrResults'>\r\n                                    <Nav.Link ><span>Add PCR Results</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/aprovePcrResults'>\r\n                                    <Nav.Link ><span>Aprove PCR Results</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/searchPCR'>\r\n                                    <Nav.Link ><span>Search PCR</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n                            \r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/acceptanceWaiting'>\r\n                                    <Nav.Link ><span>Acceptance Waiting</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/wards'>\r\n                                    <Nav.Link ><span>Wards</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/addHospitalStaff'>\r\n                                    <Nav.Link ><span>Add Staffs</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n\r\n                        </Dropdown.Menu>\r\n                        </Dropdown>}\r\n\r\n                        {userDetails.loggedIn && userType === 'hospital user' && <Dropdown className=\"my-2 dropdown\">\r\n                        {/* {auth.loggedIn &&  <Dropdown className=\"my-2 dropdown\"> */}\r\n                        <Dropdown.Toggle   className='dropdown-toogle'>Hospital Staff</Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu  className='dropdown-menu'>\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/patients'>\r\n                                    <Nav.Link ><span>Patients</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = {'/resetpasswordloggedin'}>\r\n                                    <Nav.Link ><span>Reset Password</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n                        \r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/addPcrResults'>\r\n                                    <Nav.Link ><span>Add PCR Results</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/searchPCR'>\r\n                                    <Nav.Link ><span>Search PCR</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            {/* <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/wards'>\r\n                                    <Nav.Link ><span>Wards</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item> */}\r\n{/* \r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/healthMinistry/hospital'>\r\n                                    <Nav.Link ><span>Hospitals</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item> */}\r\n\r\n                            {/* <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/staffs'>\r\n                                    <Nav.Link ><span>Staffs</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item> */}\r\n\r\n\r\n                        </Dropdown.Menu>\r\n                        </Dropdown>}\r\n\r\n                        {userDetails.loggedIn && userType === 'admin' && <Dropdown className=\"my-2 dropdown\">\r\n                        {/* {auth.loggedIn &&  <Dropdown className=\"my-2 dropdown\"> */}\r\n                        <Dropdown.Toggle   className='dropdown-toogle'>Admin</Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu  className='dropdown-menu'>\r\n                            {/* <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/patients'>\r\n                                    <Nav.Link ><span>Patients</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n                            \r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/acceptanceWaiting'>\r\n                                    <Nav.Link ><span>Acceptance Waiting</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/addPcrResults'>\r\n                                    <Nav.Link ><span>Add PCR Results</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/hospital/aprovePcrResults'>\r\n                                    <Nav.Link ><span>Aprove PCR Results</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item> */}\r\n\r\n                            \r\n                        <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/healthMinistry/dashboard'>\r\n                                    <Nav.Link ><span>Dasboard</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = {'/resetpasswordloggedin'}>\r\n                                    <Nav.Link ><span>Reset Password</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/healthMinistry/hospital'>\r\n                                    <Nav.Link ><span>Hospitals</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n                            <Dropdown.Item  ><LinkContainer className=\"dropdown-item\" to = '/healthMinistry/confirmData'>\r\n                                    <Nav.Link ><span>Confirm Data</span></Nav.Link>\r\n                            </LinkContainer></Dropdown.Item>\r\n\r\n\r\n                        </Dropdown.Menu>\r\n                        </Dropdown>}\r\n\r\n                    </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n                </Navbar>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n           <Container>\r\n               <Row>\r\n                   <Col className='text-center py-1'>Copyright &copy; Covid-19 Patient Tracker</Col>\r\n               </Row>\r\n           </Container>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport ReactApexChart from \"react-apexcharts\";\r\n\r\n\r\nfunction LineGraph({myProp1, myProp2, myProp3, myProp4}) {\r\n  const series = [\r\n    {\r\n      name: \"Cases\",\r\n       data: myProp2,\r\n    },\r\n    {\r\n      name: \"Recovered\",\r\n      data: myProp4,\r\n    },\r\n    {\r\n      name: \"Deaths\",\r\n      data: myProp3,\r\n    },\r\n  ];\r\n  const options = {\r\n    dataLabels: {\r\n      enabled: false,\r\n    },\r\n    stroke: {\r\n      curve: \"smooth\",\r\n    },\r\n    xaxis: {\r\n      type: \"datetime\",\r\n      categories: myProp1,\r\n    },\r\n    tooltip: {\r\n      x: {\r\n        format: \"dd/MM/yy\",\r\n      },\r\n    },\r\n    colors: ['#226EFC','#7dca53','#ff8c84'],\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"white\",\r\n        textAlign: \"center\",\r\n      }}\r\n    >\r\n      <ReactApexChart\r\n        options={options}\r\n        series={series}\r\n        type=\"area\"\r\n        height={370}\r\n      />\r\n      {/* <br />\r\n      <ReactApexChart\r\n        options={options}\r\n        series={series}\r\n        type=\"bar\"\r\n        height={350}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n\r\n","import React from 'react'\r\n\r\nconst FigureOne = ({ details }) => {\r\n    return (\r\n        <div>\r\n            <div style={{justifyContent:'center'}}>\r\n                <h4 style={{textAlign:'center',margin:'1%'}}>Total Figures</h4>\r\n            </div>\r\n            <div style={{margin:'1%',justifyContent:'center'}}>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        <i className='fa fa-hospital-alt' style={{fontSize:'30px', color:'#6b85de',margin:'20px'}}></i>\r\n                    </div>\r\n                    <div>\r\n                        <h3 style={{fontSize:'14px'}}>Total Confirm Cases</h3>\r\n                        <h1 style={{color:'#6b85de'}}>{formatNumber(details['local_total_cases'])}</h1>\r\n                    </div>\r\n                </div>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        <i className='fa fa-bed' style={{fontSize:'30px', color:'#ff8c84',margin:'20px'}}></i>\r\n                    </div>\r\n                    <div>\r\n                        <h3 style={{fontSize:'14px'}}>Deaths</h3>\r\n                        <h1 style={{color:'#ff8c84'}}>{formatNumber(details['local_deaths'])}</h1>\r\n                    </div>\r\n                </div>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        <i className='fa fa-running' style={{fontSize:'30px', color:'#7dca53',margin:'20px'}}></i>\r\n                    </div>\r\n                    <div>\r\n                        <h3 style={{fontSize:'14px'}}>Total Recovered</h3>\r\n                        <h1 style={{color:'#7dca53'}}>{formatNumber(details['local_recovered'])}</h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FigureOne\r\n\r\nexport const formatNumber = inputNumber => {\r\n    let formetedNumber=(Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n    let splitArray=formetedNumber.split('.');\r\n    if(splitArray.length>1){\r\n      formetedNumber=splitArray[0];\r\n    }\r\n    return(formetedNumber);\r\n  };","import React from 'react'\r\n\r\nconst FigureTwo = ({ details }) => {\r\n    //console.log(details);\r\n    return (\r\n        <div>\r\n            <div style={{justifyContent:'center'}}>\r\n                <h4 style={{textAlign:'center',margin:'1%'}}>{/*details.update_date_time.split(\" \")[0]*/} Figures</h4>\r\n            </div>\r\n            <div style={{margin:'1%',justifyContent:'center'}}>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        <i className='fa fa-hospital-alt' style={{fontSize:'30px', color:'#6b85de',margin:'20px'}}></i>\r\n                    </div>\r\n                    <div>\r\n                        <h3 style={{fontSize:'14px'}}>New Cases</h3>\r\n                        <h1 style={{color:'#6b85de'}}>{formatNumber(details['local_new_cases'])}</h1>   \r\n                    </div>\r\n                </div>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        <i className='fa fa-bed' style={{fontSize:'30px', color:'#ff8c84',margin:'20px'}}></i>\r\n                    </div>\r\n                    <div>\r\n                        <h3 style={{fontSize:'14px'}}>Deaths</h3>\r\n                        <h1 style={{color:'#ff8c84'}}>{formatNumber(details['local_new_deaths'])}</h1>\r\n                    </div>\r\n                </div>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        <i className='fa fa-procedures' style={{fontSize:'30px', color:'#fdb01a',margin:'20px'}}></i>\r\n                    </div>\r\n                    <div>\r\n                        <h3 style={{fontSize:'14px'}}>Receiving Treatment</h3>\r\n                        <h1 style={{color:'#fdb01a'}}>{formatNumber(details['local_total_number_of_individuals_in_hospitals'])}</h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FigureTwo\r\n\r\nexport const formatNumber = inputNumber => {\r\n\r\n    let formetedNumber=(Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n    let splitArray=formetedNumber.split('.');\r\n    if(splitArray.length>1){\r\n      formetedNumber=splitArray[0];\r\n    }\r\n    return(formetedNumber);\r\n  };","import React from 'react'\r\nimport {Spinner} from 'react-bootstrap'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <Spinner \r\n            animation='border' \r\n            role='status'\r\n            style={{\r\n                width:'100px', \r\n                height:'100px', \r\n                margin:'auto', \r\n                display:'block',\r\n                justifyContent:'center',\r\n                marginTop:'10%'\r\n            }}\r\n        >\r\n            <span className='sr-only'>Loading...</span>\r\n        </Spinner>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const apiCallBegan = createAction(\"api/callBegan\");\r\nexport const apiCallSuccess = createAction(\"api/callSuccess\");\r\nexport const apiCallFailed = createAction(\"api/callFailed\");\r\n","import { createSlice} from '@reduxjs/toolkit'\r\nimport { apiCallBegan } from '../apiActions';\r\nimport { createSelector } from 'reselect';\r\nimport configData from '../../config.json';\r\nimport moment from 'moment';\r\n\r\nconst slice = createSlice({\r\n    name: \"dashboard\",\r\n    initialState: {\r\n        list: [],\r\n        loading: false,\r\n        lastFetch: null\r\n    },\r\n\r\n    reducers: {\r\n       \r\n    }\r\n});\r\n\r\nexport default slice.reducer;\r\n\r\nexport const {\r\n    publicDashboardRequested,\r\n    publicDashboardSuccess,\r\n    publicDashboardFailed,\r\n    healthMinistryDashboardRequested,\r\n    healthMinistryDashboardSuccess,\r\n    healthMinistryDashboardFailed,\r\n    hospitalDashboardRequested,\r\n    hospitalDashboardSuccess,\r\n    hospitalDashboardFailed,\r\n} =slice.actions;\r\n\r\nconst dashboardURL = \"/api/v1/\";\r\nconst refreshTime = configData.REFRESH_TIME;\r\n\r\nexport const loadPublicDashboard = () => (dispatch, getState) => {\r\n//    const { lastFetch } = getState().entities.hospital;\r\n\r\n//     const diffInMinutes = moment().diff(moment(lastFetch), \"minutes\");\r\n//     if (diffInMinutes < refreshTime) return;\r\n    \r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: dashboardURL + 'dashboard/publicdashboard',\r\n            onStart: publicDashboardSuccess,\r\n            onSuccess: publicDashboardSuccess,\r\n            onError: publicDashboardFailed\r\n        })\r\n    );\r\n};\r\n\r\nexport const loadHealthMinistryDashboard = () => (dispatch) => {\r\n    // const { lastFetch } = getState().entities.hospital;\r\n \r\n     // const diffInMinutes = moment().diff(moment(lastFetch), \"minutes\");\r\n     // if (diffInMinutes < refreshTime) return;\r\n     \r\n     return dispatch(\r\n         apiCallBegan({\r\n             url: dashboardURL + 'dashboardRoutes',\r\n             onStart: healthMinistryDashboardSuccess.type,\r\n             onSuccess: healthMinistryDashboardSuccess.type,\r\n             onError: healthMinistryDashboardFailed.type\r\n         })\r\n     );\r\n };\r\n\r\n export const loadHospitalDashboard = () => (dispatch) => {\r\n    // const { lastFetch } = getState().entities.hospital;\r\n \r\n     // const diffInMinutes = moment().diff(moment(lastFetch), \"minutes\");\r\n     // if (diffInMinutes < refreshTime) return;\r\n     \r\n     return dispatch(\r\n         apiCallBegan({\r\n             url: dashboardURL + 'dashboardRoutes',\r\n             onStart: hospitalDashboardSuccess.type,\r\n             onSuccess: hospitalDashboardSuccess.type,\r\n             onError: hospitalDashboardFailed.type\r\n         })\r\n     );\r\n };\r\n\r\n\r\nexport const getHospitalLoadingStatus = createSelector(\r\n    state => state.entities.hospitalloading,\r\n    loading => loading\r\n);\r\n\r\nexport const getPublicDashboard = createSelector(\r\n    state => state.entities.dashboard,\r\n    dashboard => dashboard.list\r\n);\r\n\r\n\r\n\r\n","import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios';\r\nimport LineGraph from '../components/LineGraph'\r\nimport FigureOne from '../components/common/FigureOne'\r\nimport FigureTwo from '../components/common/FigureTwo';\r\nimport { Card } from 'react-bootstrap'\r\nimport Loader from '../components/Loader'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loadPublicDashboard, getPublicDashboard} from '../store/entities/dashboard';\r\n\r\n\r\nconst HomeScreen = () => {\r\n    const dispatch = useDispatch()\r\n\r\n   // const dashBoard = useSelector(getPublicDashboard)\r\n    // console.log(dashBoard);\r\n\r\n    const getData = async() => {\r\n        try{\r\n            const response = await axios.request({\r\n                url: 'http://localhost:8000/api/v1/dashboard/publicdashboard',\r\n                method: 'get',\r\n                data: {},\r\n            });\r\n            console.log(response);\r\n        }catch(e){\r\n            //dispatch(toastAction({ message: \"Getting data...\", type: 'error' }));\r\n            console.log('error')\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    const [overall, setOverall] = useState([])\r\n    const [dates, setDates] =useState([])\r\n    const [cases, setCases] =useState([])\r\n    const [deaths, setDeaths] =useState([])\r\n    const [recovered, setRecovered] =useState([])\r\n    var [loading, setLoading ]= useState(true)\r\n\r\n    console.log('1.....................')\r\n\r\n    useEffect(() => {\r\n       // dispatch(loadPatients())\r\n        const fetchOverall = async () => {\r\n            console.log('2.....................')\r\n            const {data} = await axios.get('https://www.hpb.health.gov.lk/api/get-current-statistical')\r\n            setOverall(data.data)\r\n        }\r\n\r\n        const fetchGraph = async () => {\r\n            console.log('3.....................')\r\n            const {data} = await axios.get('https://disease.sh/v3/covid-19/historical/Sri%20Lanka?lastdays=365')\r\n            const data2 = data\r\n            setDates(Object.keys(data2['timeline']['cases']))\r\n            setCases(Object.values(data2['timeline']['cases']))\r\n            setDeaths(Object.values(data2['timeline']['deaths']))\r\n            setRecovered(Object.values(data2['timeline']['recovered']))\r\n            setLoading(false)\r\n        }\r\n\r\n        fetchOverall()\r\n        fetchGraph()\r\n\r\n        console.log(\"4..........................\")\r\n\r\n       // dispatch(loadPublicDashboard());\r\n        getData()\r\n\r\n    },[dispatch])\r\n\r\n    return(\r\n        <>\r\n\r\n        { loading ? (<Loader></Loader>) : \r\n            <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n                     <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-3\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                         <div className=\"set-animation from-left animate\">\r\n                            <Card className='m-2 con-vs-card text-center'>\r\n                                <FigureOne details={overall}></FigureOne>\r\n                            </Card>\r\n                         </div>\r\n\r\n                     </div>\r\n\r\n                     {/* <div className=\"vs-col chart-wrap vs-xs- vs-sm-12 vs-lg-6 \" style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                        <div className=\"set-animation from-left animate\">\r\n                            <Card className='m-2 con-vs-card text-center' style={{height:'100%'}}>\r\n                                <div >\r\n                                    <h3 style={{textAlign:'center', margin:'2%'}}>Total, Recovered and Deaths (SL)</h3>\r\n                                </div>\r\n                                <div  style={{position:'relative' ,margin:'2%'}}>\r\n                                    <LineGraph myProp1={dates} myProp2={cases} myProp3={deaths} myProp4={recovered}></LineGraph> \r\n                                </div> \r\n                            </Card>\r\n                        </div>\r\n                     </div> */}\r\n                    <Card className=\"vs-col vs-xs vs-sm-12 vs-lg-6 mt-2 mb-2\" style={{margin:'0%',width:'100%'}}>\r\n                         <div>\r\n                             <h3 style={{textAlign:'center', margin:'2%'}}>Total, Recovered and Deaths (SL)</h3>\r\n                         </div>\r\n                         <div style={{position:'relative' ,margin:'2%'}}>\r\n                              <LineGraph myProp1={dates} myProp2={cases} myProp3={deaths} myProp4={recovered}></LineGraph> \r\n                         </div> \r\n                    </Card>\r\n        \r\n                     <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-3\" style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                        <div className=\"set-animation from-left animate\">\r\n                            <Card className='m-2 con-vs-card text-center'>\r\n                                <FigureTwo details={overall}></FigureTwo>\r\n                            </Card>\r\n                         </div>\r\n                     </div>\r\n            </div>}\r\n        </>\r\n        \r\n        )\r\n}\r\n\r\nexport default HomeScreen\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst FigureOne = ({values}) => {\r\n    const { overallData, recoveredData, deathData} = values\r\n    return (\r\n        <div>\r\n            <div style={{justifyContent:'center'}}>\r\n                <h4 style={{textAlign:'center',margin:'1%'}}>Hospital Figures</h4>\r\n            </div>\r\n            <div style={{margin:'1%',justifyContent:'center'}}>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        <i className='fa fa-hospital-alt' style={{fontSize:'30px', color:'#6b85de',margin:'20px'}}></i>\r\n                        {/* <Link to={{ pathname :\"/hospital/patients\" ,  category : \"All\" }}>\r\n                            <i className='fa fa-hospital-alt' style={{fontSize:'30px', color:'#6b85de',margin:'20px'}}></i>\r\n                        </Link> */}\r\n                    </div>\r\n                    <div>\r\n                        <h3 style={{fontSize:'14px'}}>Total Covid Patient</h3>\r\n                        {/* <Link to={{ pathname :\"/hospital/patients\" ,  category : \"All\" }}>\r\n                            <h3 style={{fontSize:'14px', color:'#444444'}}>Total Covid Patient</h3>\r\n                        </Link> */}\r\n                        <h1 style={{color:'#6b85de', float:'left'}}>{formatNumber(overallData)}</h1>\r\n                    </div>\r\n                </div>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        <i className='fa fa-bed' style={{fontSize:'30px', color:'#ff8c84',margin:'20px'}}></i>\r\n                        {/* <Link to={{ pathname :\"/hospital/patients\" ,  category : \"Deaths\" }}>\r\n                            <i className='fa fa-bed' style={{fontSize:'30px', color:'#ff8c84',margin:'20px'}}></i> \r\n                        </Link> */}\r\n                    </div>\r\n                    <div>\r\n                        {/* <Link to={{ pathname :\"/hospital/patients\" ,  category : \"Deaths\" }}> */}\r\n                            <h3 style={{fontSize:'14px', color:'#444444'}}>Deaths</h3>\r\n                        {/* </Link> */}\r\n                        <h1 style={{color:'#ff8c84', float:'left'}}>{formatNumber(deathData)}</h1>\r\n                    </div>\r\n                </div>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        {/* <Link to={{ pathname :\"/hospital/patients\" ,  category : \"Recovered\" }}> */}\r\n                            <i className='fa fa-running' style={{fontSize:'40px', color:'#7dca53',margin:'20px'}}></i>\r\n                        {/* </Link> */}\r\n                    </div>\r\n                    <div>\r\n                        {/* <Link to={{ pathname :\"/hospital/patients\" ,  category : \"Recovered\" }}> */}\r\n                            <h3 style={{fontSize:'14px', color:'#444444'}}>Recovered</h3>\r\n                        {/* </Link> */}\r\n                        <h1 style={{color:'#7dca53', float:'left'}}>{formatNumber(recoveredData)}</h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FigureOne\r\n\r\nexport const formatNumber = inputNumber => {\r\n    let formetedNumber=(Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n    let splitArray=formetedNumber.split('.');\r\n    if(splitArray.length>1){\r\n      formetedNumber=splitArray[0];\r\n    }\r\n    return(formetedNumber);\r\n  };","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst FigureTwo = ({values}) => {\r\n    const {activeData, staffData, transferedData} = values\r\n    return (\r\n        <div>\r\n            <div style={{justifyContent:'center'}}>\r\n                <h4 style={{textAlign:'center',margin:'1%'}}>Hospital Figures</h4>\r\n            </div>\r\n            <div style={{margin:'1%',justifyContent:'center'}}>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        {/* <Link to={{ pathname :\"/hospital/patients\" ,  category : \"Transffered\" }}> */}\r\n                            <i className='fa fa-hospital-alt' style={{fontSize:'30px', color:'#6b85de',margin:'20px'}}></i>\r\n                        {/* </Link> */}\r\n                    </div>\r\n                    <div>\r\n                        {/* <Link to={{ pathname :\"/hospital/patients\" ,  category : \"Transffered\" }}> */}\r\n                            <h3 style={{fontSize:'14px', color:'#444444'}}>Transfered Patients</h3>\r\n                        {/* </Link> */}\r\n                        <h1 style={{color:'#6b85de', float:'left'}}>{formatNumber(transferedData)}</h1>   \r\n                    </div>\r\n                </div>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        <i className=\"fa fa-plus-square\" aria-hidden=\"true\" style={{fontSize:'40px', color:'#ff8c84',margin:'20px'}}></i>\r\n                    </div>\r\n                    <div>\r\n                        <h3 style={{fontSize:'14px'}}>Total Staff Members</h3>\r\n                        <h1 style={{color:'#ff8c84', float:'left'}}>{formatNumber(staffData)}</h1>\r\n                    </div>\r\n                </div>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        {/* <Link to={{ pathname :\"/hospital/patients\" ,  category : \"Active\" }}> */}\r\n                            <i className='fa fa-procedures' style={{fontSize:'30px', color:'#fdb01a',margin:'20px'}}></i>\r\n                        {/* </Link> */}\r\n                    </div>\r\n                    <div>\r\n                        {/* <Link to={{ pathname :\"/hospital/patients\" ,  category : \"Active\" }}> */}\r\n                            <h3 style={{fontSize:'14px', color:'#444444'}}>Receiving Treatment</h3>\r\n                        {/* </Link> */}\r\n                        <h1 style={{color:'#fdb01a', float:'left'}}>{formatNumber(activeData)}</h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FigureTwo\r\n\r\nexport const formatNumber = inputNumber => {\r\n    let formetedNumber=(Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n    let splitArray=formetedNumber.split('.');\r\n    if(splitArray.length>1){\r\n      formetedNumber=splitArray[0];\r\n    }\r\n    return(formetedNumber);\r\n  };","import React, { Component } from 'react';\r\nimport Chart from 'react-apexcharts'\r\nimport ReactApexChart from \"react-apexcharts\";\r\n\r\nconst PieChart = ({values}) => {\r\n  console.log(values)\r\n  const firstValue = 6;\r\n  const secondValue = 120;\r\n // const { firstValue, secondValue} = values\r\n    const series = [firstValue,secondValue];\r\n    const options = {\r\n        labels: ['Total Beds Assign','Free Beds'],\r\n        colors: ['#226EFC','#7dca53'],\r\n        legend: {\r\n            position: 'bottom',\r\n        }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        {firstValue  && secondValue ? \r\n        <div\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            position:'bottom'\r\n          }}\r\n        >\r\n          <ReactApexChart\r\n            options={options}\r\n            series={series}\r\n            type=\"donut\"\r\n            height={390}\r\n          />\r\n        </div> : \"No data\"}\r\n      </>\r\n    );\r\n  }\r\n  \r\n  export default PieChart;\r\n  ","import React from 'react'\r\nimport ReactApexChart from \"react-apexcharts\";\r\n\r\n\r\nfunction BarGraph({myProp1, myProp2,myProp3}) {\r\n  const series = [\r\n    {\r\n      name: \"Patient Admitt\",\r\n      data: [555,\r\n        12038,\r\n        69030,\r\n        88369,\r\n        167466,\r\n        932638,\r\n        2055423,\r\n        3343777,\r\n        3845718,]\r\n    },\r\n    {\r\n      name: \"Recovered\",\r\n      data: [28, 284, 9394, 42710, 76026, 191853, 501538, 1029651, 1255481]\r\n    },\r\n  ];\r\n  const options = {\r\n    dataLabels: {\r\n      enabled: false,\r\n    },\r\n    colors: ['#226EFC','#7dca53'],\r\n    \r\n    stroke: {\r\n      curve: \"smooth\",\r\n    },\r\n    xaxis: {\r\n      type: \"datetime\",\r\n      categories: [ \"1/22/20\",\r\n      \"2/1/20\",\r\n      \"2/15/20\",\r\n      \"3/1/20\",\r\n      \"3/15/20\",\r\n      \"4/1/20\",\r\n      \"4/15/20\",\r\n      \"5/1/20\",\r\n      \"5/7/20\"],\r\n    },\r\n    tooltip: {\r\n      x: {\r\n        format: \"dd/MM/yy\",\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"white\",\r\n        textAlign: \"center\",\r\n      }}\r\n    >\r\n      {/* <ReactApexChart\r\n        options={options}\r\n        series={series}\r\n        type=\"area\"\r\n        height={370}\r\n      /> */}\r\n      <br />\r\n      <ReactApexChart\r\n        options={options}\r\n        series={series}\r\n        type=\"bar\"\r\n        height={350}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BarGraph;\r\n","import React, {useEffect, useState, Component} from 'react'\r\nimport axios from 'axios';\r\nimport FigureOne from '../../components/hospitalComponents/FigureOne'\r\nimport FigureTwo from '../../components/hospitalComponents/FigureTwo'\r\nimport PieChart from '../../components/PieChart'\r\nimport BarChart from '../../components/BarChart'\r\nimport { Card } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst Dashboard = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    //const {patients} = useSelector(getAllPatients);\r\n    const [figureOne, setFigureOne] = useState('')\r\n    const [figureTwo, setFigureTwo] = useState('')\r\n    // const [active, setActive] = useState('')\r\n    // const [recovered, setRecovered] = useState('')\r\n    // const [death, setDeath] = useState('')\r\n    let activeData = \"\"\r\n    let deathData = \"\"\r\n    let recoveredData = \"\"\r\n    let dateData = \"\"\r\n\r\n    useEffect(() => {\r\n        //dispatch(listPatients())\r\n       // dispatch(loadPatients())\r\n\r\n        //  const updatedFiltered = getFilteredPatients(patients, categories, selectedCategory);\r\n        //  setFiltered(updatedFiltered);\r\n        //   //console.log(patients)\r\n        //  setPaginated(paginate(updatedFiltered, currentPage, pageSize));\r\n        const fetchOverall = async () => {\r\n            // const response = await axios.request({\r\n            //     url: 'http://localhost:8000/api/v1/dashboard/publicdashboard',\r\n            //     method: 'get',\r\n            //     data: {},\r\n            // });\r\n\r\n            const response = await axios.request({\r\n                url: 'http://localhost:8000/api/v1/dashboard/1',\r\n                method: 'get',\r\n                data: {},\r\n            });\r\n\r\n            console.log(response)\r\n\r\n            if (response){\r\n              //  console.log(response)\r\n                const {test} = response.data.data;\r\n                console.log(test)\r\n\r\n                if(test.length > 0){\r\n                    const { active, death, recovered, date} = test[0]\r\n                    activeData = active.length\r\n                    deathData = death.length\r\n                    recoveredData = recovered.length\r\n                    dateData = date\r\n                }\r\n                \r\n\r\n                const valueSet_1 = {\r\n                    overallData : activeData+ deathData+recoveredData,\r\n                    recoveredData: recoveredData,\r\n                    deathData: deathData\r\n                }\r\n\r\n                const valuesSet_2 = {\r\n                    activeData: activeData,\r\n                    staffData: '',\r\n                    transferedData: ''\r\n                }\r\n\r\n                setFigureOne(valueSet_1)\r\n                setFigureTwo(valuesSet_2)\r\n\r\n              //  console.log(data)\r\n               // const {districtTotals} = data.total\r\n               // setDistrict(Object.keys(data['total']['districtTotals']))\r\n               // setDistrictValues(Object.values(data['total']['districtTotals']))\r\n               // setCases(Object.values(data2['timeline']['cases']))\r\n                //console.log(districtTotals)\r\n            }\r\n        }\r\n\r\n        fetchOverall()\r\n\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n                <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n                    <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-3\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                         <div className=\"set-animation from-left animate\">\r\n                            <Card className='m-2 con-vs-card text-center'>\r\n                                <FigureOne values={figureOne}></FigureOne>\r\n                            </Card>\r\n                         </div>\r\n\r\n                     </div>\r\n\r\n                    <Card className=\"vs-col vs-xs vs-sm-12 vs-lg-6 mt-2 mb-2\" style={{margin:'0%',width:'100%'}}>\r\n                         <div>\r\n                             <h3 style={{textAlign:'center', margin:'2%'}}>Total vs Active Cases</h3>\r\n                         </div>\r\n                         <div style={{position:'relative' ,margin:'2%'}}>\r\n                            <PieChart />\r\n                         </div> \r\n                    </Card>\r\n        \r\n                     <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-3\" style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                        <div className=\"set-animation from-left animate\">\r\n                            <Card className='m-2 con-vs-card text-center'>\r\n                                <FigureTwo values={figureTwo}></FigureTwo>\r\n                            </Card>\r\n                         </div>\r\n                     </div>\r\n                </div>\r\n\r\n            <div style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                <Card className=\"m-2\" style={{margin:'0%'}}>\r\n                    <BarChart></BarChart>\r\n                </Card>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\n\r\nconst CommonListGroup = ({list, defaultSelected, selected, onSelect}) => {\r\n\r\n    return ( \r\n      <>\r\n        <ListGroup horizontal>\r\n            <ListGroup.Item key = {`#${defaultSelected}`} active={selected === defaultSelected} onClick={() => onSelect(defaultSelected)} action>{defaultSelected}</ListGroup.Item>\r\n            {list.map(l => <ListGroup.Item key = {`#${l}`} active={selected === l} onClick={() => onSelect(l)} action>{l}</ListGroup.Item>)}\r\n        </ListGroup>\r\n      </>\r\n     );\r\n}\r\n \r\nexport default CommonListGroup;","import _ from \"lodash\";\r\n\r\nexport function paginate(items, pageNumber, pageSize) {\r\n    const startIndex = (pageNumber - 1) * pageSize;\r\n    return _(items)\r\n        .slice(startIndex)\r\n        .take(pageSize)\r\n        .value();\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport _ from \"lodash\";\r\n\r\nconst Pagination = ({ itemsCount, pageSize, currentPage, onPageChange }) => {\r\n    const pagesCount = Math.ceil(itemsCount / pageSize);\r\n    if (pagesCount === 1) return null;\r\n    const pages = _.range(1, pagesCount + 1);\r\n    return (\r\n      <nav>\r\n        <ul className=\"pagination\">\r\n          {pages.map(page => (\r\n            <li\r\n              key={page}\r\n              className={page === currentPage ? \"page-item active\" : \"page-item\"}\r\n            >\r\n              <a className=\"page-link\" onClick={() => onPageChange(page)}>\r\n                {page}\r\n              </a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </nav>\r\n    );\r\n  };\r\n  \r\n  Pagination.propTypes = {\r\n    itemsCount: PropTypes.number.isRequired,\r\n    pageSize: PropTypes.number.isRequired,\r\n    currentPage: PropTypes.number.isRequired,\r\n    onPageChange: PropTypes.func.isRequired\r\n  };\r\n  \r\n  export default Pagination;","import { createSlice} from '@reduxjs/toolkit'\r\nimport { apiCallBegan } from '../apiActions';\r\nimport { createSelector } from 'reselect';\r\nimport configData from '../../config.json';\r\nimport moment from 'moment';\r\n\r\nconst slice = createSlice({\r\n    name: \"patients\",\r\n    initialState: {\r\n        list: [],\r\n        admittedPatients: [],\r\n        waiting: [],\r\n        waitingLoading: false,\r\n        waitingLAstFetch : null,\r\n        admittedPatientsLoading: false,\r\n        admittedPatientsLastFetch: null,\r\n        loading: false,\r\n        lastFetch: null,\r\n        patientAdded : false,\r\n        medicalHistory : false,\r\n    },\r\n    reducers: {\r\n\r\n        patientsRegisterRequested(patients, action) {\r\n            delete patients.registerSuccessful;\r\n            patients.registering = true;\r\n        },\r\n\r\n        patientsRegisterRequestFailed(patients, action) {\r\n            patients.registering = false;\r\n        },\r\n\r\n        patientsRegisterRequestSucceeded(patients, action) {\r\n            delete patients.registering;\r\n            patients.registerSuccessful = true;\r\n            patients.list.push(action.payload.data);\r\n            patients.patientAdded = true\r\n        },\r\n\r\n        patientsRequested(patients, action){\r\n            patients.loading = true;\r\n        },\r\n\r\n\r\n        patientsRequestFailed(patients, action){\r\n            patients.loading = false;\r\n            \r\n        },\r\n\r\n    // payload: [message: , data: ]\r\n        patientsReceived(patients, action){\r\n            patients.list = action.payload.data.patients;\r\n            patients.loading = false;\r\n            patients.lastFetch = Date.now();\r\n           // console.log('srherhtrhjtrjtrjr')\r\n        },\r\n\r\n        admittedPatientsRequested(patients, action){\r\n            patients.admittedPatientsLoading= true;\r\n        },\r\n\r\n\r\n        admittedPatientsRequestFailed(patients, action){\r\n            patients.admittedPatientsLoading = false;\r\n            \r\n        },\r\n\r\n    // payload: [message: , data: ]\r\n        admittedPatientsReceived(patients, action){\r\n            patients.admittedPatients = action.payload.data.patients;\r\n            patients.admittedPatientsLoading = false;\r\n            patients.admittedPatientsLastFetch = Date.now();\r\n           // console.log('srherhtrhjtrjtrjr')\r\n        },\r\n\r\n        waitingPatientsRequested(patients, action){\r\n            patients.waitingLoading= true;\r\n        },\r\n\r\n\r\n        waitingPatientsRequestFailed(patients, action){\r\n            patients.waitingLoading = false;\r\n            \r\n        },\r\n\r\n    // payload: [message: , data: ]\r\n        waitingPatientsReceived(patients, action){\r\n            patients.waiting = action.payload.data.medicalHistory;\r\n            patients.waitingLoading = false;\r\n            patients.waitingLAstFetch= Date.now();\r\n           // console.log('srherhtrhjtrjtrjr')\r\n        },\r\n\r\n        patientSymptomsUpdated(patients, action){\r\n            console.log(action.payload.data)\r\n            const { patient, _id } = action.payload.data.medicalHistory;\r\n            const patientIndex = patients.list.findIndex(p => p._id === patient );\r\n            const histories = patients.list[patientIndex].medicalHistory\r\n            const historyIndex = histories.findIndex(p => p._id === _id)\r\n            histories[historyIndex].symptoms = action.payload.data.medicalHistory.symptoms\r\n        },\r\n\r\n        patientDrugsUpdated(patients, action){\r\n            console.log(action.payload.data)\r\n            const { patient, _id } = action.payload.data.medicalHistory;\r\n             const patientIndex = patients.list.findIndex(p => p._id === patient );\r\n             const histories = patients.list[patientIndex].medicalHistory\r\n             const historyIndex = histories.findIndex(p => p._id === _id)\r\n             histories[historyIndex].drugDetails = action.payload.data.medicalHistory.drugDetails\r\n        },\r\n\r\n        patientTransferUpdated(patients, action){\r\n            console.log(action.payload.data.medicalHistory)\r\n          //  const variantIndex =variants.findIndex(v => v.name === variantName);\r\n          //  variants[variantIndex].countInStock = newCount;\r\n        },\r\n\r\n        patientUpdated(patients, action){\r\n            const patientId = action.payload.data.patient._id;\r\n            console.log( action.payload.data.patient)\r\n            const index = patients.list.findIndex(c => c._id === patientId );\r\n            console.log(index)\r\n           /// patients.list[index] = action.payload.data.patient;\r\n        },\r\n\r\n        patientAdmitRequest(patients, action){\r\n           // patients.loading = true;\r\n        },\r\n\r\n\r\n        patientAdmitFailed(patients, action){\r\n            console.log(action.payload.data)\r\n            patients.medicalHistory = false;\r\n            \r\n        },\r\n\r\n    // payload: [message: , data: ]\r\n        patientAdmitSuccess(patients, action){\r\n            patients.medicalHistory = true;\r\n            console.log(action.payload.data)\r\n            const { patient, _id } = action.payload.data.test;\r\n            const patientIndex = patients.list.findIndex(p => p._id === patient );\r\n            const histories = patients.list[patientIndex].medicalHistory\r\n            histories.push(action.payload.data.test)\r\n            patients.admittedPatients.push(patients.list[patientIndex])\r\n         ///   const historyIndex = histories.findIndex(p => p._id === _id)\r\n         //   histories[historyIndex] = action.payload.data.medicalHistory\r\n           // patients.admittedPatients.push(action.payload.data.)\r\n           // patients.medicalHistory = true\r\n            //patients.list = action.payload.data.patients;\r\n        },\r\n\r\n        selectedPatientTransferUpdated(patients, actions){\r\n            \r\n        },\r\n\r\n        patientDischarged(patients, action){\r\n            console.log(action.payload.data.medicalHistory)\r\n            const { patient, _id } = action.payload.data.medicalHistory;\r\n            const patientIndex = patients.list.findIndex(p => p._id === patient );\r\n            const histories = patients.list[patientIndex].medicalHistory\r\n            const historyIndex = histories.findIndex(p => p._id === _id)\r\n            histories[historyIndex] = action.payload.data.medicalHistory\r\n        },\r\n\r\n        patientChangeWard(patients, action){\r\n            console.log(action.payload.data.medicalHistory.ward)\r\n            const { patient, _id } = action.payload.data.medicalHistory;\r\n            const patientIndex = patients.list.findIndex(p => p._id === patient );\r\n         //   const addmittedIndex = patients.admittedPatients.findIndex(p => p._id === patient );\r\n            const histories1 = patients.list[patientIndex].medicalHistory\r\n          //  const histories2 = patients.admittedPatients[addmittedIndex].currentMedicalHistory\r\n            const historyIndex1 = histories1.findIndex(p => p._id === _id)\r\n           // const historyIndex2 = histories2.findIndex(p => p._id === _id)\r\n           // histories1[historyIndex1].ward = action.payload.data.medicalHistory.ward\r\n            patients.list[patientIndex].medicalHistory[historyIndex1].ward =  action.payload.data.medicalHistory.ward\r\n           // patients.admittedPatients[addmittedIndex].currentMedicalHistory.ward = action.payload.data.medicalHistory.ward\r\n        }\r\n\r\n    },\r\n});\r\n\r\nexport default slice.reducer;\r\n\r\n\r\nexport const { \r\n    patientsRequested, \r\n    patientsReceived, \r\n    patientsRequestFailed,\r\n    patientsRegisterRequested,\r\n    patientsRegisterRequestFailed,\r\n    patientsRegisterRequestSucceeded,\r\n    patientUpdated,\r\n    patientSymptomsUpdated,\r\n    patientDrugsUpdated,\r\n    patientTransferUpdated,\r\n    selectedPatientTransferUpdated,\r\n    patientAdmitRequest,\r\n    patientAdmitSuccess,\r\n    patientAdmitFailed,\r\n    patientDischarged,\r\n    admittedPatientsReceived,\r\n    admittedPatientsRequestFailed,\r\n    admittedPatientsRequested,\r\n    waitingPatientsReceived,\r\n    waitingPatientsRequestFailed,\r\n    waitingPatientsRequested,\r\n    patientChangeWard\r\n } = slice.actions;\r\n                            \r\n\r\nconst patientURL = \"/api/v1/\";\r\nconst refreshTime = configData.REFRESH_TIME;\r\n\r\n//Action Invokers\r\nexport const loadPatients = () => (dispatch, getState) => {\r\n   const { lastFetch } = getState().entities.patients;\r\n\r\n    const diffInMinutes = moment().diff(moment(lastFetch), \"minutes\");\r\n    if (diffInMinutes < refreshTime) return;\r\n\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: patientURL + 'patients/',\r\n            onStart: patientsRequested.type,\r\n            onSuccess: patientsReceived.type,\r\n            onError: patientsRequestFailed.type\r\n        })\r\n    );\r\n};\r\n\r\nexport const loadPatient = (patientid) => (dispatch, getState) => {\r\n    const { lastFetch } = getState().entities.patients;\r\n \r\n     const diffInMinutes = moment().diff(moment(lastFetch), \"minutes\");\r\n     if (diffInMinutes < refreshTime) return;\r\n \r\n     return dispatch(\r\n         apiCallBegan({\r\n             url: patientURL + `patients/${patientid}`,\r\n             onStart: patientsRequested.type,\r\n             onSuccess: patientsReceived.type,\r\n             onError: patientsRequestFailed.type\r\n         })\r\n     );\r\n };\r\n\r\n export const loadAdmittedPatients = () => (dispatch, getState) => {\r\n    const { admittedPatientsLastFetch } = getState().entities.patients;\r\n \r\n     const diffInMinutes = moment().diff(moment(admittedPatientsLastFetch), \"minutes\");\r\n     if (diffInMinutes < refreshTime) return;\r\n \r\n     return dispatch(\r\n         apiCallBegan({\r\n             url: patientURL + 'patients/hospital/admitted',\r\n             onStart: admittedPatientsRequested.type,\r\n             onSuccess: admittedPatientsReceived.type,\r\n             onError: admittedPatientsRequestFailed.type\r\n         })\r\n     );\r\n };\r\n\r\n export const loadWaitingPatients = () => (dispatch, getState) => {\r\n    const { waitingLAstFetch } = getState().entities.patients;\r\n \r\n     const diffInMinutes = moment().diff(moment(waitingLAstFetch), \"minutes\");\r\n     if (diffInMinutes < refreshTime) return;\r\n \r\n     return dispatch(\r\n         apiCallBegan({\r\n             url: patientURL + 'med/changehospital/pending',\r\n             onStart: waitingPatientsRequested,\r\n             onSuccess: waitingPatientsReceived,\r\n             onError: waitingPatientsRequestFailed\r\n         })\r\n     );\r\n };\r\n\r\n export const getAllWaitingPatients = createSelector(\r\n     state => state.entities.patients,\r\n     patients => patients\r\n )\r\n\r\nexport const getAllPatients= createSelector(\r\n    state => state.entities.patients,\r\n    patients => patients,\r\n   // console.log(patients)\r\n);\r\n\r\nexport const getPatientsLoadingStatus = createSelector(\r\n    state => state.entities.patients.loading,\r\n    loading => loading\r\n);\r\n\r\nexport const getAllAdmittedPatients= createSelector(\r\n    state => state.entities.patients.admittedPatients,\r\n    patients => patients,\r\n   // console.log(patients)\r\n);\r\n\r\nexport const getAdmittedPatientsLoadingStatus = createSelector(\r\n    state => state.entities.patients.admittedPatientsLoading,\r\n    loading => loading\r\n);\r\n\r\nexport const getPatientAdmitState = createSelector(\r\n    state => state.entities.patients,\r\n    medicalHistory => medicalHistory\r\n);\r\n\r\nexport const getPatientById = patientId =>\r\n    createSelector(\r\n        state => state.entities.patients.list,\r\n        patients => {\r\n            const index = patients.findIndex(p => p._id === patientId);\r\n            if(index !== -1) return patients[index];\r\n            return {};\r\n        },\r\n\r\n);\r\n\r\n\r\n\r\n// export const getPatientByNIC = (nic) => (dispatch) => {\r\n//      return dispatch(\r\n//          apiCallBegan({\r\n//              url: patientURL + `patients/search/${nic}`,\r\n//              onStart: patientRequested.type,\r\n//              onSuccess: patientsReceived.type,\r\n//              onError: patientsRequestFailed.type\r\n//          })\r\n//      );\r\n//  };\r\n\r\nexport const registerPatients = (patient) => (dispatch) => {\r\n   // console.log(patient, 'efeferfrgre' )\r\n    return dispatch(\r\n       // console.log(patient)\r\n        apiCallBegan({\r\n            url: patientURL + 'patients/',\r\n            method: \"post\",\r\n            data: patient,\r\n            onStart: patientsRegisterRequested,\r\n            onSuccess: patientsRegisterRequestSucceeded.type,\r\n            onError: patientsRegisterRequestFailed\r\n        })\r\n    );\r\n}\r\n\r\nexport const updatePatient= (patient, id) => (dispatch) => {\r\n    console.log(patient, id)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: patientURL + `patients/${id}`,\r\n            method: \"patch\",\r\n            data: patient,\r\n            onSuccess: patientUpdated.type,\r\n        })\r\n    );\r\n\r\n}\r\n\r\nexport const updateSymptomsInDB = (symptoms, medicalHistoryId) => (dispatch) => {\r\n      //  console.log(symptoms)\r\n        return dispatch(\r\n            apiCallBegan({\r\n                url: patientURL + `med/${medicalHistoryId}/addsymptoms`,\r\n                method: \"patch\",\r\n                data: symptoms,\r\n                onSuccess: patientSymptomsUpdated,\r\n            })\r\n        );\r\n\r\n}\r\n\r\nexport const updateDrugsInDB = (drugs, medicalHistoryId) => (dispatch) => {\r\n   // console.log(drugs)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: patientURL + `med/${medicalHistoryId}/adddrugs`,\r\n            method: \"patch\",\r\n            data: drugs,\r\n            onSuccess: patientDrugsUpdated,\r\n        })\r\n    );\r\n\r\n}\r\n\r\nexport const updateTransferPatient = (hospital, patientId) => (dispatch) => {\r\n    console.log(patientId)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: patientURL + `med/${patientId}/changehospitalrequest`,\r\n            method: \"post\",\r\n            data: hospital,\r\n            onSuccess: patientTransferUpdated.type,\r\n        })\r\n    );\r\n}\r\n\r\nexport const updateSelectedTransferPatient = (value) => (dispatch) => {\r\n    console.log(value)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: patientURL + 'patientTransferSelected',\r\n            method: \"post\",\r\n            data: value,\r\n            onSuccess: selectedPatientTransferUpdated.type,\r\n        })\r\n    );\r\n}\r\n\r\n\r\nexport const admitPatient = (patient) => (dispatch) => {\r\n    console.log(patient)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: patientURL + 'med',\r\n            method: \"post\",\r\n            data : patient,\r\n            onStart : patientAdmitRequest,\r\n            onSuccess : patientAdmitSuccess,\r\n            onError: patientAdmitFailed\r\n        })\r\n    )\r\n}\r\n\r\nexport const dischargePatient = (patientId) => (dispatch) => {\r\n    console.log(patientId)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: patientURL + `patients/${patientId}/discharge`,\r\n            method: \"get\",\r\n            onSuccess : patientDischarged,\r\n        })\r\n    )\r\n}\r\n\r\nexport const changePatientWard = (ward, patientId) => (dispatch) => {\r\n    console.log(patientId)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: patientURL + `med/${patientId}/changeward`,\r\n            method: \"post\",\r\n            data: ward,\r\n            onSuccess : patientChangeWard,\r\n        })\r\n    )\r\n}\r\n","import React, {useEffect, useState, Component} from 'react'\r\nimport { Table, Container, Button, InputGroup, FormControl, Card} from 'react-bootstrap'\r\nimport CommonListGroup from '../../components/common/CommonListGroup'\r\nimport { paginate } from '../../utils/paginate';\r\nimport Loader from '../../components/Loader'\r\nimport Pagination from '../../components/Pagination';\r\n//import { listPatients } from '../../actions/patientActions'\r\nimport { loadPatients, getAllPatients, getPatientsLoadingStatus } from '../../store/entities/patients';\r\nimport { useLocation, Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nconst Patients = ({history}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.auth);\r\n\r\n    const patientsDetails = useSelector(getAllPatients);\r\n    const patients = patientsDetails.list;\r\n    const patientsLoading = useSelector(getPatientsLoadingStatus);\r\n\r\n    const location = useLocation()\r\n    let { category:passedCategory  } = location\r\n    if(!passedCategory) passedCategory = 'All'\r\n\r\n    const AllCategories = ['All','Active']\r\n    const categories = AllCategories.filter(c=> c!== passedCategory)\r\n\r\n    const [selectedCategory, setSelectedCategory] = useState(passedCategory);\r\n    const [filtered, setFiltered] = useState(patients);\r\n\r\n\r\n    const pageSize = 5;\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    let [paginated, setPaginated] = useState(patients);\r\n\r\n    const [searchKeyword, setSearchKeyword ] = useState('');\r\n\r\n\r\n    useEffect(() => {\r\n        if(!userDetails.loggedIn){\r\n           history.push('/')\r\n        }\r\n        dispatch(loadPatients())\r\n\r\n        const updatedSearchFiltered = getFilteredSearchedPatients(patients, searchKeyword)\r\n        const updatedFiltered = getFilteredPatients(updatedSearchFiltered, categories, selectedCategory);\r\n        setFiltered(updatedFiltered);\r\n        setPaginated(paginate(updatedFiltered, currentPage, pageSize));\r\n    },[searchKeyword])\r\n\r\n\r\n    return (\r\n        <>\r\n            {(typeof(patients) === 'undefined' || patients.length == 0) && patientsLoading && (<Loader></Loader>)}\r\n            <Container>\r\n                <h3 style={{textAlign:'center', marginBottom:'40px', fontWeight:'700'}}>PATIENTS DETAILS</h3>\r\n\r\n                <Button \r\n                    className=\"btn btn-success\"\r\n                    style={{float:'right',padding:'10px'}}\r\n                    onClick = { () => history.push('/hospital/admitPatient')}\r\n                >+ admit patient</Button>\r\n\r\n                <InputGroup id = 'search-bar' style={{padding:'0px 200px 20px 200px', color:'blue'}}>\r\n                            <FormControl\r\n                                className='textBox'\r\n                                placeholder=\"search patient by using name or NIC...\"\r\n                                aria-label=\"searchPatient\"\r\n                                aria-describedby=\"basic-addon2\"\r\n                                size = 'lg'\r\n                                value = {searchKeyword}\r\n                                onChange = { e => setSearchKeyword(e.target.value)}\r\n                            />\r\n                </InputGroup>\r\n\r\n                <CommonListGroup \r\n                onSelect = {(category) => {\r\n                    setSelectedCategory(category);\r\n                    const updatedFiltered = getFilteredPatients(patients, AllCategories, category);\r\n                    setFiltered(updatedFiltered);\r\n                    setPaginated(paginate(updatedFiltered, 1, pageSize));\r\n                }} \r\n                defaultSelected ={passedCategory} selected={selectedCategory} \r\n                list={categories.map(c => c)}\r\n                />\r\n\r\n            {patients.length === 0 ? <h1>No data</h1>:\r\n\r\n            <Table striped bordered hover variant=\"light\">\r\n                <thead>\r\n                    <tr>\r\n                    <th>Name</th>\r\n                    <th>Age</th>\r\n                    <th>Tel</th>\r\n                    <th>Address</th>\r\n                    {/* <th>Status</th> */}\r\n                    <th>Action</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {paginated.map( p =>\r\n                        <tr>\r\n                            <td>\r\n                               {(objectDestructure(p , \"name\"))}\r\n                            </td>\r\n                            <td>{(objectDestructure(p , \"age\"))}</td>\r\n                            <td>{(objectDestructure(p , \"tel\"))}</td>\r\n                            <td>{(objectDestructure(p , \"address\"))}</td>\r\n                            <td>\r\n                                <Button \r\n                                    value = {p._id}\r\n                                    onClick = { () => history.push(`/hospital/Profile/${p._id}`)}\r\n                                    className=\"btn btn-primary\">Profile</Button>\r\n                            </td>\r\n                        </tr>\r\n                    //)\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n\r\n            }\r\n\r\n            <Pagination\r\n                itemsCount = {filtered.length} \r\n                pageSize = {pageSize} \r\n                currentPage = {currentPage}\r\n                onPageChange = {(page) => {\r\n                    setCurrentPage(page);\r\n                    setPaginated(paginate(filtered, page, pageSize));\r\n                }}\r\n            />\r\n\r\n            </Container>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nfunction getFilteredPatients(patients, categories, filter){\r\n    console.log(filter)\r\n    if(filter === \"All\") return patients;\r\n    if(filter === \"Active\"){\r\n        const patient = patients.filter(c => c.currentMedicalHistory)\r\n        console.log(patient)\r\n        return patient\r\n    }\r\n   return patients;\r\n}\r\n\r\nexport function getFilteredSearchedPatients(patients, filterBy){\r\n    if(typeof(patients) === 'undefined' || patients.length === 0){\r\n       return {}\r\n    }\r\n    return patients.filter(p => objectDestructure(p, \"name\").toLowerCase().includes(filterBy) || getNic(p).includes(filterBy.toString()));\r\n}\r\n\r\nexport function objectDestructure ( patients, type){\r\n    let newList = \"\"\r\n    if(typeof(patients) === 'undefined' || patients.length === 0){\r\n        return newList\r\n    } \r\n\r\n    const { user } = patients\r\n    if(user){\r\n        if(type === \"name\"){\r\n            const { firstName , lastName } = user.name;\r\n            const patientName = firstName + \" \" + lastName\r\n            return patientName;\r\n        }\r\n        \r\n        if(type === \"age\"){\r\n            const { birthday } = user;\r\n            const date = new Date().getFullYear();\r\n            const birthYear = birthday.split(\"-\")[0]\r\n            return (date - birthYear)\r\n        }\r\n\r\n        if(type === \"tel\"){\r\n            const { contactNo } = user;\r\n            return contactNo\r\n        }\r\n        if(type === \"address\"){\r\n            const { city, line1, line2, province } = user.address;\r\n            return (city + \",\" + line1 + \",\" + line2 + \",\" + province)\r\n        }\r\n    }else{\r\n        return newList\r\n    }\r\n}\r\n\r\nfunction getNic(patient){\r\n    const { nic } = patient\r\n    if(nic){\r\n        const {nicno} = nic\r\n        return nicno.toString()\r\n    }\r\n    return \"\"\r\n}\r\n\r\nexport default Patients\r\n\r\n","import { createSlice} from '@reduxjs/toolkit'\r\nimport { apiCallBegan } from '../apiActions';\r\nimport { createSelector } from 'reselect';\r\nimport configData from '../../config.json';\r\nimport moment from 'moment';\r\n\r\nconst slice = createSlice({\r\n    name: \"hospitals\",\r\n    initialState: {\r\n        list: [],\r\n       // wards: [],\r\n        loading: false,\r\n       // wardLoading: false,\r\n       // wardLastFetch: null,\r\n        lastFetch: null,\r\n        hospitalAdded: false,\r\n        wardAdded: false\r\n    },\r\n\r\n    reducers: {\r\n        hospitalCreateRequested(hospital, action) {\r\n            hospital.loading = true;\r\n            hospital.hospitalAdded = false;\r\n        },\r\n\r\n        hospitalCreateRequestFailed(hospital, action){\r\n            hospital.loading = false;\r\n        },\r\n\r\n        hospitalCreateRequestSucceeded(hospital, action){\r\n            const newHospital = action.payload.data.hospital\r\n            console.log(newHospital)\r\n            hospital.list.push(newHospital)\r\n            hospital.loading = false;\r\n            hospital.hospitalAdded = true\r\n        },\r\n\r\n        wardCreateRequested(hospital, action) {\r\n            hospital.loading = true;\r\n            hospital.wardAdded = false;\r\n        },\r\n\r\n        wardCreateRequestFailed(hospital, action){\r\n            hospital.loading = false;\r\n        },\r\n\r\n        wardCreateRequestSucceeded(hospital, action){\r\n            hospital.loading = false;\r\n            hospital.wardAdded = true\r\n        },\r\n\r\n        \r\n        hospitalRequested(hospital, action){\r\n            hospital.loading = true;\r\n        },\r\n\r\n\r\n        hospitalRequestFailed(hospital, action){\r\n            hospital.loading = false;\r\n            \r\n        },\r\n\r\n        hospitalReceived(hospitals, action){\r\n            //pcr.list = action.payload.pcr;\r\n            hospitals.list = action.payload.data.hospitals;\r\n            hospitals.loading = false;\r\n            hospitals.lastFetch = Date.now();\r\n            //console.log(hospitals.list)\r\n        },\r\n\r\n        hospitalUpdated(hospital, action){\r\n            \r\n        },\r\n\r\n        wardUpdated(hospitals, action){\r\n             const wardId = action.payload.data;\r\n             console.log(wardId)\r\n            // const index = hospitals.list.wards.findIndex(c => c._id === wardId );\r\n            // hospitals.list.wards[index] = action.payload.data.hospital;\r\n        },\r\n    }\r\n});\r\n\r\nexport default slice.reducer;\r\n\r\nexport const {\r\n    hospitalRequested,\r\n    hospitalRequestFailed,\r\n    hospitalReceived,\r\n    hospitalCreateRequested,\r\n    hospitalCreateRequestFailed,\r\n    hospitalCreateRequestSucceeded,\r\n    wardUpdated,\r\n    wardDelete,\r\n    wardCreateRequested,\r\n    wardCreateRequestFailed,\r\n    wardCreateRequestSucceeded,\r\n} =slice.actions;\r\n\r\nconst hospitalURL = \"/api/v1/hospital\";\r\nconst refreshTime = configData.REFRESH_TIME;\r\n\r\nexport const loadHospitals = () => (dispatch, getState) => {\r\n    const { lastFetch } = getState().entities.hospital;\r\n\r\n    const diffInMinutes = moment().diff(moment(lastFetch), \"minutes\");\r\n    if (diffInMinutes < refreshTime) return;\r\n    \r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: hospitalURL,\r\n            onStart: hospitalRequested.type,\r\n            onSuccess: hospitalReceived.type,\r\n            onError: hospitalRequestFailed.type\r\n        })\r\n    );\r\n};\r\n\r\nexport const addHospital = (hospital) => (dispatch) => {\r\n    console.log(hospital)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: hospitalURL,\r\n            method: \"post\",\r\n            data: hospital,\r\n            onStart: hospitalCreateRequested,\r\n            onSuccess: hospitalCreateRequestSucceeded.type,\r\n            onError: hospitalCreateRequestFailed\r\n        })\r\n    );\r\n}\r\n\r\n\r\nexport const getHospitalLoadingStatus = createSelector(\r\n    state => state.entities.loading,\r\n    loading => loading\r\n);\r\n\r\nexport const getHospitalAddedStatus = createSelector(\r\n    state => state.entities.hospital,\r\n   // pcr => pcr.pcrAdded\r\n    hospitalAdded => hospitalAdded\r\n)\r\n\r\nexport const getAllHospitals = createSelector(\r\n    state => state.entities.hospital,\r\n    hospital => hospital.list\r\n);\r\n\r\nexport const addWard = (ward) => (dispatch) => {\r\n    console.log(ward)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: hospitalURL + `ward`,\r\n            method: \"post\",\r\n            data: ward,\r\n            onStart: wardCreateRequested,\r\n            onSuccess: wardCreateRequestSucceeded.type,\r\n            onError: wardCreateRequestFailed\r\n        })\r\n    );\r\n}\r\n\r\nexport const updateWard= (ward, id) => (dispatch) => {\r\n    console.log(id)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: hospitalURL + `/ward/${id}`,\r\n            method: \"patch\",\r\n            data: ward,\r\n            onSuccess: wardUpdated.type,\r\n        })\r\n    );\r\n\r\n}\r\n\r\nexport const deleteWard= (ward, id) => (dispatch) => {\r\n    console.log(ward, id)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: hospitalURL + `wards/${id}`,\r\n            method: \"patch\",\r\n            data: ward,\r\n            onSuccess: wardDelete.type,\r\n        })\r\n    );\r\n}\r\n\r\n// export const updatePcrAproval = (pcrIds) =>{\r\n//     return apiCallBegan({\r\n//         url: pcrURL + \"pcr/confirm\",\r\n//         method: \"post\",\r\n//         data: pcrIds,\r\n//         onSuccess: pcrAprovalUpdated.type,\r\n//     });\r\n// }\r\n\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { Button, Card} from 'react-bootstrap'\r\n\r\nconst PersonalInfo = ({patients, currentHospital, userHospital, id}) => {\r\n    const userDetails = useSelector(state => state.auth);\r\n    const { user } = userDetails.data.user\r\n    const auth = user\r\n\r\n    return (\r\n            <Card  className=\"m-2\" bg=\"#ffffff\" text=\"black\" style={{ width: '100%'}}>\r\n                <ul className=\"profile-info-list mt-2\">\r\n                    <li className=\"title \">PERSONAL INFORMATION</li>\r\n                    <li>\r\n                        <div className=\"field\">Name:</div>\r\n                        <div className=\"value\">{objectDestructure(patients, \"name\")}</div>\r\n                     </li>\r\n                    <li>\r\n                        <div className=\"field\">Age:</div>\r\n                        <div className=\"value\">{objectDestructure(patients, \"age\")}</div>\r\n                    </li>\r\n                    <li>\r\n                        <div className=\"field\">Birth of Date:</div>\r\n                        <div className=\"value\">{objectDestructure(patients, \"birthday\")}</div>\r\n                    </li>\r\n                    <li>\r\n                        <div className=\"field\">Tel Number:</div>\r\n                        <div className=\"value\">{patients.contactNo}</div>\r\n                    </li>\r\n                    <li>\r\n                        <div className=\"field\">Address:</div>\r\n                        <div className=\"value\">\r\n                            <address className=\"m-b-0\">\r\n                                {objectDestructure(patients, \"address\")}\r\n                            </address>\r\n                        </div>\r\n                    </li>\r\n                        {currentHospital === userHospital && auth.role === \"patient\"? \r\n                        <div>\r\n                            <Button \r\n                                type='submit'  \r\n                                className='btn btn-primary' \r\n                                onClick={()=> window.location=`/hospital/editProfile/${patients._id}`}\r\n                            >Edit Profile</Button>\r\n                        </div>:''}\r\n                </ul>\r\n            </Card>\r\n    )\r\n}\r\n\r\nexport default PersonalInfo\r\n\r\nfunction objectDestructure ( patients, type){\r\n     let newList = \"\"\r\n     if(typeof(patients) === 'undefined' || patients.length === 0){\r\n         return newList\r\n     } \r\n \r\n     const { name, address, birthday } = patients\r\n\r\n        if(type === \"name\"){\r\n            const { firstName , lastName } = name;\r\n            const patientName = firstName + \" \" + lastName\r\n            return patientName;\r\n         }\r\n        if(type === \"address\"){\r\n            const { city, line1, line2, district } = address;\r\n            return (city + \",\" + line1 + \",\" + line2 + \",\" + district)\r\n        }\r\n        if(type === \"birthday\"){\r\n            const date = birthday.split(\"-\")\r\n            return date[0] +\"-\" + date[1] + \"-\" + (date[2][0] + date[2][1])\r\n        }\r\n        if(type === \"age\"){\r\n            const date = new Date().getFullYear();\r\n            const birthYear = birthday.split(\"-\")[0]\r\n            return (date - birthYear)\r\n        }\r\n }\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport {Card, Button} from 'react-bootstrap';\r\n\r\nconst CurrentInfo = ({patients, userHospital, currentHospital,  hospitals, wards}) => {\r\n\r\n    console.log('dddddddddddddddddddddddddddd')\r\n    const userDetails = useSelector(state => state.auth);\r\n    const { user } = userDetails.data.user\r\n    const auth = user\r\n    return (\r\n        <Card className='m-2 con-vs-card'>\r\n            <h5 className=\"text-center mt-2 font-weight-bold\">CURRENT DETAILS</h5>\r\n            <div style={{overflow:'auto',overflowX: 'hidden'}}>\r\n                <ul className=\"profile-info-list\">\r\n                    <li className='current' style={{width:'50%',float:'left',position:'relative'}}>\r\n                        <li>\r\n                            <div className=\"field\">Hospital Name:</div>\r\n                            <div className=\"value\">{getHospitalName(patients, hospitals)}</div>\r\n                        </li>\r\n                        <li>\r\n                            <div className=\"field\">Admitted Date:</div>\r\n                            <div className=\"value\">{patients.admittedDate}</div>\r\n                        </li>\r\n\r\n                        <li>\r\n                            <div className=\"field\">Ward No:</div>\r\n                            <div className=\"value\">{getCurrentWardName(wards, patients.ward)}</div>\r\n                        </li>\r\n                        <li>\r\n                            <div className=\"field\">Symptoms:</div>\r\n                            {objectDestructure(patients, \"symptoms\").length > 0 ? \r\n                            <ul className=\"value\">\r\n                                {objectDestructure(patients, \"symptoms\").map(p=> \r\n                                    // <p>{p.date} - {p.description}</p>\r\n                                    // <p>{p.date}</p>\r\n                                    p.description.map(q=> \r\n                                        <li>{p.date} - {q}</li>\r\n                                    )\r\n                                )}\r\n                            </ul> : \"No data\"}\r\n                        </li>\r\n                    </li>\r\n\r\n                    <li className='current' style={{width:'50%',float:'left',position:'relative'}}>\r\n                        <li>\r\n                            <div className=\"field\">Transfer Date:</div>\r\n                            <div className=\"value m-2\">Hospital Name: {} </div>\r\n                            <div className=\"value m-2\">Transfer State: </div>\r\n                            <div className=\"value m-2\">Transfer Date</div>\r\n                        </li>\r\n                        <li>\r\n                            <div className=\"field\">Drug Details:</div>\r\n                            {objectDestructure(patients, \"drugs\").length > 0 ? \r\n                            <ul className=\"value\">\r\n                                {objectDestructure(patients, \"drugs\").map(p=> \r\n                                    //<li>{p.date} - {p.description}</li>\r\n                                    p.description.map(q=> \r\n                                        <li>{p.date} - {q}</li>\r\n                                    )\r\n                                )}\r\n                            </ul> \r\n                            \r\n                            : \"No data\"}\r\n                        </li>\r\n                    </li>\r\n                </ul>\r\n                </div>\r\n                    {auth.role !== 'patient' && patients &&\r\n                    <div className='text-center m-2'>\r\n                        {currentHospital === userHospital ?<Button \r\n                            type='submit'  \r\n                            className='btn btn-primary m-2 text-center' \r\n                            onClick = { () => window.location=`/hospital/editCurrentDetails/${patients._id}`}\r\n                        >Update Details</Button> :\r\n                    <div>\r\n                        <Button className='btn btn-prymary m-2'>Accept</Button>\r\n                        <Button className='btn btn-danger m-2'>Decline</Button>\r\n                    </div> }\r\n                </div> }\r\n            </Card>\r\n    )\r\n}\r\n\r\nexport default CurrentInfo\r\n\r\nfunction objectDestructure ( histories, type){\r\n    let newList = \"\"\r\n    if(typeof(histories) === 'undefined' || histories.length === 0){\r\n         return newList\r\n    } \r\n \r\n    const {dischargeDate, drugDetails, symptoms } = histories\r\n    if(dischargeDate){\r\n        if(type === \"discharge\"){\r\n           return dischargeDate.changed\r\n        }\r\n   }\r\n    if(drugDetails){\r\n         if(type === \"drugs\"){\r\n            return drugDetails\r\n         }\r\n    }\r\n\r\n    if(symptoms){\r\n        if(type === \"symptoms\"){\r\n           return symptoms\r\n        }\r\n    }\r\n\r\n    return newList\r\n }\r\n\r\n function getHospitalName(patients, hospitals){\r\n     if(typeof(hospitals) === 'undefined' || hospitals.length === 0){\r\n         return \"\"\r\n     }\r\n     const hospitalId = patients.hospital \r\n     const hospitalName = hospitals.filter(p => p._id === hospitalId)\r\n     return hospitalName[0].name\r\n }\r\n\r\n function getCurrentWardName(wards, wardId){\r\n    if(typeof(wards) === 'undefined' || wards.length === 0){\r\n        return \"\"\r\n    }\r\n    const wardname = wards.filter(p=> p._id === wardId)\r\n   // console.log(wardname)\r\n    return wardname[0].name\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport {Card} from 'react-bootstrap'\r\nimport { loadPatients , getPatientById, getAllPatients, getPatientsLoadingStatus, updateTransferPatient, loadPatient} from '../../store/entities/patients';\r\n\r\nconst History = ({patientHistory, filteredHistory, hospital, ward}) => {\r\n    console.log(patientHistory)\r\n    console.log(ward)\r\n   // console.log(hospital)\r\n    // const dispatch = useDispatch()\r\n    // const patientDetails = useSelector(getAllPatients);\r\n    // const patient = patientDetails.list\r\n    // const patientsLoading = useSelector(getPatientsLoadingStatus);\r\n    // const [filteredHistory, setFilteredHistory] = useState([])\r\n    // const [patientHistory, changeHistory ] = useState(filteredHistory) \r\n\r\n    return (\r\n        <Card className='m-2'>\r\n            <div style={{overflow:'auto',overflowX: 'hidden'}}>\r\n                <ul className=\"profile-info-list\">\r\n                    <li className='current' style={{width:'50%',float:'left',position:'relative'}}>\r\n                        <li>\r\n                            <div className=\"field\">Hospital Name:</div>\r\n                            {filteredHistory.length !== 0 ?\r\n                            <div className=\"value\">{hospital.name}</div>:''}\r\n                        </li>\r\n                        <li>\r\n                            <div className=\"field\">Admitted Date:</div>\r\n                            {filteredHistory.length !== 0 ?\r\n                            <div className=\"value\">{patientHistory.admittedDate}</div>:''}\r\n                        </li>\r\n                        <li>\r\n                            <div className=\"field\">Ward No:</div>\r\n                            <div className=\"value\">{}</div>\r\n                        </li>\r\n                        <li>\r\n                            <div className=\"field\">Symptoms:</div>\r\n                            {objectDestructure(patientHistory, \"symptoms\").length > 0 ? \r\n                            <ul className=\"value\">\r\n                                {objectDestructure(patientHistory, \"symptoms\").map(p=> \r\n                                    <li>{p.date} - {p.description}</li>\r\n                                )}\r\n                            </ul> \r\n                            \r\n                            : \"No data\"}\r\n                        </li>\r\n                    </li>\r\n\r\n                    <li className='current' style={{width:'50%',float:'left',position:'relative'}}>\r\n                        <li>\r\n                            <div className=\"field\">Discharged Date:</div>\r\n                            <div className=\"value\">{patientHistory.dischargeDate}</div>\r\n                        </li>\r\n                        <li>\r\n                            <div className=\"field\">Transfer Date:</div>\r\n                            <div className=\"value m-2\">Hospital Name:</div>\r\n                            <div className=\"value m-2\">Transfer State: </div>\r\n                            <div className=\"value m-2\">Transfer Date</div>\r\n                        </li>\r\n                        <li>\r\n                            <div className=\"field\">Drug Details:</div>\r\n                            {objectDestructure(patientHistory, \"drugs\").length > 0 ? \r\n                            <ul className=\"value\">\r\n                                {objectDestructure(patientHistory, \"drugs\").map(p=> \r\n                                    <li>{p.date} - {p.description}</li>\r\n                                )}\r\n                            </ul> \r\n                            \r\n                            : \"No data\"}\r\n                        </li>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default History\r\n\r\nfunction objectDestructure ( histories, type){\r\n    let newList = \"\"\r\n    if(typeof(histories) === 'undefined' || histories.length === 0){\r\n         return newList\r\n    } \r\n \r\n    const {drugDetails, symptoms } = histories\r\n    if(drugDetails){\r\n         if(type === \"drugs\"){\r\n            return drugDetails\r\n         }\r\n    }\r\n\r\n    if(symptoms){\r\n        if(type === \"symptoms\"){\r\n           return symptoms\r\n        }\r\n    }\r\n\r\n    return newList\r\n }\r\n\r\n function getHospitalName(patients, hospitals){\r\n    if(typeof(hospitals) === 'undefined' || hospitals.length === 0){\r\n        return \"\"\r\n    }\r\n    const hospitalId = patients.hospital \r\n    const hospitalName = hospitals.filter(p => p._id === hospitalId)\r\n    return hospitalName[0].name\r\n}\r\n\r\n function getCurrentWardName(wards, wardId){\r\n    if(typeof(wards) === 'undefined' || wards.length === 0){\r\n        return \"\"\r\n    }\r\n    const wardname = wards.filter(p=> p._id === wardId)\r\n    console.log(wardname)\r\n    return wardname[0].name\r\n}\r\n","// import React, {useEffect, useState} from 'react'\r\n\r\n\r\n// import {Container, Button, Card, Row, Col, Nav, Form} from 'react-bootstrap'\r\n// import Loader from '../../components/Loader'\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// //import { listPatientDetails } from '../../actions/patientActions'\r\n// import { loadPatients , getPatientById, getAllPatients, getPatientsLoadingStatus, updateTransferPatient} from '../../store/entities/patients';\r\n// import { Scrollbars } from 'react-custom-scrollbars';\r\n\r\n// const PatientProfile = ({value, history}) => {\r\n//     const dispatch = useDispatch()\r\n//     const patientId = (window.location.href.split('/')).pop()\r\n\r\n\r\n//     const patients = useSelector(getPatientById(patientId))\r\n\r\n//     const [ symptoms, setSymptoms ] = useState(['']);\r\n//     const [ drugs, setDrugs ] = useState(['']);\r\n\r\n//     const [tranferSt, transferState ] = useState('false');\r\n//     console.log(tranferSt);\r\n\r\n//     const hospitals = [{id:'1', name:'National Hospital of Sri Lanka'},{ id:'2', name:'Lady Ridgeway Hospital for Children'},\r\n//     {id:'3',name:'Castle Street Hospital for Women'}]\r\n\r\n//     const [hospitalName, setTransferHospital] = useState(hospitals[0].name)\r\n//     console.log(hospitalName)\r\n\r\n\r\n//    const patient = useSelector(getAllPatients);\r\n//   // console.log(patient)\r\n//    const patientsLoading = useSelector(getPatientsLoadingStatus);\r\n//    const [patientHistory, changeHistory ] = useState(patient[0]) \r\n\r\n//     const transferPatient = (TransferState) => {\r\n//         const transferUpdate = {\r\n//             patientId,\r\n//             transferDetails:{\r\n//                 hospitalName : hospitalName,\r\n//                 transferState : TransferState\r\n//             }\r\n//         }\r\n//         dispatch(updateTransferPatient(transferUpdate));\r\n//         if(TransferState == 'pending'){\r\n//             transferState(TransferState)\r\n//         }else{\r\n//             transferState('false')\r\n//         }\r\n//         console.log(hospitalName);\r\n//     }\r\n\r\n//     // const changeHistory = (patientDetails) =>{\r\n//     //     console.log(patientDetails);\r\n//     // }\r\n\r\n//     useEffect(() => {\r\n//         dispatch(loadPatients())\r\n\r\n//         if(symptoms.length ===1 && symptoms[0] ===''){\r\n//             if(patient.length !==0){\r\n//                 const selected = [patients.name];\r\n//                 setSymptoms(selected);\r\n//             }\r\n//         }\r\n\r\n//         if(drugs.length ===1 && drugs[0] ===''){\r\n//             if(patient.length !==0){\r\n//                 const selected = [patients.name];\r\n//                 setDrugs(selected);\r\n//             }\r\n//         }\r\n        \r\n//     }, [dispatch])\r\n\r\n//     return (\r\n\r\n//         <Container>\r\n//             <h1 style={{textAlign:'center'}}>Patient Profile</h1>\r\n//             <Col>\r\n//                 <div style={{width:'100%'}}>\r\n//                     <Row>\r\n//                         <div /*className=\"vs-col vs-xs- vs-sm-12\"*/style={{margin:'0%',width:'30%', position:'relative'}}>\r\n//                             <div className=\"set-animation from-left animate\">\r\n//                             <Card  className=\"m-2\" bg=\"#ffffff\" text=\"black\" style={{ width: '100%'}}>\r\n//                                 <h3 className=\"m-2\" style={{textAlign:'center'}}>Personal Details</h3>\r\n//                                 <Card.Body>\r\n//                                     <Card.Title>Name</Card.Title>\r\n//                                     <Card.Text>{patients.name}</Card.Text>\r\n//                                     <Card.Title>Date of Birth</Card.Title>\r\n//                                     <Card.Text>{patients.name}</Card.Text>\r\n//                                     <Card.Title>Age</Card.Title>\r\n//                                     <Card.Text>{patients.age}</Card.Text>\r\n//                                     <Card.Title>Address</Card.Title>\r\n//                                     <Card.Text>{patients.name}</Card.Text>\r\n//                                     <Card.Title>Phone number</Card.Title>\r\n//                                     <Card.Text>{patients.name}</Card.Text>\r\n//                                     <Button type='submit'  className='btn btn-primary' onClick={()=> window.location=`/hospital/editProfile/${patientId}`}>Edit Profile</Button><br/><br/>\r\n//                                 </Card.Body>\r\n//                             </Card>\r\n//                             </div>\r\n//                         </div>\r\n\r\n//                         <div /*className=\"vs-col vs-xs- vs-sm-12\"*/style={{margin:'0%',width:'70%', position:'relative'}}>\r\n//                             <div className=\"set-animation from-left animate\">\r\n//                             <Card className=\"m-2\" bg=\"#ffffff\" text=\"black\" style={{ width: '100%'}}>\r\n//                                 <h3 className=\"m-2\" style={{textAlign:'center'}}>Current Details</h3>\r\n//                                 <Card.Body>\r\n//                                     <Row>\r\n//                                         <div style={{width:'50%',float:'left'}}>\r\n//                                             <div className='ml-2 mb-2'>\r\n//                                                 <Card.Title>Hospital Name</Card.Title>\r\n//                                                 <Card.Text>{patients.name}</Card.Text>\r\n//                                                 <Card.Title>Admitted Date</Card.Title>\r\n//                                                 <Card.Text>{patients.name}</Card.Text>\r\n//                                                 <Card.Title>Doctor</Card.Title>\r\n//                                                 <Card.Text>{patients.name}</Card.Text>\r\n//                                                 <Card.Title>Symptoms</Card.Title>\r\n//                                                 <Card.Text>{patients.name}</Card.Text>\r\n//                                             </div>\r\n//                                         </div>\r\n\r\n//                                         <div style={{width:'50%',float:'left'}}>\r\n//                                             <div className='ml-2 mb-2'>\r\n//                                                 <Card.Title>Ward No</Card.Title>\r\n//                                                 <Card.Text>{patients.age}</Card.Text>\r\n//                                                 <Card.Title>Discharged Date</Card.Title>\r\n//                                                 <Card.Text>{patients.name}</Card.Text>\r\n//                                                 <Card.Title>Transfer Details</Card.Title>\r\n//                                                 <Card.Text>Hospital Name: {hospitalName} </Card.Text>\r\n//                                                 <Card.Text>Transfer Status: {tranferSt} </Card.Text>\r\n//                                                 <Card.Text>Transfer Date:  </Card.Text>\r\n//                                                 <Card.Title>Drug Details</Card.Title>\r\n//                                                 <Card.Text>{patients.name}</Card.Text>\r\n//                                             </div>\r\n//                                         </div>\r\n//                                     </Row>\r\n//                                     <Row>\r\n//                                     <br></br><Button \r\n//                                         type='submit'  \r\n//                                         className='btn btn-primary m-2' \r\n//                                         onClick = { () => history.push(`/hospital/editCurrentDetails/${patients._id}`)}\r\n//                                     >Update Details</Button>\r\n\r\n//                                     <br></br><Button \r\n//                                         type='submit'  \r\n//                                         className='btn btn-primary m-2' \r\n//                                         onClick = { () => history.push(`/hospital/editCurrentDetails/${patients._id}`)}\r\n//                                     >Discharge</Button>\r\n                                \r\n//                                     <br></br><Col style={{marginLeft:'10%'}}>\r\n//                                         <Form.Group>\r\n//                                                 <Form.Control onChange = {(e) => {\r\n//                                                     if(e.target.value !== \"Select Hospital\"){\r\n//                                                         setTransferHospital(e.target.value);\r\n//                                                     }\r\n//                                                 }} as=\"select\">\r\n//                                                      {hospitals.map((c,index) => <option selected={index === 0? 'slected': null}>{`${c.name}`}</option>)}\r\n//                                                 </Form.Control>\r\n//                                         </Form.Group>\r\n//                                     </Col>\r\n//                                     <br></br><Row style={{float:'right', marginRight:'5px'}}>\r\n//                                         <Button className='btn btn-primary m-2' disabled={tranferSt === 'pending' ? true : false} onClick={()=>transferPatient('pending')}>Transfer</Button>\r\n//                                         <Button className='btn btn-danger m-2' disabled={tranferSt === 'false'? true : false} onClick={()=>transferPatient('canceled')}>Cancel</Button>\r\n//                                     </Row>\r\n                                \r\n//                                     </Row>\r\n//                                 </Card.Body>\r\n//                             </Card>\r\n//                             </div>\r\n//                         </div>\r\n                       \r\n//                     </Row>\r\n//                 </div>\r\n\r\n//                 <div style={{width:'100%'}}>\r\n                                            \r\n//                     <Row>\r\n//                         <div /*className=\"vs-col vs-xs- vs-sm-12\"*/style={{margin:'0%',width:'30%', position:'relative'}}>\r\n//                             <div className=\"set-animation from-left animate\">\r\n//                             <Card className=\"m-2\" bg=\"#ffffff\" text=\"black\" style={{ width: '100%'}}>\r\n//                                 <h3 className=\"m-2\" style={{textAlign:'center'}}>Patient History</h3>\r\n//                                 <Scrollbars style={{ width: '100%', height: '26rem' , border:'1px black'}}>\r\n//                                     <ul className=\"m-2\">\r\n//                                     {patient.map( p=> \r\n//                                         <Button \r\n//                                             className=\"btn btn-light\"\r\n//                                             style={{width:'80%', borderRadius:'0px'}}\r\n//                                             onClick={()=>changeHistory(p)}\r\n//                                             >{p.name}</Button>)}\r\n//                                     </ul>\r\n//                                 </Scrollbars>\r\n//                             </Card>\r\n//                             </div>\r\n//                         </div>\r\n\r\n\r\n//                         <div /*className=\"vs-col vs-xs- vs-sm-12\"*/style={{margin:'0%',width:'70%', position:'relative'}}>\r\n//                             <div className=\"set-animation from-left animate\">\r\n//                             <Card className=\"m-2\" bg=\"#ffffff\" text=\"black\" style={{ width: '100%'}}>\r\n//                                 <h3 className=\"m-2\" style={{textAlign:'center'}}>Patient History</h3>\r\n//                                 <Card.Body>\r\n//                                     <Row>\r\n//                                         <div style={{width:'50%',float:'left'}}>\r\n//                                             <div className='ml-2 mb-2 details'>\r\n//                                                 <Card.Title>Hospital Name</Card.Title>\r\n//                                                 <Card.Text>{patientHistory.name}</Card.Text>\r\n//                                                 <Card.Title>Admitted Date</Card.Title>\r\n//                                                 <Card.Text>{patientHistory.name}</Card.Text>\r\n//                                                 <Card.Title>Doctor</Card.Title>\r\n//                                                 <Card.Text>{patientHistory.name}</Card.Text>\r\n//                                                 <Card.Title>Symptomes</Card.Title>\r\n//                                                 <Card.Text>{patientHistory.name}</Card.Text>\r\n//                                             </div>\r\n//                                         </div>\r\n\r\n//                                         <div style={{width:'50%',float:'left'}}>\r\n//                                             <div className='ml-2 mb-2'>\r\n//                                                 <Card.Title>Ward No</Card.Title>\r\n//                                                 <Card.Text>{patientHistory.age}</Card.Text>\r\n//                                                 <Card.Title>Discharged Date</Card.Title>\r\n//                                                 <Card.Text>{patientHistory.name}</Card.Text>\r\n//                                                 <Card.Title>Transfer Details</Card.Title>\r\n//                                                 <Card.Text>Hospital Name:  </Card.Text>\r\n//                                                 <Card.Text>Transfer Status: </Card.Text>\r\n//                                                 <Card.Text>Transfer Date:  </Card.Text>\r\n//                                                 <Card.Title>Drug Details</Card.Title>\r\n//                                                 <Card.Text>{patientHistory.name}</Card.Text>\r\n//                                             </div>\r\n//                                         </div>\r\n//                                     </Row>\r\n//                                 </Card.Body>\r\n//                             </Card>\r\n//                             </div>\r\n//                         </div>\r\n\r\n//                     </Row>\r\n//                 </div>\r\n//         </Col>\r\n//         </Container>    \r\n    \r\n//     )\r\n// }\r\n\r\n// export default PatientProfile\r\n\r\nimport React, {useEffect, useState} from 'react'\r\nimport {Container, Button, Card, Row, Col, Nav, Form,FormControl} from 'react-bootstrap'\r\nimport axios from 'axios';\r\nimport Loader from '../../components/Loader'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loadPatient, getAllPatients} from '../../store/entities/patients';\r\nimport {getAllHospitals, loadHospitals} from '../../store/entities/hospitals'\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport PersonalInfo from '../../components/patientProfile/PersonalInfo'\r\nimport CurrentInfo from '../../components/patientProfile/CurrentInfo'\r\nimport History from '../../components/patientProfile/History'\r\n\r\n\r\nconst PatientProfile =  ({match, history}) => {\r\n    const dispatch = useDispatch()\r\n    const patientId = match.params.id\r\n    \r\n    const userDetails = useSelector(state => state.auth);\r\n    const { user } = userDetails.data\r\n    const auth = user\r\n\r\n    console.log(user)\r\n\r\n    //const patients = useSelector(getAllPatients)\r\n    const [patients , setPatients] = useState([])\r\n    const hospitals = useSelector(getAllHospitals)\r\n    console.log(patients)\r\n\r\n    const [startDate, setStartDate] = useState('');\r\n    const [endDate, setEndDate] = useState('');\r\n\r\n   const [filteredHistory, setFilteredHistory] = useState([])\r\n   const [patientHistory, changeHistory ] = useState(filteredHistory) \r\n   const [findHistory, setfindHistory] = useState(false)\r\n\r\n    const setDates = (date, type) =>{\r\n        if(type === 'start'){\r\n            setStartDate(date);\r\n        }else{\r\n            setEndDate(date)\r\n        }\r\n    }\r\n\r\n    const searchHistory =() =>{\r\n        if(startDate <= endDate){\r\n            let medicalHistories = getMedicalHistories(startDate, endDate, patients);\r\n           // console.log(medicalHistories)\r\n            changeHistory(medicalHistories)\r\n            setFilteredHistory(medicalHistories);\r\n            setfindHistory(true)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        //dispatch(loadPatient())\r\n        const fetchPatient = async () => {\r\n            const {data} = await axios.get(`http://localhost:8000/api/v1/patients/${patientId}`)\r\n            setPatients(data.data)\r\n\r\n            console.log(data)\r\n        }\r\n\r\n        fetchPatient()\r\n\r\n        dispatch(loadHospitals())\r\n        \r\n    }, [patients])\r\n\r\n    return (\r\n        <Container>\r\n            {userDetails.loggedIn ? \r\n            <div>\r\n                <h4 style={{textAlign:'center', fontWeight:'700'}}>PATIENT PROFILE</h4>\r\n                <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n                    \r\n                    <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-3\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                        <div className=\"set-animation from-left animate\">\r\n                            <PersonalInfo patients={objectDestructure(auth, \"user\")} /*currentHospital={currentHospital_id}\r\n                                userHospital={userHospital_id} id={patients ._id}*/>\r\n                            </PersonalInfo>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                        <div className=\"set-animation from-left animate\">\r\n                            {patients.currentMedicalHistory ?\r\n                                <CurrentInfo patients={objectDestructure(patients, \"history\").slice(-1)[0]}\r\n                                   /* userHospital={userHospital_id} currentHospital={currentHospital_id} hospitals={hospitals}*/\r\n                                ></CurrentInfo> : \r\n\r\n                                <CurrentInfo patients={\"\"} currentHospital={\"\"}\r\n                                    userHospital={\"\"}\r\n                                ></CurrentInfo>}\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    {/* {auth.role !== 'patient' &&\r\n                    <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-3\" style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                            <div className=\"set-animation from-left animate\">\r\n                            {currentHospital_id === userHospital_id ? \r\n                                <Actions patients={patients} hospitals={hospitals} wards ={wardsDetails} popUpHandler={setPopUp}></Actions> \r\n                               //<Card>rfergre</Card>\r\n                                :''\r\n                            }\r\n                            </div>\r\n                    </div> } */}\r\n                </div>\r\n\r\n                <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n                    <div className=\"vs-col vs-xs vs-sm-12 vs-lg-3\" style={{marginLeft:'0%',marginRight:'0%',width:'100%'}}>\r\n                        <Card className='m-2'>\r\n                            <h5 className=\"m-2 font-weight-bold\" style={{textAlign:'center'}}>SEARCH MEDICAL HISTORY</h5>\r\n                            <Form.Group as={Col} controlId='sd'>\r\n                                <Form.Label class=\"float-left\" className = 'form-label'>Start Date:</Form.Label>\r\n                                <Form.Control \r\n                                    type='date'\r\n                                    name='start_date' \r\n                                    onChange={(e)=>{\r\n                                        setDates(e.target.value, 'start')\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            <FormControl.Feedback type='invalid'>This field is required!</FormControl.Feedback>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Col} controlId='ed'>\r\n                                <Form.Label class=\"float-left\" className = 'form-label'>End Date:</Form.Label>\r\n                                <Form.Control \r\n                                    type='date'\r\n                                    name='end_date' \r\n                                    onChange={(e)=>{\r\n                                        setDates(e.target.value, 'end')\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            <FormControl.Feedback type='invalid'>This field is required!</FormControl.Feedback>\r\n                            </Form.Group>\r\n                            \r\n                            { startDate !== '' && endDate !== '' && startDate > endDate ?\r\n                            <Card \r\n                                style={{backgroundColor:'#fca8a4', color:'#b73333', opacity:'0.5', padding:'10px', margin:'5px'}}\r\n                                className='m-2'\r\n                            >Start date must be past to the end date</Card> : ''}\r\n                            { startDate !== '' && endDate !== '' && filteredHistory.length === 0 && findHistory?\r\n                            <Card \r\n                                style={{backgroundColor:'#fca8a4', color:'#b73333', opacity:'0.5', padding:'10px', margin:'5px'}}\r\n                                className='m-2'\r\n                            >No Medical History Data</Card> : ''}\r\n                            <Button \r\n                                className='btn btn-primary m-2'\r\n                                disabled ={startDate === '' || endDate === ''}\r\n                                onClick= {() => searchHistory()} \r\n                            >Search</Button>\r\n\r\n                        </Card>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"vs-col vs-xs vs-sm-12 vs-lg-6\" style={{marginLeft:'0%',marginRight:'0%',width:'100%'}}>\r\n                        <History patientHistory={patientHistory} filteredHistory={filteredHistory} hospital={getHospitalName(filteredHistory, hospitals)}></History>\r\n                    </div>\r\n                    \r\n                    {filteredHistory.length !== 0 &&\r\n                    <div className=\"vs-col vs-xs vs-sm-12 vs-lg-3\" style={{marginLeft:'0%',marginRight:'0%',width:'100%'}}>\r\n                    <Card className='m-2'>\r\n                       \r\n                        <div>\r\n                            <h5 className='text-center m-2 font-weight-bold'>MEDICAL HISTORY LIST</h5>\r\n                            <Scrollbars style={{ width: '100%',minHeight:'15rem', height:'auto', overflowX:'hidden', border:'1px black'}}>\r\n                                <ul className=\"m-2\">\r\n                                {filteredHistory.map( p=> \r\n                                    <Button \r\n                                        className=\"btn btn-light\"\r\n                                        style={{width:'80%', borderRadius:'0px'}}\r\n                                        onClick={()=>changeHistory(p)}\r\n                                        >\r\n                                        {p.admittedDate}\r\n                                    </Button>)}\r\n                                </ul>\r\n                            </Scrollbars>\r\n                        </div>\r\n                    </Card>\r\n                    </div>}\r\n\r\n                    \r\n\r\n                </div>\r\n            </div>: history.push('/')}\r\n\r\n             {/* <AlertDialog dialogSet={popup} closePopUp={setPopUp}  dischargeHandler={setDischargeHandler}/> */}\r\n            \r\n        </Container>    \r\n    \r\n    )\r\n}\r\n\r\n\r\nexport default PatientProfile\r\n\r\n\r\nexport function getMedicalHistories(start_date, end_date, patients){\r\n    const histories = objectDestructure(patients, \"history\")\r\n    if(histories !== \"\"){\r\n        //console.log(histories)\r\n        return histories.filter ( p=> p.admittedDate >= start_date && p.admittedDate <= end_date)\r\n    }\r\n    return \"\"\r\n}\r\n\r\nexport function objectDestructure ( patients, type){\r\n    let newList = \"\"\r\n    if(typeof(patients) === 'undefined' || patients.length === 0){\r\n         return newList\r\n    } \r\n \r\n    const {medicalHistory, user } = patients\r\n    if(user){\r\n         if(type === \"user\"){\r\n            return user\r\n         }\r\n    }\r\n\r\n    if(medicalHistory){\r\n        if(type === \"history\"){\r\n           return medicalHistory\r\n        }\r\n    }\r\n\r\n    return newList\r\n}\r\n\r\nfunction getHospitalName(filteredhistory, hospitals){\r\n   // console.log(filteredhistory)\r\n    if(filteredhistory.length === 0){\r\n        return \"\"\r\n    }\r\n    const hospitalName = hospitals.filter(p=> p._id === filteredhistory[0].hospital)\r\n    return hospitalName[0]\r\n}\r\n\r\nfunction getCurrentHospitalId(patients){\r\n    let id = \"\"\r\n    if(typeof(patients) === 'undefined' || patients.length === 0){\r\n         return id\r\n    } \r\n\r\n    if(patients.currentMedicalHistory){\r\n        const lastHistory = patients.medicalHistory.slice(-1)[0]\r\n        return lastHistory.hospital\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\n\r\nconst FigureOne = ({values}) => {\r\n    const {totalActiveCases, totalDeaths, totalRecovered } = values\r\n    return (\r\n        <div>\r\n            <div style={{justifyContent:'center'}}>\r\n                <h4 style={{textAlign:'center',margin:'1%'}}>Total Figures</h4>\r\n            </div>\r\n            <div style={{margin:'1%',justifyContent:'center'}}>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        <i className='fa fa-hospital-alt' style={{fontSize:'30px', color:'#6b85de',margin:'20px'}}></i>\r\n                    </div>\r\n                    <div>\r\n                        <h3 style={{fontSize:'14px'}}>Total Cases</h3>\r\n                        <h1 style={{color:'#6b85de', float:'left'}}>{formatNumber(totalActiveCases)}</h1>\r\n                    </div>\r\n                </div>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        <i className='fa fa-bed' style={{fontSize:'30px', color:'#ff8c84',margin:'20px'}}></i>\r\n                    </div>\r\n                    <div>\r\n                        <h3 style={{fontSize:'14px'}}>Deaths</h3>\r\n                        <h1 style={{color:'#ff8c84', float:'left'}}>{formatNumber(totalDeaths)}</h1>\r\n                    </div>\r\n                </div>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        <i className='fa fa-running' style={{fontSize:'40px', color:'#7dca53',margin:'20px'}}></i>\r\n                    </div>\r\n                    <div>\r\n                        <h3 style={{fontSize:'14px'}}>Recovered</h3>\r\n                        <h1 style={{color:'#7dca53', float:'left'}}>{formatNumber(totalRecovered)}</h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FigureOne\r\n\r\nexport const formatNumber = inputNumber => {\r\n    let formetedNumber=(Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n    let splitArray=formetedNumber.split('.');\r\n    if(splitArray.length>1){\r\n      formetedNumber=splitArray[0];\r\n    }\r\n    return(formetedNumber);\r\n  };","import React from 'react'\r\n\r\nconst FigureTwo = ({values}) => {\r\n    const { nohospital, totalBeds, freeBeds} = values\r\n   // console.log(details);\r\n    return (\r\n        <div>\r\n            <div style={{justifyContent:'center'}}>\r\n                <h4 style={{textAlign:'center',margin:'1%'}}>Total Figures</h4>\r\n            </div>\r\n            <div style={{margin:'1%',justifyContent:'center'}}>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        <i className='fa fa-hospital-alt' style={{fontSize:'30px', color:'#6b85de',margin:'20px'}}></i>\r\n                    </div>\r\n                    <div>\r\n                        <h3 style={{fontSize:'14px'}}>Total Hospitals</h3>\r\n                        <h1 style={{color:'#6b85de', float:'left'}}>{formatNumber(nohospital)}</h1>   \r\n                    </div>\r\n                </div>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        <i className=\"fa fa-plus-circle\" aria-hidden=\"true\" style={{fontSize:'40px', color:'#ff8c84',margin:'20px'}}></i>\r\n                    </div>\r\n                    <div>\r\n                        <h3 style={{fontSize:'14px'}}>Total Beds</h3>\r\n                        <h1 style={{color:'#ff8c84', float:'left'}}>{formatNumber( totalBeds)}</h1>\r\n                    </div>\r\n                </div>\r\n                <div className='figures-div' style={{display:'flex'}}>\r\n                    <div>\r\n                        <i className='fa fa-procedures' style={{fontSize:'30px', color:'#fdb01a',margin:'20px'}}></i>\r\n                    </div>\r\n                    <div>\r\n                        <h3 style={{fontSize:'14px'}}>Total Beds Left</h3>\r\n                        <h1 style={{color:'#fdb01a', float:'left'}}>{formatNumber(freeBeds)}</h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FigureTwo\r\n\r\nexport const formatNumber = inputNumber => {\r\n    let formetedNumber=(Number(inputNumber)).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n    let splitArray=formetedNumber.split('.');\r\n    if(splitArray.length>1){\r\n      formetedNumber=splitArray[0];\r\n    }\r\n    return(formetedNumber);\r\n  };","import React from 'react'\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport Loader from '../components/Loader'\r\n\r\n\r\nfunction HorizontalBarGraph({keys, values}) {\r\n  const districts = getTopTen(keys);\r\n  const positiveCases = getTopTen(values)\r\n // console.log(districts)\r\n   // const config = {\r\n      const series = [{\r\n         //data: [400, 430, 448, 470, 540, 580, 690, 1100, 1200, 1380]\r\n         data: positiveCases,\r\n       }];\r\n       const options= {\r\n           plotOptions:{\r\n               bar:{\r\n                   horizontal:true,\r\n                   dataLabels:{\r\n                       enabled:true\r\n                   },\r\n               }\r\n           },\r\n           xaxis: {\r\n            // categories: ['South Korea', 'Canada', 'United Kingdom', 'Netherlands', 'Italy', 'France', 'Japan',\r\n            //   'United States', 'China', 'Germany']\r\n            categories : districts,\r\n        }\r\n       }\r\n        \r\n  //   } \r\n\r\n  return (\r\n    <>\r\n    {!districts && !positiveCases &&  (<Loader></Loader>)}\r\n    <div\r\n      style={{\r\n        backgroundColor: \"white\",\r\n        textAlign: \"center\",\r\n      }}\r\n    >\r\n      <br />\r\n      <ReactApexChart \r\n        options={options} \r\n        series={series} \r\n        type=\"bar\" \r\n      />\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HorizontalBarGraph;\r\n\r\nfunction getTopTen(list){\r\n  if(list){\r\n    return list.slice(0,10)\r\n  }\r\n  return \r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\nimport FigureOne from '../../components/healthMinistryComponents/FigureOne'\r\nimport FigureTwo from '../../components/healthMinistryComponents/FigureTwo'\r\nimport PieChart from '../../components/PieChart'\r\nimport BarChart from '../../components/BarChart'\r\nimport HorizontalBarChart from '../../components/HorizontalBarChart'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nconst Dashboard = () => {\r\n\r\n    const [figureOne, setFigureOne] = useState('')\r\n    const [figureTwo, setFigureTwo] = useState('')\r\n    const [chart, setChart] = useState('')\r\n    const [district, setDistrict] = useState([])\r\n   // console.log(district)\r\n    const [districtValues, setDistrictValues] = useState([])\r\n    //console.log(districtValues)\r\n\r\n\r\n    const hospitals = [ 'National Hospital of Sri Lanka', 'Lady Ridgeway Hospital for Children',\r\n                        'Castle Street Hospital for Women', 'Base Hospital Mulleriyawa',\r\n                        'North Colombo Teaching Hospital','District General Hospital Negombo',\r\n                        'District General Hospital Gampaha','National Hospital Kandy',\r\n                        'Teaching Hospital Karapitiya','District General Hospital Hambantota']\r\n    ///const districts = ['Colombo','Gampaha','Kalutara','Galle','Kandy','Matara','Kurunegala','Jaffna','Anuradhapura','Puttalam']\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchOverall = async () => {\r\n            const response = await axios.request({\r\n                url: 'http://localhost:8000/api/v1/dashboard/publicdashboard',\r\n                method: 'get',\r\n                data: {},\r\n            });\r\n\r\n            const response2 = await axios.request({\r\n                url: 'http://localhost:8000/api/v1/dashboard/1',\r\n                method: 'get',\r\n                data: {},\r\n            });\r\n\r\n\r\n            if (response){\r\n                const {dashboard, history, hospital} = response.data.data;\r\n\r\n                const {totalActiveCases, totalDeaths, totalRecovered} = dashboard\r\n                const valueSet_1 = {\r\n                    totalActiveCases:totalActiveCases,\r\n                    totalDeaths:totalDeaths,\r\n                    totalRecovered : totalRecovered\r\n                }\r\n                setFigureOne(valueSet_1)\r\n\r\n                const {nohospital, totalBeds, freeBeds, admittedPatients} = hospital\r\n                const valueSet_2 = {\r\n                    nohospital:nohospital,\r\n                    totalBeds:totalBeds,\r\n                    freeBeds : freeBeds\r\n                }\r\n                setFigureTwo(valueSet_2)\r\n                \r\n                const valueSet_4 = {\r\n                    firstValue:admittedPatients,\r\n                    secondValue : freeBeds\r\n                }\r\n                setChart(valueSet_4)\r\n\r\n              //  console.log(dashboard)\r\n               // const {districtTotals} = data.total\r\n                setDistrict(Object.keys(dashboard['districtTotals']))\r\n                setDistrictValues(Object.values(dashboard['districtTotals']))\r\n               // setCases(Object.values(data2['timeline']['cases']))\r\n                //console.log(districtTotals)\r\n            }\r\n        }\r\n\r\n        fetchOverall()\r\n\r\n     },[])\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n                    <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-3\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                         <div className=\"set-animation from-left animate\">\r\n                            <Card className='m-2 con-vs-card text-center'>\r\n                                <FigureOne values={figureOne}></FigureOne>\r\n                            </Card>\r\n                         </div>\r\n\r\n                     </div>\r\n\r\n                    <Card className=\"vs-col vs-xs vs-sm-12 vs-lg-6 mt-2 mb-2\" style={{margin:'0%',width:'100%'}}>\r\n                         <div>\r\n                             <h3 style={{textAlign:'center', margin:'2%'}}>Total vs Active Cases (SL)</h3>\r\n                         </div>\r\n                         <div style={{position:'relative' ,margin:'2%'}}>\r\n                            <PieChart values={chart}/>\r\n                         </div> \r\n                    </Card>\r\n        \r\n                     <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-3\" style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                        <div className=\"set-animation from-left animate\">\r\n                            <Card className='m-2 con-vs-card text-center'>\r\n                                <FigureTwo values={figureTwo}></FigureTwo>\r\n                            </Card>\r\n                         </div>\r\n                     </div>\r\n            </div>\r\n\r\n            <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n                <div className=\"vs-col vs-xs vs-sm-12 vs-lg-6\" style={{marginLeft:'0%',marginRight:'0%',width:'100%'}}>\r\n                    <Card className='m-2'>\r\n                        <div style={{position:'relative' ,margin:'2%'}}>\r\n                        <h3 style={{textAlign:'center', margin:'2%'}}>Most Covid Patient Admitted Hospitals</h3>\r\n                        </div>\r\n                        <div style={{position:'relative' ,margin:'2%'}}>\r\n                            <HorizontalBarChart keys={hospitals} values={districtValues}></HorizontalBarChart>\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n\r\n\r\n                <div className=\"vs-col vs-xs vs-sm-12 vs-lg-6\" style={{marginLeft:'0%',marginRight:'0%',width:'100%'}}>\r\n                    <Card className='m-2'>\r\n                        <div style={{position:'relative' ,margin:'2%'}}>\r\n                        <h3 style={{textAlign:'center', margin:'2%'}}>Most Covid Patient Recorded Districts</h3>\r\n                        </div>\r\n                        <div style={{position:'relative' ,margin:'2%'}}>\r\n                            <HorizontalBarChart keys={district} values={districtValues}></HorizontalBarChart>\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const toastAction = createAction(\"toast\");\r\n\r\nexport const invokeToast = (message, type) => toastAction({message, type});","import Container from 'react-bootstrap/Container';\r\nimport {Form, Button, Col, FormControl, Row} from 'react-bootstrap';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addHospital, getHospitalAddedStatus} from '../../store/entities/hospitals';\r\nimport { toastAction } from '../../store/toastActions';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport default function AddHospital(props) {\r\n    const validateContact = (contact) => {\r\n        const reg = /^(0)([0-9]{9})$/;\r\n        return reg.test(contact);\r\n    }\r\n\r\n    const validateName = (name) =>{\r\n        const reg = /^[A-Za-z\\b]+$/;\r\n        return reg.test(name)\r\n    } \r\n    \r\n    const validateCity = (city) =>{\r\n        const reg = /^[A-Za-z\\b]+$/;\r\n        return reg.test(city)\r\n    } \r\n\r\n    const dispatch = useDispatch();\r\n    const hospitalAddedStatus = useSelector(getHospitalAddedStatus);\r\n\r\n    const [name, setName] = useState('');\r\n    const [contact, setContact] = useState('');\r\n    const [district, setDistrict] = useState('');\r\n    const [city, setCity] = useState('');\r\n    const [province, setProvince] = useState('');\r\n    const [userState, setUserState] = useState(false)\r\n\r\n\r\n    const submitHandler = (e) => {\r\n      e.preventDefault();\r\n      let hospital= {\r\n          name: name,\r\n          Contact: [contact],\r\n          address: {\r\n              district : district,\r\n              city : city,\r\n              province : province\r\n          },\r\n      }\r\n      if (!validateName(name)) {\r\n        alert(\"Hospital Name should not include digits\");\r\n        }\r\n        else if (!validateContact(contact)) {\r\n            alert(\"Enter valid telephone number\");\r\n        }\r\n        else if (!validateCity(city)) {\r\n            alert(\"City should not include digits\");\r\n        }else{\r\n            dispatch(addHospital(hospital));\r\n            setUserState(true);\r\n        }     \r\n    };\r\n\r\n    useEffect(() => {\r\n        if(hospitalAddedStatus.hospitalAdded && userState){\r\n          setUserState(false)\r\n          dispatch(toastAction({ message: \"Hospital Added Successfully\", type: 'info' }))\r\n            window.location.href = \"/healthMinistry/hospital\";\r\n        }\r\n     },[dispatch, hospitalAddedStatus])\r\n        \r\n    return (\r\n           <Container > \r\n        <Box sx={{ bgcolor: '#cfe8fc', height: '850px' }}>\r\n        <div className=\"col-10 mx-auto banner text-center\"><br/>\r\n            <h3 className=\"text-capitalize\">\r\n                    <strong className=\"banner-title\">Want to Add NEW HOSPITAL?</strong></h3></div>\r\n                <Form className=\"form\" onSubmit={submitHandler}>\r\n                    <Form.Group as={Col} controlId='name'>\r\n                    <Form.Label class=\"float-left\" className = 'form-label'><strong>HOSPITAL NAME:</strong></Form.Label>\r\n                    <Col sm={12}>\r\n                    <Form.Control \r\n                        type='text'\r\n                        id='name' \r\n                        placeholder='Enter Hospital Name'\r\n                        onChange={(e) => setName(e.target.value)}\r\n                        // size='sm'\r\n                        required\r\n                    />\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col}  controlId='contact'>\r\n                    <Form.Label class=\"float-left\" className = 'form-label' ><strong>CONTACT NUMBER:</strong></Form.Label>\r\n                    <Col sm={12}>\r\n                    <Form.Control \r\n                        type='number'\r\n                        id='contact'\r\n                        placeholder=\"0XXXXXXXXX\"  \r\n                        // size = 'sm'\r\n                        required\r\n                        onChange={(e) => setContact(e.target.value)} \r\n                    />  \r\n                    <small>*Should start with 0 <br/>*Should consist of 10 digits</small>\r\n                    </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"formCity\">\r\n                                <Form.Label class=\"float-left\" className = 'form-label'><strong>CITY:</strong></Form.Label>\r\n                                <Col sm={12}>\r\n                                <Form.Control\r\n                                type=\"text\"\r\n                                id=\"city\"\r\n                                // size = 'sm'\r\n                                required \r\n                                placeholder='Enter City'\r\n                                onChange={(e) => setCity(e.target.value)}/>\r\n                                </Col>\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group  as={Col} controlId=\"formDistrict\">\r\n                                <Form.Label class=\"float-left\" className = 'form-label'><strong>DISTRICT:</strong></Form.Label>\r\n                                <Col sm={12}>\r\n                                <Form.Control \r\n                                as=\"select\" \r\n                                id=\"district\" \r\n                                onChange={(e) => setDistrict(e.target.value)}\r\n                                required>\r\n                                    <option value=\"\" disabled selected >Select Here </option>\r\n                                    <option value=\"Colombo\">Colombo</option>\r\n                                    <option value=\"Gampaha\">Gampaha</option>\r\n                                    <option value=\"Kalutara\">Kalutara</option>\r\n                                    <option value=\"Kandy\">Kandy </option>\r\n                                    <option value=\"Matale\">Matale </option>\r\n                                    <option value=\"Nuwera-Eliya\">Nuwera-Eliya</option>\r\n                                    <option value=\"Galle\">Galle </option>\r\n                                    <option value=\"Matara\">Matara</option>\r\n                                    <option value=\"Hambantota\">Hambantota </option>\r\n                                    <option value=\"Jaffna\">Jaffna </option>\r\n                                    <option value=\"Mannar\">Mannar</option>\r\n                                    <option value=\"Vavuniya\">Vauniya </option>\r\n                                    <option value=\"Mulathivu\">Mulathivu </option>\r\n                                    <option value=\"Kilinochchi\">Kilinochchi </option>\r\n                                    <option value=\"Batticaloa\">Batticaloa</option>\r\n                                    <option value=\"Trincomalee\">Trincomalee  </option>\r\n                                    <option value=\"Kurunegala\">Kurunegala   </option>\r\n                                    <option value=\"Puttalam\">Puttalam  </option>\r\n                                    <option value=\"Anuradhapura\">Anuradhapura   </option>\r\n                                    <option value=\"Polonnaruwa\">Polonnaruwa   </option>\r\n                                    <option value=\"Badulla\">Badulla  </option>\r\n                                    <option value=\"Monaragala\">Monaragala   </option>\r\n                                    <option value=\"Rathnapura\">Rathnapura   </option>\r\n                                    <option value=\"Kegalle\">Kegalle </option>\r\n                                    </Form.Control>\r\n                                </Col>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Col}  controlId=\"formProvince\">\r\n                                <Form.Label class=\"float-left\" className = 'form-label' ><strong>PROVINCE:</strong></Form.Label>\r\n                                <Col sm={12}>\r\n                                <Form.Control \r\n                                as=\"select\" \r\n                                id=\"province\" \r\n                                onChange={(e) => setProvince(e.target.value)}\r\n                                required>\r\n                                    <option value=\"\" disabled selected >Select Here </option>\r\n                                    <option value=\"Central\">Central Province</option>\r\n                                    <option value=\"Eastern\">Eastern Province</option>\r\n                                    <option value=\"Northern\">Northern Province</option>\r\n                                    <option value=\"Southern\">Southern Province </option>\r\n                                    <option value=\"Western\">Western Province </option>\r\n                                    <option value=\"North Western\">North Western Province </option>\r\n                                    <option value=\"North Central\">North Central Province </option>\r\n                                    <option value=\"Uva\">Uva Province </option>\r\n                                    <option value=\"Sabaragamuwa\">Sabaragamuwa Province </option>\r\n                                    \r\n                                    </Form.Control>\r\n                                </Col>\r\n                                </Form.Group>\r\n                            \r\n                        <div class=\"horizontal-center\"> \r\n                        <Button variant=\"primary\" type=\"submit\">ADD NEW HOSPITAL</Button>\r\n                        </div>\r\n                </Form>\r\n                </Box>\r\n            </Container>            \r\n        );\r\n    }\r\n","import { createSlice} from '@reduxjs/toolkit'\r\nimport { apiCallBegan } from '../apiActions';\r\nimport { createSelector } from 'reselect';\r\nimport configData from '../../config.json';\r\nimport moment from 'moment';\r\n\r\nconst slice = createSlice({\r\n    name: \"users\",\r\n    initialState: {\r\n        list: [],\r\n        loading: false,\r\n        lastFetch: null,\r\n        userAdded: false,\r\n        isEmailSent: false,\r\n        isPasswordReset: false,\r\n    },\r\n\r\n    reducers: {\r\n        userCreateRequested(user, action) {\r\n            user.loading = true;\r\n            user.userAdded = false;\r\n        },\r\n\r\n        userCreateRequestFailed(user, action){\r\n            user.loading = false;\r\n        },\r\n\r\n        userCreateRequestSucceeded(user, action){\r\n            user.loading = false;\r\n            user.userAdded = true\r\n        },\r\n        \r\n        userRequested(user, action){\r\n            user.loading = true;\r\n        },\r\n\r\n\r\n        userRequestFailed(user, action){\r\n            user.loading = false;\r\n            \r\n        },\r\n\r\n        userReceived(users, action){\r\n            users.list = action.payload.data.users;\r\n            users.loading = false;\r\n            users.lastFetch = Date.now();\r\n        },\r\n\r\n        sendMAilSuccess(users, action){\r\n            users.isEmailSent = true \r\n        },\r\n\r\n        sendMailFailed(users, action){\r\n            users.isEmailSent = false\r\n        },\r\n\r\n        resetPasswordSuccess(users, action){\r\n            users.isPasswordReset = true\r\n            console.log(action.payload.status)\r\n        },\r\n\r\n        resetPasswordFailed(users, action){\r\n            users.isPasswordReset = false\r\n            console.log(action.payload.status)\r\n        }\r\n\r\n        // userUpdated(user, action){\r\n        //     console.log(action.payload.data.user)\r\n        // },\r\n    }\r\n});\r\n\r\nexport default slice.reducer;\r\n\r\nexport const {\r\n    userRequested,\r\n    userRequestFailed,\r\n    userReceived,\r\n    userCreateRequested,\r\n    userCreateRequestFailed,\r\n    userCreateRequestSucceeded,\r\n    sendMAilSuccess,\r\n    sendMailFailed,\r\n    resetPasswordSuccess,\r\n    resetPasswordFailed\r\n   // userUpdated,\r\n} =slice.actions;\r\n\r\nconst userURL = \"/api/v1/\";\r\nconst refreshTime = configData.REFRESH_TIME;\r\n\r\nexport const loadUsers = () => (dispatch, getState) => {\r\n    const { lastFetch } = getState().entities.user;\r\n\r\n    const diffInMinutes = moment().diff(moment(lastFetch), \"minutes\");\r\n    if (diffInMinutes < refreshTime) return;\r\n    \r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: userURL + 'users',\r\n            onStart: userRequested.type,\r\n            onSuccess: userReceived.type,\r\n            onError: userRequestFailed.type\r\n        })\r\n    );\r\n};\r\n\r\nexport const addUser = (user) => (dispatch) => {\r\n    console.log(user)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: userURL + 'users/signup',\r\n            method: \"post\",\r\n            data: user,\r\n            onStart: userCreateRequested,\r\n            onSuccess: userCreateRequestSucceeded.type,\r\n            onError: userCreateRequestFailed\r\n        })\r\n    );\r\n}\r\n\r\nexport const forgotPassword = (user) => (dispatch) => {\r\n    console.log(user)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: userURL + 'users/forgotpassword',\r\n            method: \"post\",\r\n            data: user,\r\n            onSuccess: sendMAilSuccess,\r\n            onError: sendMailFailed,\r\n        })\r\n    );\r\n}\r\n\r\nexport const resetPassword = (user, token) => (dispatch) => {\r\n    console.log(user)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: userURL + `users/resetpassword/${token}`,\r\n            method: \"patch\",\r\n            data: user,\r\n            onSuccess: resetPasswordSuccess,\r\n            onError : resetPasswordFailed\r\n        })\r\n    );\r\n}\r\n\r\nexport const resetPasswordLoggedIn = (user, token) => (dispatch) => {\r\n    console.log(user)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: userURL + 'users/updatepassword',\r\n            method: \"patch\",\r\n            data: user,\r\n            onSuccess: resetPasswordSuccess,\r\n            onError : resetPasswordFailed\r\n        })\r\n    );\r\n}\r\n\r\nexport const getUserLoadingStatus = createSelector(\r\n    state => state.entities.userloading,\r\n    loading => loading\r\n);\r\n\r\nexport const getUserAddedStatus = createSelector(\r\n    state => state.entities.user,\r\n    userAdded => userAdded\r\n)\r\n\r\nexport const getAllUsers = createSelector(\r\n    state => state.entities.user,\r\n    user => user.list\r\n);\r\n\r\nexport const getEmailSentState = createSelector(\r\n    state => state.entities.user,\r\n    isEmailSent =>isEmailSent\r\n);\r\n\r\nexport const getPasswordResetState = createSelector(\r\n    state => state.entities.user,\r\n    isPasswordReset =>isPasswordReset\r\n);","import 'bootstrap/dist/css/bootstrap.css';\r\nimport {Form, Button, Container, Col, Row} from 'react-bootstrap';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addUser, getUserAddedStatus} from '../../store/entities/users';\r\nimport { toastAction } from '../../store/toastActions';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport default function AddHospitalAdmin(props) {\r\n    const current = new Date().toISOString().split(\"T\")[0]\r\n\r\n    const validateFirstName = (firstName) =>{\r\n        const reg = /^[A-Za-z\\b]+$/;\r\n        return reg.test(firstName)\r\n    }\r\n\r\n    const validateLastName = (lastName) =>{\r\n        const reg = /^[A-Za-z\\b]+$/;\r\n        return reg.test(lastName)\r\n    }\r\n\r\n    const validateEmail = (email) => {\r\n        const regexp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return regexp.test(email);\r\n    }\r\n\r\n    const validatePassword = (password) => {\r\n        const regpw = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{6,}$/;\r\n        return regpw.test(password);\r\n    }\r\n    const validateContact = (contact) => {\r\n        const reg = /^(0)([0-9]{9})$/;\r\n        return reg.test(contact);\r\n    }\r\n\r\n    const validateCity = (city) =>{\r\n        const reg = /^[A-Za-z\\b]+$/;\r\n        return reg.test(city)\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n    const userAddedStatus = useSelector(getUserAddedStatus);\r\n    const [userState, setUserState] = useState(false)\r\n\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [birthday, setBirthday] = useState('');\r\n    const [contact, setContact] = useState('');\r\n    const [line1, setLine1] = useState('');\r\n    const [line2, setLine2] = useState('');\r\n    const [city, setCity] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [passwordConfirm, setPasswordConfirm] = useState('');\r\n    \r\n    const submitHandler = (e) => {\r\n      e.preventDefault();\r\n      let user= {\r\n        name: {\r\n            firstName: firstName,\r\n            lastName: lastName\r\n          },\r\n          email: email,\r\n          birthday: birthday,\r\n          contactNo: parseInt(contact),\r\n          address:{\r\n              line1: line1,\r\n              line2: line2,\r\n              city: city\r\n          },\r\n          password: password,\r\n          passwordConfirm: passwordConfirm,\r\n          role: 'hospitalAdmin',\r\n          hospital: window.location.pathname.split('/')[3],\r\n      }\r\n\r\n        if (!validateFirstName(firstName)) {\r\n        alert(\"First Name should not include digits\");\r\n        }\r\n        else if (!validateLastName(lastName)) {\r\n            alert(\"Last Name should not include digits\");\r\n        }\r\n        else if (!validateEmail(email)) {\r\n            alert(\"Enter valid email address\");\r\n        }\r\n        else if (!validateContact(contact)) {\r\n            alert(\"Enter valid telephone number\");\r\n        }\r\n        else if (!validateCity(city)) {\r\n            alert(\"City should not include digits\");\r\n        }\r\n        else if (!validatePassword(password)) {\r\n            alert(\"Enter valid password\");\r\n        }\r\n        else if (password != passwordConfirm) {\r\n            alert(\"Your passwords don't match\");\r\n        }\r\n        else{\r\n            dispatch(addUser(user));\r\n            setUserState(true);\r\n    };\r\n    }\r\n    useEffect(() => {\r\n        if(userAddedStatus.userAdded && userState){\r\n            setUserState(false)\r\n            dispatch(toastAction({ message: \"Hospital Admin Added Successfully\", type: 'info' }))\r\n            window.location.href = \"/healthMinistry/hospital\";\r\n        }// else{\r\n        //     dispatch(toastAction({ message: \"Hospital Admin Adding Failed\", type: 'error' }))\r\n        // }\r\n    },[userAddedStatus])\r\n\r\n    return (\r\n        //<div className=\"container-fluid\">    \r\n        <Container fluid > \r\n        <Box sx={{ bgcolor: '#cfe8fc', height: '1200px' }}>\r\n        <div className=\"col-10 mx-auto banner text-center\">\r\n            <h3 className=\"text-capitalize\">\r\n                    <strong className=\"banner-title\">Want to ADD HOSPITAL ADMIN?</strong></h3></div>\r\n                <Form className=\"form\" onSubmit={submitHandler}>\r\n    \r\n                    <Form.Group as={Col}  controlId='firstName'>\r\n                    <Form.Label className = 'form-label' ><strong>FIRST NAME:</strong></Form.Label>\r\n                    <Col sm={12}>\r\n                    <Form.Control \r\n                        type='text'\r\n                        id='firstName' \r\n                        placeholder='Enter your First Name'\r\n                        required\r\n                        size='sm'\r\n                        onChange={(e) => setFirstName(e.target.value)}\r\n                    /></Col>\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group as={Col} controlId='lastName'>\r\n                    <Form.Label className = 'form-label'><strong>LAST NAME:</strong></Form.Label>\r\n                    <Col sm={12}>\r\n                    <Form.Control \r\n                        type='text'\r\n                        id='lastName' \r\n                        placeholder='Enter your Last Name'\r\n                        required\r\n                        size='sm'\r\n                        onChange={(e) => setLastName(e.target.value)}\r\n                    /></Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId='email'>\r\n                    <Form.Label class=\"float-left\" className = 'form-label'><strong>EMAIL ADDRESS:</strong></Form.Label>\r\n                    <Col sm={12}>\r\n                    <Form.Control \r\n                        type='email'\r\n                        id='email' \r\n                        placeholder='example@gmail.com'\r\n                        required\r\n                        size='sm'\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    /></Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId='birthday'>\r\n                    <Form.Label class=\"float-left\" className = 'form-label'><strong>DATE OF BIRTH:</strong></Form.Label>\r\n                    <Col sm={12}>\r\n                    <Form.Control \r\n                        type='date'\r\n                        id='birthday' \r\n                        placeholder='Enter Date of Birth'\r\n                        required\r\n                        size='sm'\r\n                        max={current}\r\n                        onChange={(e) => setBirthday(e.target.value)}\r\n                    /></Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId='contact'>\r\n                    <Form.Label class=\"float-left\" className = 'form-label' ><strong>CONTACT NUMBER:</strong></Form.Label>\r\n                    <Col sm={12}>\r\n                    <Form.Control \r\n                        type='number'\r\n                        id='contact'\r\n                        placeholder=\"0XXXXXXXXX\"  \r\n                        //pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{3}\" \r\n                        required\r\n                        size='sm'\r\n                        onChange={(e) => setContact(e.target.value)} \r\n                    />\r\n                    <small>Should start with 0 | Should consist of 10 digits</small></Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"line1\">\r\n                                <Form.Label class=\"float-left\" className = 'form-label'><strong>ADDRESS:</strong></Form.Label>\r\n                                <Col sm={12}>\r\n                                    <Form.Control\r\n                                    type=\"text\"\r\n                                    id=\"line1\"\r\n                                    required \r\n                                    placeholder='Enter Line 1'\r\n                                    size='sm'\r\n                                    onChange={(e) => setLine1(e.target.value)}/>\r\n                                </Col><br/>\r\n                                <Col sm={12}>\r\n                                    <Form.Control\r\n                                    type=\"text\"\r\n                                    id=\"line2\"\r\n                                    size='sm'\r\n                                    placeholder='Enter Line 2'\r\n                                    onChange={(e) => setLine2(e.target.value)}/>\r\n                                </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"formCity\">\r\n                                <Form.Label class=\"float-left\" className = 'form-label'><strong>CITY:</strong></Form.Label>\r\n                                <Col sm={12}>\r\n                                <Form.Control\r\n                                type=\"text\"\r\n                                id=\"city\"\r\n                                required \r\n                                size='sm'\r\n                                placeholder='Enter City'\r\n                                onChange={(e) => setCity(e.target.value)}/></Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"password\">\r\n                                <Form.Label class=\"float-left\" className = 'form-label'><strong>PASSWORD:</strong></Form.Label>\r\n                                <Col sm={12}>\r\n                                <Form.Control\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                required \r\n                                size='sm'\r\n                                placeholder='Enter Password'\r\n                                onChange={(e) => setPassword(e.target.value)}/>\r\n                    <small>*Password should atleast be of 6 characters <br/>\r\n                           *Should include atleast one simple letter, capital letter, special character and number </small> \r\n                           </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"passwordConfirm\">\r\n                                <Form.Label class=\"float-left\" className = 'form-label'><strong>RE-ENTER PASSWORD:</strong></Form.Label>\r\n                                <Col sm={12}>\r\n                                <Form.Control\r\n                                type=\"password\"\r\n                                id=\"passwordConfirm\"\r\n                                required \r\n                                size='sm'\r\n                                placeholder='Re enter Password'\r\n                                onChange={(e) => setPasswordConfirm(e.target.value)}/></Col>\r\n                    </Form.Group>\r\n\r\n                        <div>\r\n                        <Button variant=\"primary\" type=\"submit\">ADD HOSPITAL ADMIN</Button>\r\n                        </div>\r\n                \r\n                </Form>\r\n                </Box>\r\n            </Container>\r\n            \r\n        );\r\n    }\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport {Form, Button, Container, Col, Row} from 'react-bootstrap';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addUser, getUserAddedStatus} from '../../store/entities/users';\r\nimport { toastAction } from '../../store/toastActions';\r\nimport Box from '@mui/material/Box';\r\n\r\n\r\nexport default function AddPatient(props) {\r\n    const current = new Date().toISOString().split(\"T\")[0]\r\n    console.log(current)\r\n    const validateFirstName = (firstName) =>{\r\n        const reg = /^[A-Za-z\\b]+$/;\r\n        return reg.test(firstName)\r\n    }\r\n\r\n    const validateLastName = (lastName) =>{\r\n        const reg = /^[A-Za-z\\b]+$/;\r\n        return reg.test(lastName)\r\n    }\r\n\r\n    const validateEmail = (email) => {\r\n        const regexp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return regexp.test(email);\r\n    }\r\n\r\n    const validatePassword = (password) => {\r\n        const regpw = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{6,}$/;\r\n        return regpw.test(password);\r\n    }\r\n    const validateContact = (contact) => {\r\n        const reg = /^(0)([0-9]{9})$/;\r\n        return reg.test(contact);\r\n    }\r\n\r\n    const validateCity = (city) =>{\r\n        const reg = /^[A-Za-z\\b]+$/;\r\n        return reg.test(city)\r\n    }\r\n\r\n    function validateNIC(nicno) {\r\n        const regex = /^([0-9]{9})(V|v)$/;\r\n        const regex2 = /^([0-9]{12})$/;\r\n    \r\n        if (regex.test(nicno)) {\r\n            return regex.test(nicno);\r\n        }\r\n    \r\n        else if (regex2.test(nicno)) {\r\n            return regex2.test(nicno);\r\n        }\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n    const userAddedStatus = useSelector(getUserAddedStatus);\r\n    const [userState, setUserState] = useState(false)\r\n\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [birthday, setBirthday] = useState('');\r\n    const [contact, setContact] = useState('');\r\n    const [line1, setLine1] = useState('');\r\n    const [line2, setLine2] = useState('');\r\n    const [city, setCity] = useState('');\r\n    const [province, setProvince] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [passwordConfirm, setPasswordConfirm] = useState('');\r\n    const [nicno, setNicno] = useState('');\r\n    const [person, setPerson] = useState('');\r\n    \r\n    const submitHandler = (e) => {\r\n      e.preventDefault();\r\n      let user= {\r\n        name: {\r\n            firstName: firstName,\r\n            lastName: lastName\r\n        },\r\n        email: email,\r\n        birthday: birthday,\r\n        contact: contact,\r\n        address:{\r\n            line1: line1,\r\n            line2: line2,\r\n            city: city,\r\n            province: province\r\n        },\r\n        password: password,\r\n        passwordConfirm: passwordConfirm,\r\n        role: 'patient',\r\n        nic:{\r\n          nicno: nicno,\r\n          person: birthday.split('-')[0]\r\n        },\r\n        //hospital_id: window.location.pathname.split('/')[3],\r\n      }\r\n\r\n        if (!validateFirstName(firstName)) {\r\n        alert(\"First Name should not include digits\");\r\n        }\r\n        else if (!validateLastName(lastName)) {\r\n            alert(\"Last Name should not include digits\");\r\n        }\r\n        else if (!validateEmail(email)) {\r\n            alert(\"Enter valid email address\");\r\n        }\r\n        else if (!validateContact(contact)) {\r\n            alert(\"Enter valid telephone number\");\r\n        }\r\n        else if (!validateNIC(nicno)) {\r\n            alert(\"Enter valid NIC number\");\r\n        }\r\n        else if (!validateCity(city)) {\r\n            alert(\"City should not include digits\");\r\n        }\r\n        else if (!validatePassword(password)) {\r\n            alert(\"Enter valid password\");\r\n        }\r\n        else if (password != passwordConfirm) {\r\n            alert(\"Your passwords don't match\");\r\n        }\r\n        else{\r\n            dispatch(addUser(user));\r\n            setUserState(true);\r\n            console.log(user);\r\n            //window.location.href = \"/healthMinistry/hospital\";\r\n    };\r\n    }\r\n    useEffect(() => {\r\n        if(userAddedStatus.userAdded && userState){\r\n            setUserState(false)\r\n            dispatch(toastAction({ message: \"Patient Added Successfully\", type: 'info' }))\r\n            window.location.href = \"/\";\r\n        }\r\n        // else{\r\n        //     dispatch(toastAction({ message: \"Pattient Adding Failed\", type: 'error' }))\r\n        // }\r\n    },[userAddedStatus])\r\n\r\n    return (\r\n        <Container fluid > \r\n                <Box sx={{ bgcolor: '#cfe8fc', height: '1390px' }}>\r\n                <div className=\"col-10 mx-auto banner text-center\"><br/>\r\n                    <h3 className=\"text-capitalize\">\r\n                            <strong className=\"banner-title\">Want to Add NEW PATIENT?</strong></h3></div>\r\n                <Form className=\"form\" onSubmit={submitHandler}>\r\n    \r\n                    <Form.Group as={Col}  controlId='firstName'>\r\n                    <Form.Label className = 'form-label' ><strong>FIRST NAME:</strong> </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control \r\n                        type='text'\r\n                        id='firstName' \r\n                        placeholder='Enter your First Name'\r\n                        required\r\n                        size='sm'\r\n                        onChange={(e) => setFirstName(e.target.value)}\r\n                    /></Col>\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group as={Col} controlId='lastName'>\r\n                    <Form.Label className = 'form-label'> <strong>LAST NAME:</strong></Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control \r\n                        type='text'\r\n                        id='lastName' \r\n                        placeholder='Enter your Last Name'\r\n                        required\r\n                        size='sm'\r\n                        onChange={(e) => setLastName(e.target.value)}\r\n                    /></Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId='email'>\r\n                    <Form.Label class=\"float-left\" className = 'form-label'><strong>EMAIL ADDRESS:</strong></Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control \r\n                        type='email'\r\n                        id='email' \r\n                        placeholder='example@gmail.com'\r\n                        required\r\n                        size='sm'\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    /></Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId='birthday'>\r\n                    <Form.Label class=\"float-left\" className = 'form-label'><strong>DATE OF BIRTH:</strong></Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control \r\n                        type='date'\r\n                        id='birthday' \r\n                        placeholder='Enter Date of Birth'\r\n                        required\r\n                        size='sm'\r\n                        max={current}\r\n                        onChange={(e) => setBirthday(e.target.value)}\r\n                    /></Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId='contact'>\r\n                    <Form.Label class=\"float-left\" className = 'form-label' ><strong>CONTACT NUMBER:</strong></Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control \r\n                        type='number'\r\n                        id='contact'\r\n                        placeholder=\"0XXXXXXXXX\"  \r\n                        //pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{3}\" \r\n                        required\r\n                        size='sm'\r\n                        onChange={(e) => setContact(e.target.value)} \r\n                    />\r\n                    <small>*Should start with 0 <br/>*Should consist of 10 digits</small></Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId='nicno'>\r\n                            <Form.Label class=\"float-left\" className = 'form-label' ><strong>NIC NUMBER:</strong></Form.Label>\r\n                            <Col sm={10}>\r\n                            <Form.Control \r\n                                type='text'\r\n                                id='nicno'\r\n                                placeholder=\"Enter NIC Number\"  \r\n                                required\r\n                                size='sm'\r\n                                onChange={(e) => setNicno(e.target.value)} \r\n                            />\r\n                            </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"line1\">\r\n                                <Form.Label class=\"float-left\" className = 'form-label'><strong>ADDRESS:</strong></Form.Label>\r\n                                <Col sm={10}>\r\n                                    <Form.Control\r\n                                    type=\"text\"\r\n                                    id=\"line1\"\r\n                                    required \r\n                                    placeholder='Enter Line 1'\r\n                                    size='sm'\r\n                                    onChange={(e) => setLine1(e.target.value)}/>\r\n                                </Col><br/>\r\n                                <Col sm={10}>\r\n                                    <Form.Control\r\n                                    type=\"text\"\r\n                                    id=\"line2\"\r\n                                    size='sm'\r\n                                    placeholder='Enter Line 2'\r\n                                    onChange={(e) => setLine2(e.target.value)}/></Col>\r\n                    </Form.Group>\r\n\r\n                    {/* <Form.Group as={Col} controlId=\"line2\">\r\n                                <Form.Label class=\"float-left\" className = 'form-label'>ADDRESS LINE 2:</Form.Label>\r\n                                <Col sm={10}>\r\n                                <Form.Control\r\n                                type=\"text\"\r\n                                id=\"line2\"\r\n                                size='sm'\r\n                                placeholder='Enter Line 2'\r\n                                onChange={(e) => setLine2(e.target.value)}/></Col>\r\n                    </Form.Group> */}\r\n\r\n                    <Form.Group as={Col} controlId=\"formCity\">\r\n                                <Form.Label class=\"float-left\" className = 'form-label'><strong>CITY:</strong></Form.Label>\r\n                                <Col sm={10}>\r\n                                    <Form.Control\r\n                                    type=\"text\"\r\n                                    id=\"city\"\r\n                                    required \r\n                                    size='sm'\r\n                                    placeholder='Enter City'\r\n                                    onChange={(e) => setCity(e.target.value)}/>\r\n                                </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col}  controlId=\"formProvince\">\r\n                                <Form.Label class=\"float-left\" className = 'form-label' ><strong>PROVINCE:</strong></Form.Label>\r\n                                <Col sm={10}>\r\n                                <Form.Control \r\n                                as=\"select\" \r\n                                id=\"province\" \r\n                                onChange={(e) => setProvince(e.target.value)}\r\n                                required>\r\n                                    <option value=\"\" disabled selected>Choose </option>\r\n                                    <option value=\"Central\">Central Province</option>\r\n                                    <option value=\"Eastern\">Eastern Province</option>\r\n                                    <option value=\"Northern\">Northern Province</option>\r\n                                    <option value=\"Southern\">Southern Province </option>\r\n                                    <option value=\"Western\">Western Province </option>\r\n                                    <option value=\"North Western\">North Western Province </option>\r\n                                    <option value=\"North Central\">North Central Province </option>\r\n                                    <option value=\"Uva\">Uva Province </option>\r\n                                    <option value=\"Sabaragamuwa\">Sabaragamuwa Province </option>\r\n                                    \r\n                                    </Form.Control></Col>\r\n                                </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"password\">\r\n                            <Form.Label class=\"float-left\" className = 'form-label'><strong>PASSWORD:</strong></Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                required \r\n                                size='sm'\r\n                                placeholder='Enter Password'\r\n                                onChange={(e) => setPassword(e.target.value)}/>\r\n                            </Col><br/>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                type=\"password\"\r\n                                id=\"passwordConfirm\"\r\n                                required \r\n                                size='sm'\r\n                                placeholder='Re enter Password'\r\n                                onChange={(e) => setPasswordConfirm(e.target.value)}/>\r\n                                <small>*Password should atleast be of 6 characters <br/>\r\n                           *Should include atleast one simple letter, capital letter, special character and number </small> \r\n                            </Col>\r\n                    </Form.Group>\r\n\r\n                    {/* <Form.Group as={Col} controlId=\"passwordConfirm\">\r\n                                <Form.Label class=\"float-left\" className = 'form-label'>RE-ENTER PASSWORD:</Form.Label>\r\n                                <Col sm={10}>\r\n                                <Form.Control\r\n                                type=\"password\"\r\n                                id=\"passwordConfirm\"\r\n                                required \r\n                                size='sm'\r\n                                placeholder='Re enter Password'\r\n                                onChange={(e) => setPasswordConfirm(e.target.value)}/></Col>\r\n                    </Form.Group> */}\r\n                        <div>\r\n                        <Button variant=\"primary\" type=\"submit\">ADD PATIENT</Button>\r\n                        </div>\r\n                \r\n                </Form>\r\n                </Box> \r\n            </Container>\r\n            // </div>\r\n            \r\n        );\r\n    }\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport {Container, Form, Button, Col} from 'react-bootstrap';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addUser, getUserAddedStatus } from '../../../store/entities/users';\r\nimport { toastAction } from '../../../store/toastActions';\r\n\r\nexport default function AddHospitalStaff(props){\r\n    const current = new Date().toISOString().split(\"T\")[0];\r\n\r\n    const validateFirstName = (firstName) =>{\r\n        const reg = /^[A-Za-z\\b]+$/;\r\n        return reg.test(firstName)\r\n    }\r\n\r\n    const validateLastName = (lastName) =>{\r\n        const reg = /^[A-Za-z\\b]+$/;\r\n        return reg.test(lastName)\r\n    }\r\n\r\n    const validateEmail = (email) => {\r\n        const regexp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return regexp.test(email);\r\n    }\r\n\r\n    const validatePassword = (password) => {\r\n        const regpw = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{6,}$/;\r\n        return regpw.test(password);\r\n    }\r\n    const validateContact = (contact) => {\r\n        const reg = /^(0)([0-9]{9})$/;\r\n        return reg.test(contact);\r\n    }\r\n\r\n    const validateCity = (city) =>{\r\n        const reg = /^[A-Za-z\\b]+$/;\r\n        return reg.test(city)\r\n    }\r\n    const dispatch = useDispatch();\r\n    const userAddedStatus = useSelector(getUserAddedStatus);\r\n    const [userState, setUserState] = useState(false)\r\n\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [birthday, setBirthday] = useState('');\r\n    const [contact, setContact] = useState('');\r\n    const [line1, setLine1] = useState('');\r\n    const [line2, setLine2] = useState('');\r\n    const [city, setCity] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [passwordConfirm, setPasswordConfirm] = useState('');\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        let user= {\r\n            name: {\r\n                firstName: firstName,\r\n                lastName: lastName\r\n              },\r\n              email: email,\r\n              birthday: birthday,\r\n              contactNo: contact,\r\n              address:{\r\n                  line1: line1,\r\n                  line2: line2,\r\n                  city: city\r\n              },\r\n              password: password,\r\n              passwordConfirm: passwordConfirm,\r\n              role: 'hospital user',\r\n                        \r\n              //hospital_id: window.location.pathname.split('/')[3],\r\n          }\r\n\r\n          if (!validateFirstName(firstName)) {\r\n            alert(\"First Name should not include digits\");\r\n            }\r\n            else if (!validateLastName(lastName)) {\r\n                alert(\"Last Name should not include digits\");\r\n            }\r\n            else if (!validateEmail(email)) {\r\n                alert(\"Enter valid email address\");\r\n            }\r\n            else if (!validateContact(contact)) {\r\n                alert(\"Enter valid telephone number\");\r\n            }\r\n            else if (!validateCity(city)) {\r\n                alert(\"City should not include digits\");\r\n            }\r\n            else if (!validatePassword(password)) {\r\n                alert(\"Enter valid password\");\r\n            }\r\n            else if (password != passwordConfirm) {\r\n                alert(\"Your passwords don't match\");\r\n            }\r\n            else{\r\n                dispatch(addUser(user));\r\n                setUserState(true);\r\n                //window.location.href = \"/healthMinistry/hospital\";\r\n        };\r\n        }\r\n\r\n        useEffect(() => {\r\n            if(userAddedStatus.userAdded && userState){\r\n                setUserState(false)\r\n                dispatch(toastAction({ message: \"Hospital Staff Added Successfully\", type: 'info' }))\r\n                window.location.href = \"/\";\r\n            }//else{\r\n            //     dispatch(toastAction({ message: \"Hospital Admin Adding Failed\", type: 'error' }))\r\n            // }\r\n        },[userAddedStatus])\r\n\r\n        return (\r\n            //<div className=\"container-fluid\">    \r\n            <Container fluid > \r\n                <Box sx={{ bgcolor: '#cfe8fc', height: '1370px' }}>\r\n                <div className=\"col-10 mx-auto banner text-center\">\r\n                    <h3 className=\"text-capitalize\">\r\n                            <strong className=\"banner-title\">Want to ADD HOSPITAL STAFF?</strong></h3></div>\r\n                <Form className=\"form\" onSubmit={submitHandler} >\r\n\r\n                <Form.Group as={Col}  controlId='firstName'>\r\n                    <Form.Label className = 'form-label' ><strong>FIRST NAME:</strong></Form.Label>\r\n                    <Col sm={12}>\r\n                    <Form.Control \r\n                        type='text'\r\n                        id='firstName' \r\n                        placeholder='Enter your First Name'\r\n                        required\r\n                        // size='sm'\r\n                        onChange={(e) => setFirstName(e.target.value)}\r\n                    /></Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col}  controlId='firstName'>\r\n                    <Form.Label className = 'form-label' ><strong>LAST NAME:</strong></Form.Label>\r\n                    <Col sm={12}>\r\n                    <Form.Control \r\n                        type='text'\r\n                        id='lastName' \r\n                        placeholder='Enter your Last Name'\r\n                        required\r\n                        // size='sm'\r\n                        onChange={(e) => setLastName(e.target.value)}\r\n                    /></Col>\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group as={Col} controlId='email'>\r\n                    <Form.Label class=\"float-left\" className = 'form-label'><strong>EMAIL ADDRESS:</strong> </Form.Label>\r\n                    <Col sm={12}>\r\n                    <Form.Control \r\n                        type='email'\r\n                        id='email' \r\n                        placeholder='example@gmail.com'\r\n                        required\r\n                        // size='sm'\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    /></Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId='birthday'>\r\n                    <Form.Label class=\"float-left\" className = 'form-label'><strong>DATE OF BIRTH:</strong> </Form.Label>\r\n                    <Col sm={12}>\r\n                    <Form.Control \r\n                        type='date'\r\n                        id='birthday' \r\n                        placeholder='Enter Date of Birth'\r\n                        required\r\n                        // size='sm'\r\n                        max={current}\r\n                        onChange={(e) => setBirthday(e.target.value)}\r\n                    /></Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId='contact'>\r\n                    <Form.Label class=\"float-left\" className = 'form-label' ><strong>CONTACT NUMBER:</strong> </Form.Label>\r\n                    <Col sm={12}>\r\n                    <Form.Control \r\n                        type='number'\r\n                        id='contact'\r\n                        placeholder=\"0XXXXXXXXX\"  \r\n                        //pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{3}\" \r\n                        required\r\n                        // size='sm'\r\n                        onChange={(e) => setContact(e.target.value)} \r\n                    />\r\n                    <small>Should start with 0 | Should consist of 10 digits</small></Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"line1\">\r\n                                <Form.Label class=\"float-left\" className = 'form-label'><strong>ADDRESS:</strong> </Form.Label>\r\n                                <Col sm={12}>\r\n                                    <Form.Control\r\n                                    type=\"text\"\r\n                                    id=\"line1\"\r\n                                    required \r\n                                    placeholder='Enter Address Line 1'\r\n                                    // size='sm'\r\n                                    onChange={(e) => setLine1(e.target.value)}/>\r\n                                </Col><br/>\r\n                                <Col sm={12}>\r\n                                    <Form.Control\r\n                                    type=\"text\"\r\n                                    id=\"line2\" \r\n                                    // size='sm'\r\n                                    placeholder='Enter Address Line 2'\r\n                                    onChange={(e) => setLine2(e.target.value)}/>\r\n                                </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"formCity\">\r\n                                <Form.Label class=\"float-left\" className = 'form-label'><strong>CITY:</strong></Form.Label>\r\n                                <Col sm={12}>\r\n                                    <Form.Control\r\n                                    type=\"text\"\r\n                                    id=\"city\"\r\n                                    required \r\n                                    // size='sm'\r\n                                    placeholder='Enter City'\r\n                                    onChange={(e) => setCity(e.target.value)}/>\r\n                                </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"password\">\r\n                                <Form.Label class=\"float-left\" className = 'form-label'><strong>PASSWORD:</strong> </Form.Label>\r\n                                <Col sm={12}>\r\n                                <Form.Control\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                requiredg\r\n                                // // size='sm'\r\n                                placeholder='Enter Password'\r\n                                onChange={(e) => setPassword(e.target.value)}/>\r\n                    \r\n                           </Col><br/>\r\n                           <Col sm={12}>\r\n                                <Form.Control\r\n                                type=\"password\"\r\n                                id=\"passwordConfirm\"\r\n                                required \r\n                                // // size='sm'\r\n                                placeholder='Re enter Password'\r\n                                onChange={(e) => setPasswordConfirm(e.target.value)}/>\r\n                                <small>*Password should atleast be of 6 characters <br/>\r\n                           *Should include atleast one simple letter, capital letter, special character and number </small> </Col>\r\n                    </Form.Group>\r\n                        <div>\r\n                        <Button variant=\"primary\" type=\"submit\">ADD HOSPITAL STAFF</Button>\r\n                        </div>\r\n                \r\n                </Form>  \r\n                </Box>\r\n            </Container>\r\n                   ///</div>   \r\n        );\r\n    }\r\n","import React, {useEffect, useState} from 'react'\r\nimport {Container, Button, Card, Row, Col, Nav, Form, FormControl} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {  Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {updateDrugsInDB, updateSymptomsInDB} from '../../store/entities/patients';\r\n\r\nconst EditCurrentDetails = ({match,history}) => {\r\n    const dispatch = useDispatch()\r\n   // const patientId = (window.location.href.split('/')).pop()\r\n   const medicalHistoryId = match.params.id\r\n\r\n    const auth = useSelector(state => state.auth);\r\n\r\n    const [ schema, setSchema ] = useState({ \r\n        symptom0: Yup.string().required(\"Symptom is required...\"),\r\n        drug0: Yup.string().required(\"Drug Details is required...\")\r\n    });\r\n\r\n    const [initialValues, setInitialValues ] = useState({\r\n        symptom0: '',\r\n        drug0: ''\r\n    });\r\n\r\n    const [ symptoms, setSymptoms ] = useState([{}]);\r\n  //  console.log(symptoms)\r\n    const [ drugs, setDrugs ] = useState([{}]);\r\n    const formElements = useState(4);  \r\n\r\n    const [updateSymptoms, setUpdateSymptoms] = useState(true);\r\n\r\n    const UpdateSymptoms =(value, sym)=>{\r\n        for (var i =0; i< sym.length ; i++){\r\n            var v = sym[i]\r\n            if (!v.description){\r\n                setUpdateSymptoms(true);\r\n                return\r\n            }else if (v.description == \"\"){\r\n                setUpdateSymptoms(true);\r\n                return\r\n            } \r\n            setUpdateSymptoms(false);\r\n        }\r\n\r\n    }\r\n\r\n    const handleSymptomsAdded = () => {\r\n        const newSymptom = [...symptoms, {}];\r\n        const newSchema = {...schema, \r\n                            [`symptom${symptoms.length}`]: Yup.string().required(\"Symptom is required...\"),\r\n        };\r\n\r\n        const newInitialValues = {...initialValues,\r\n                             [`symptom${symptoms.length}`]: ''\r\n        };\r\n        setSymptoms(newSymptom);\r\n        setSchema(newSchema);\r\n        setInitialValues(newInitialValues);\r\n\r\n        for (var i =0; i< newSymptom.length ; i++){\r\n            var v = newSymptom[i]\r\n            if (!v.description){\r\n                setUpdateSymptoms(true);\r\n                return\r\n            }else if (v.description == \"\"){\r\n                setUpdateSymptoms(true);\r\n                return\r\n            } \r\n            setUpdateSymptoms(false);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const handleSymptomsDeleted = (values) => {\r\n        let newSymptoms = [...symptoms];\r\n        newSymptoms = newSymptoms.splice(0,symptoms.length-1);\r\n        const newSchema = {...schema};\r\n        //Deleting from schema\r\n        delete newSchema[`symptom${symptoms.length-1}`];\r\n\r\n        const newInitialValues = {...initialValues};\r\n        //Deleting from initial values\r\n        delete newInitialValues[`symptom${symptoms.length-1}`];\r\n\r\n        //Deleting from values of Formik\r\n        delete values[`symptom${symptoms.length - 1}`];\r\n\r\n        setInitialValues(newInitialValues);\r\n        setSymptoms (newSymptoms);\r\n        setSchema(newSchema);  \r\n\r\n        for (var i =0; i< newSymptoms.length ; i++){\r\n            var v = newSymptoms[i]\r\n            if (!v.description){\r\n                setUpdateSymptoms(true);\r\n                return\r\n            }else if (v.description == \"\"){\r\n                setUpdateSymptoms(true);\r\n                return\r\n            } \r\n            setUpdateSymptoms(false);\r\n        }\r\n    }\r\n\r\n    const [updateDrugs, setUpdateDrugs] = useState(true);\r\n\r\n\r\n    const UpdateDrugs =(value, sym)=>{\r\n        for (var i =0; i< sym.length ; i++){\r\n            var v = sym[i]\r\n            if (!v.description){\r\n                setUpdateDrugs(true);\r\n                return\r\n            }else if (v.description == \"\"){\r\n                setUpdateDrugs(true);\r\n                return\r\n            } \r\n            setUpdateDrugs(false);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const handleDrugsAdded = () => {\r\n        const newDrug = [...drugs, {}];\r\n        const newSchema = {...schema, \r\n                            [`drug${drugs.length}`]: Yup.string().required(\"Drug is required...\"),\r\n        };\r\n\r\n        const newInitialValues = {...initialValues,\r\n                             [`drug${drugs.length}`]: ''\r\n        };\r\n        setDrugs(newDrug);\r\n        setSchema(newSchema);\r\n        setInitialValues(newInitialValues);\r\n\r\n        for (var i =0; i< newDrug.length ; i++){\r\n            var v = newDrug[i]\r\n            if (!v.description){\r\n                setUpdateDrugs(true);\r\n                return\r\n            }else if (v.description == \"\"){\r\n                setUpdateDrugs(true);\r\n                return\r\n            } \r\n            setUpdateDrugs(false);\r\n        }\r\n    }\r\n\r\n\r\n    const handleDrugsDeleted = (values) => {\r\n        let newDrugs = [...drugs];\r\n        newDrugs = newDrugs.splice(0,drugs.length-1);\r\n        const newSchema = {...schema};\r\n        //Deleting from schema\r\n        delete newSchema[`drug${drugs.length-1}`];\r\n\r\n        const newInitialValues = {...initialValues};\r\n        //Deleting from initial values\r\n        delete newInitialValues[`drug${drugs.length-1}`];\r\n\r\n        //Deleting from values of Formik\r\n        delete values[`drug${drugs.length - 1}`];\r\n\r\n        setInitialValues(newInitialValues);\r\n        setDrugs (newDrugs);\r\n        setSchema(newSchema);\r\n        \r\n        for (var i =0; i< newDrugs.length ; i++){\r\n            var v = newDrugs[i]\r\n            if (!v.description){\r\n                setUpdateDrugs(true);\r\n                return\r\n            }else if (v.description == \"\"){\r\n                setUpdateDrugs(true);\r\n                return\r\n            } \r\n            setUpdateDrugs(false);\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    const updateSymptom = () =>{\r\n        let symList = [symptoms.length];\r\n        for ( var i = 0; i< symptoms.length; i++){\r\n            symList[i] = symptoms[i].description;\r\n        }\r\n        const data = { description: symList}\r\n        dispatch(updateSymptomsInDB(data, medicalHistoryId))\r\n    } \r\n\r\n    const updateDrug = () =>{\r\n        let drugList = [drugs.length];\r\n        for ( var i = 0; i< drugs.length; i++){\r\n            drugList[i] = drugs[i].description;\r\n        }\r\n        const data = { description: drugList}\r\n        dispatch(updateDrugsInDB(data, medicalHistoryId))\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        ////////////\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n        {auth.loggedIn ? \r\n        <Container className=' formContainer mt-3'>\r\n        <Formik\r\n            validationSchema = {Yup.object().shape(schema)}\r\n           // onSubmit = {submitForm}\r\n            initialValues = {initialValues}\r\n        >\r\n            {({\r\n                handleSubmit,\r\n                handleChange,\r\n                handleBlur,\r\n                values,\r\n                touched,\r\n                isValid,\r\n                dirty,\r\n                errors\r\n            }) => (\r\n            <Form className='mt-2' noValidate onSubmit={handleSubmit}>\r\n            <h2 className = 'heading text-center font-weight-bold mt-4'>UPDATE PATIENT MEDICAL DATA</h2>\r\n\r\n            <Row className='m-5'>\r\n                <Col>\r\n                {symptoms.map( v =>{\r\n                    const index = symptoms.findIndex(va => va === v );\r\n                    return (\r\n                    <>\r\n                        <Row className=''>\r\n                            <Col>\r\n                                <Form.Group controlId= {`validationFormik${formElements + index + 1 >= 10 ? `${formElements + index + 1}`: `0${formElements + index + 1}` }`}>\r\n                                    <Form.Label >Symptoms</Form.Label>\r\n                                    <Form.Control \r\n                                        className = 'textBox'\r\n                                        type='text'\r\n                                        name={`symptom${index}`}\r\n                                        value={values[`symptom${index}`]}\r\n                                        onChange={(e) => {\r\n                                            handleChange(e);\r\n                                            const updated = {...symptoms[index]};\r\n                                            updated.description= e.target.value;\r\n                                            const newSymptoms = [...symptoms];\r\n                                            newSymptoms[index] = updated;\r\n                                            setSymptoms(newSymptoms);\r\n                                            if ( e.target.value != \"\"){\r\n                                                UpdateSymptoms(false,newSymptoms);\r\n                                            }else{\r\n                                                UpdateSymptoms(true, newSymptoms);\r\n                                            }\r\n                                            \r\n                                        }}\r\n                                        placeholder='Symptom'\r\n                                        isValid={touched[`symptom${index}`] && !errors[`symptom${index}`]}\r\n                                        isInvalid={!!errors[`symptom${index}`]}\r\n                                        size = {'lg'} \r\n                                    />\r\n                                    <FormControl.Feedback type='invalid'>{errors[`symptom${index}`]}</FormControl.Feedback>\r\n                                </Form.Group>\r\n                            </Col>\r\n\r\n                        <Col className='mt-2'>\r\n                            { index === 0 && <div>\r\n                            <Button onClick= {() => handleSymptomsAdded()} className='mx-2 my-4' variant='primary'>+</Button>\r\n                            { symptoms.length >1 && index ===0 && <Button onClick= {() => handleSymptomsDeleted(values)} className='mx-2 my-4' variant='danger'>-</Button>}\r\n                            </div>}\r\n                        </Col></Row></>\r\n\r\n\r\n                )})}\r\n\r\n                    <Button onClick= {() => updateSymptom()} \r\n                            className='mx-2 my-4' \r\n                            variant='primary'\r\n                            disabled={updateSymptoms}\r\n                    >Update Symptoms</Button>\r\n\r\n                </Col>\r\n\r\n                <Col>\r\n                {drugs.map( v =>{\r\n                    const index = drugs.findIndex(va => va === v );\r\n                    return (\r\n                    <>\r\n                        <Row className=''>\r\n                            <Col>\r\n                            <Form.Group controlId= {`validationFormik${formElements + index + 1 >= 10 ? `${formElements + index + 1}`: `0${formElements + index + 1}` }`}>\r\n                                <Form.Label className = 'form-label'>Drugs</Form.Label>\r\n                                <Form.Control \r\n                                    className = 'textBox'\r\n                                    type='text'\r\n                                    name={`drug${index}`}\r\n                                    value={values[`drug${index}`]}\r\n                                    onChange={(e) => {\r\n                                        handleChange(e);\r\n                                        const updated = {...drugs[index]};\r\n                                        updated.description = e.target.value;\r\n                                        const newDrugs = [...drugs];\r\n                                        newDrugs[index] = updated;\r\n                                        setDrugs(newDrugs);\r\n                                        if ( e.target.value != \"\"){\r\n                                            UpdateDrugs(false,newDrugs);\r\n                                        }else{\r\n                                            UpdateDrugs(true, newDrugs);\r\n                                        }\r\n                                    }}\r\n                                    placeholder='Drug'\r\n                                    isValid={touched[`drug${index}`] && !errors[`drug${index}`]}\r\n                                    isInvalid={!!errors[`drug${index}`]}\r\n                                    size = {'lg'} \r\n                                />\r\n                                <FormControl.Feedback type='invalid'>{errors[`drug${index}`]}</FormControl.Feedback>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                        <Col className='mt-2'>\r\n                            { index === 0 && <div>\r\n                            <Button onClick= {() => handleDrugsAdded()} className='mx-2 my-4' variant='primary'>+</Button>\r\n                            { drugs.length >1 && index ===0 && <Button onClick= {() => handleDrugsDeleted(values)} className='mx-2 my-4' variant='danger'>-</Button>}\r\n                            </div>}\r\n                        </Col></Row></>\r\n\r\n                )})}\r\n\r\n\r\n                    <Button onClick= {() => updateDrug()} \r\n                            className='mx-2 my-4' \r\n                            variant='primary'\r\n                            disabled={updateDrugs}\r\n                    >Update Drugs</Button>\r\n                </Col>\r\n\r\n                </Row>\r\n    \r\n            </Form>\r\n            )}\r\n        </Formik> \r\n        </Container>: history.push('/')}\r\n        </>\r\n    )\r\n}\r\n            \r\n\r\nexport default EditCurrentDetails\r\n","import React, {useEffect, useState} from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Table, Container, Button, Row, Card} from 'react-bootstrap'\r\nimport {  getPatientsLoadingStatus, updateTransferPatient,\r\n    updateSelectedTransferPatient, getAllWaitingPatients, loadWaitingPatients} from '../../store/entities/patients';\r\nimport Loader from '../../components/Loader'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\n\r\nconst AcceptanceWaiting = ({}) => {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const auth = useSelector(state => state.auth);\r\n    const [userType, setUserType] = useState('')\r\n\r\n    const patientsDetails = useSelector(getAllWaitingPatients);\r\n    const patientsList = patientsDetails.waiting\r\n    console.log(patientsList)\r\n    const [patients, setPatients] = useState([...patientsList]);\r\n    const [patientState, setPatientState] = useState([...patientsList]);\r\n    const [selected, setSelected] = useState([]);\r\n    //console.log(selected)\r\n    //console.log(patientState)\r\n    const [allSelected, setAllSelected] = useState(false);\r\n    //console.log(allSelected)\r\n    const patientsLoading = useSelector(getPatientsLoadingStatus);\r\n\r\n    // const pageSize = 3;\r\n    // const [currentPage, setCurrentPage] = useState(1);\r\n    // let [paginated, setPaginated] = useState(patients);\r\n\r\n    useEffect(() => {\r\n        if(!auth.loggedIn){\r\n            window.location='/'\r\n        }\r\n        setUserType(auth.data.user.role)\r\n        dispatch(loadWaitingPatients())\r\n\r\n        setPatientState(\r\n            patientsList.map( p=>{\r\n                return {\r\n                     select: false,\r\n                    _id: p._id,\r\n                    name: p.name,\r\n                    age: p.age,\r\n                    'tel':p.name,\r\n                    'address':p.name\r\n                }\r\n            })\r\n        )\r\n\r\n    },[dispatch])\r\n\r\n    const Aproval = (decision, patientId)=>{\r\n        const transferUpdate = {\r\n            patientId,\r\n            transferDetails:{\r\n                transferState : decision\r\n            }\r\n        }\r\n        dispatch(updateTransferPatient(transferUpdate));\r\n        setPatientState(patientState.filter(p=>p._id !== patientId))\r\n    }\r\n\r\n    const AproveSelected =(dicision) =>{\r\n        const transferUpdate = {\r\n            dicision:dicision,\r\n            selectedPatients: selected\r\n        }\r\n        dispatch(updateSelectedTransferPatient(transferUpdate));\r\n        setPatientState(patientState.filter(p=>p.select === false))\r\n        setSelected([]);\r\n    }\r\n\r\n    const handleSelected =(value, data)=>{\r\n        if(value === false && selected.length === patientsList.length){\r\n            setAllSelected(false);\r\n        }\r\n        if(value === true && selected.length === patientsList.length-1){\r\n            setAllSelected(true);\r\n        }\r\n        if(value == true){\r\n            let selectedList = [...selected]\r\n            let patient = patientsList.filter(p => p._id === data._id );\r\n            selectedList.push(patient[0]);\r\n            setSelected(selectedList);\r\n        }else{\r\n            setSelected(selected.filter(p=>p._id !== data._id));\r\n        }\r\n    }\r\n\r\n    const handleSelectAll =(check)=>{\r\n        if(check == true){\r\n            setAllSelected(check);\r\n            setSelected(patientsList)\r\n        }else{\r\n            setAllSelected(check);\r\n            setSelected([]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {auth.loggedIn && patientsLoading && (<Loader></Loader>)}\r\n        {auth.loggedIn /*&& userType === 'hospitalAdmin' */? \r\n\r\n        <Container>\r\n           \r\n            <h4 style={{textAlign:'center', marginBottom:'40px', fontWeight:'700'}}>PATIENTS WAITING FOR APROVAL</h4>\r\n        {patientState.length === 0 ? <Card style={{backgroundColor:'#fca8a4', color:'#b73333', opacity:'0.5', padding:'10px'}}>No data</Card>:\r\n        <div>\r\n            <Row className='ml-3 mb-2'>\r\n                <Button\r\n                    value = {selected}\r\n                    disabled={selected.length === 0}\r\n                    onClick = { () => AproveSelected('accept')}\r\n                    className=\"btn btn-primary w-25 mr-2\"\r\n                >Accept Selected</Button>\r\n                <Button\r\n                    value = {selected}\r\n                    disabled={selected.length === 0}\r\n                    onClick = { () => AproveSelected('declined')}\r\n                    className=\"btn btn-danger w-25\"\r\n                    style={{opacity:'0.7'}}\r\n                >Decline Selected</Button>\r\n            </Row>\r\n\r\n            <Table striped bordered hover variant=\"light\">\r\n                <thead>\r\n                    <tr>\r\n                    <th><input \r\n                        type='checkBox'\r\n                        onChange ={(e) =>{\r\n                            let checked = e.target.checked\r\n                            setPatientState(patientState.map(p=>{\r\n                                p.select = checked;\r\n                                return p;\r\n                            }))\r\n                            handleSelectAll(checked)\r\n                        }}\r\n                        checked={allSelected}\r\n                    /></th>\r\n                    <th>Name</th>\r\n                    <th>Age</th>\r\n                    <th>Tel</th>\r\n                    <th>Address</th>\r\n                    <th>Profile</th>\r\n                    <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {patientState.map( p =>\r\n                    \r\n                        <tr>\r\n                            {/* <td>{p._id}</td> */}\r\n                            <td><input \r\n                                type='checkBox' \r\n                                onChange={(e) =>{\r\n                                    let checked = e.target.checked;\r\n                                    handleSelected(checked, p)\r\n                                    setPatientState(patientState.map( data=>{\r\n                                        if(data._id == p._id){\r\n                                            data.select = checked;\r\n                                        }\r\n                                        return data;\r\n                                    }))\r\n                                }}\r\n                                checked ={p.select}\r\n                            /></td>\r\n                            <td>{p.name}</td>\r\n                            <td>{p.age}</td>\r\n                            <td>{p.name}</td>\r\n                            <td>{p.name}</td>\r\n                            <td>\r\n                                <Button \r\n                                    value = {p._id}\r\n                                    onClick = { () => history.push(`/hospital/profile/${p._id}`)}\r\n                                    className=\"btn btn-light mr-2 ml-2\">Profile</Button>\r\n                            </td>\r\n                            <td>\r\n                                <Row>\r\n                                    <Button \r\n                                        value = {p._id}\r\n                                        onClick = { () => Aproval('accept', p._id)}\r\n                                        className=\"btn btn-primary mr-2 ml-2 text-center\"\r\n                                        style={{width:'40%'}}>Accept</Button>\r\n                                    <Button \r\n                                        value = {p._id}\r\n                                        style={{opacity:'0.8'}}\r\n                                        onClick = { () => Aproval('declined',p._id)}\r\n                                        className=\"btn btn-danger text-center\"\r\n                                        style={{width:'40%',opacity:'0.7'}}>Decline</Button>\r\n                                </Row>\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n        }\r\n      \r\n\r\n        {/* <Pagination\r\n            itemsCount = {filtered.length} \r\n            pageSize = {pageSize} \r\n            currentPage = {currentPage}\r\n            onPageChange = {(page) => {\r\n                setCurrentPage(page);\r\n                setPaginated(paginate(filtered, page, pageSize));\r\n            }}\r\n        /> */}\r\n        \r\n        </Container>\r\n        : /*history.push('/')*/history.goBack()}\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default AcceptanceWaiting\r\n","import { createSlice} from '@reduxjs/toolkit'\r\nimport { apiCallBegan } from '../apiActions';\r\nimport { createSelector } from 'reselect';\r\nimport configData from '../../config.json';\r\nimport moment from 'moment';\r\n\r\nconst slice = createSlice({\r\n    name: \"pcr\",\r\n    initialState: {\r\n        list: [],\r\n        toConfirm: [],\r\n        toConfirmLoading: false,\r\n        toConfirmLastFetch: null,\r\n        loading: false,\r\n        pcrAdded: false,\r\n        lastFetch: null\r\n    },\r\n\r\n    reducers: {\r\n        pcrCreateRequested(pcr, action) {\r\n            pcr.loading = true;\r\n            pcr.pcrAdded = false;\r\n        },\r\n\r\n        pcrCreateRequestFailed(pcr, action){\r\n            pcr.loading = false;\r\n            pcr.pcrAdded = false\r\n        },\r\n\r\n        pcrCreateRequestSucceeded(pcr, action){\r\n            pcr.loading = false;\r\n            pcr.pcrAdded = true\r\n        },\r\n\r\n        \r\n        pcrRequested(pcr, action){\r\n            pcr.loading = true;\r\n        },\r\n\r\n\r\n        pcrRequestFailed(pcr, action){\r\n            pcr.loading = false;\r\n            \r\n        },\r\n\r\n        pcrReceived(pcr, action){\r\n            pcr.list = action.payload.data.tests;\r\n            pcr.loading = false;\r\n            pcr.lastFetch = Date.now();\r\n        },\r\n\r\n        pcrStatusChange(pcr, action){\r\n            const index = pcr.list.findIndex(p => p._id === action.payload.data.test._id);\r\n           // console.log(index)\r\n            pcr.list[index].result =  action.payload.data.test.result\r\n        },\r\n\r\n        \r\n        toConfirmPcrRequested(pcr, action){\r\n            pcr.toConfirmLoading = true;\r\n        },\r\n\r\n\r\n        toConfirmPcrRequestFailed(pcr, action){\r\n            pcr.toConfirmLoading = false;\r\n            \r\n        },\r\n\r\n        toConfirmPcrReceived(pcr, action){\r\n            console.log('efgrgerger')\r\n            pcr.toConfirm = action.payload.data.tests;\r\n            pcr.toConfirmLoading = false;\r\n            pcr.toConfirmLastFetch = Date.now();\r\n        },\r\n\r\n        pcrAprovalUpdated(pcr, action){\r\n              const ids = action.payload.data.ids\r\n              const list = pcr.toConfirm.filter( p=> !p._id.includes(ids));\r\n              pcr.toConfirm = list;\r\n        }\r\n    }\r\n});\r\n\r\nexport default slice.reducer;\r\n\r\nexport const {\r\n    pcrRequested,\r\n    pcrRequestFailed,\r\n    pcrReceived,\r\n    pcrCreateRequested,\r\n    pcrCreateRequestFailed,\r\n    pcrCreateRequestSucceeded,\r\n    pcrAprovalUpdated,\r\n    pcrStatusChange,\r\n    toConfirmPcrRequested,\r\n    toConfirmPcrReceived,\r\n    toConfirmPcrRequestFailed,\r\n} =slice.actions;\r\n\r\nconst pcrURL = \"/api/v1/\";\r\nconst refreshTime = configData.REFRESH_TIME;\r\n\r\nexport const loadPcrs = () => (dispatch, getState) => {\r\n   const { lastFetch } = getState().entities.pcr;\r\n   const diffInMinutes = moment().diff(moment(lastFetch), \"minutes\");\r\n   if (diffInMinutes < refreshTime) return;\r\n     \r\n    return dispatch(\r\n        apiCallBegan({\r\n          //  url: pcrURL + 'pcr/toconfirm',\r\n            url: pcrURL + 'pcr/',\r\n            method: \"get\",\r\n            onStart: pcrRequested.type,\r\n            onSuccess: pcrReceived.type,\r\n            onError: pcrRequestFailed.type,\r\n        })\r\n    );\r\n};\r\n\r\nexport const loadToConfirmPcrs = () => (dispatch, getState) => {\r\n    const { toConfirmLastFetch } = getState().entities.pcr;\r\n    const diffInMinutes = moment().diff(moment(toConfirmLastFetch), \"minutes\");\r\n    if (diffInMinutes < refreshTime) return;\r\n      \r\n     return dispatch(\r\n         apiCallBegan({\r\n             url: pcrURL + 'pcr/toconfirm',\r\n             method: \"get\",\r\n             onStart: toConfirmPcrRequested.type,\r\n             onSuccess: toConfirmPcrReceived.type,\r\n             onError: toConfirmPcrRequestFailed.type,\r\n         })\r\n     );\r\n };\r\n\r\nexport const addPcr = (pcr) => (dispatch) => {\r\n    console.log(pcr)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: pcrURL + 'pcr',\r\n            method: \"post\",\r\n            data: pcr,\r\n            onStart: pcrCreateRequested,\r\n            onSuccess: pcrCreateRequestSucceeded.type,\r\n            onError: pcrCreateRequestFailed\r\n        })\r\n    );\r\n}\r\n\r\nexport const getPcrLoadingStatus = createSelector(\r\n    state => state.entities.pcr.loading,\r\n    loading => loading\r\n);\r\n\r\nexport const getPcrAddedStatus = createSelector(\r\n    state => state.entities.pcr,\r\n    pcr => pcr.pcrAdded\r\n)\r\n\r\nexport const getAllPcrs = createSelector(\r\n    state => state.entities.pcr,\r\n    pcr => pcr.list\r\n);\r\n\r\nexport const getToConfirmPcrLoadingStatus = createSelector(\r\n    state => state.entities.pcr.toConfirmLoading,\r\n    toConfirmLoading => toConfirmLoading\r\n);\r\n\r\n\r\nexport const getToConfirmPcrs = createSelector(\r\n    state => state.entities.pcr,\r\n    pcr => pcr.toConfirm\r\n);\r\n\r\nexport const changeStatus = (id, status) => (dispatch) =>{\r\n    console.log(id, status)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: pcrURL + `pcr/${id}/changestatus`,\r\n            method: \"patch\",\r\n            data: {status: status},\r\n            onSuccess: pcrStatusChange.type,\r\n        })\r\n    )\r\n}\r\n\r\nexport const updatePcrAproval = (ids) => (dispatch) =>{\r\n    console.log(ids)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: pcrURL + \"pcr/confirm\",\r\n            method: \"post\",\r\n            data: ids,\r\n            onSuccess: pcrAprovalUpdated.type,\r\n        })\r\n    )\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react'\r\n//import { Alert } from 'react-alert'\r\nimport {  Formik, yupToFormErrors } from 'formik';\r\nimport {Container, Button, Card, Row, Col, Nav, Form, FormControl} from 'react-bootstrap';\r\nimport * as Yup from 'yup';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toastAction } from '../../store/toastActions';\r\nimport { addPcr, getPcrAddedStatus } from '../../store/entities/pcr';\r\n\r\nconst AddPcrResults = ({history}) => {\r\n    const dispatch = useDispatch()\r\n\r\n     const pcrAdded = useSelector(getPcrAddedStatus);\r\n     const [pcrState, setPcrState] = useState(false)\r\n    const auth = useSelector(state => state.auth);\r\n\r\n    const [nic, setnic] = useState(Yup.string().max(10, \"'Invalid NIC Number. Ex:- 1234567V'\")\r\n             .matches(/[3-9]+[0-9]{8,8}(v|V|x|X)$/, 'Invalid NIC Number. Ex:- 1234567V').required('NIC number is required...'))\r\n\r\n\r\n    const [ selectedResult, setSelectedResult ] = useState('');\r\n\r\n    const [ schema, setSchema ] = useState({ \r\n        first_name : Yup.string().required('First Name is required...'),\r\n        last_name : Yup.string().required(\"Last Name is required...\"),\r\n        Tel_number : Yup.string().matches(/^(?:7|0|(?:\\+94))[0-9]{9,9}$/, 'Invalid Phone Number. Ex:- 0123458907')\r\n                        .required('Phone number is required...'),\r\n        NIC_number : nic,\r\n       // age : Yup.number(\"Age should be a number\").positive().required(\"Age is required\"),\r\n        birth_year : Yup.string()\r\n        .required(\"Birth Year is required\")\r\n        .min(4, \"Invalid Birth year\")\r\n        .max(4, \"Invalid Birth year\")\r\n        .matches(/^(?:19|(?:20))[0-9]{1,1}[0-9]{1,1}$/, \"Month must be greater than 0 and can't be exceeded 12\")\r\n\r\n    });\r\n\r\n    const [initialValues, setInitialValues ] = useState({\r\n        first_name: '',\r\n        last_name: '',\r\n        Tel_number:'',\r\n        NIC_number:'',\r\n        birth_year:'',\r\n    });\r\n\r\n    const submitForm = (values) => {\r\n        const {first_name, last_name, Tel_number, NIC_number, age, birth_year } = values;\r\n        const year = new Date().getFullYear()\r\n\r\n        if(selectedResult !== \"\"){\r\n            if(parseInt(birth_year, 10)>year){\r\n                alert(`Birth year must be lower or equal to ${year}`)\r\n            }else{\r\n                const Result = {\r\n                    name:{\r\n                        firstName : first_name,\r\n                        lastName : last_name,\r\n                    },\r\n                    contactNumber : parseInt(Tel_number),\r\n                    nic : {\r\n                        nicno:NIC_number,\r\n                        person : birth_year\r\n                    },\r\n                    result : selectedResult,\r\n                }\r\n                console.log(Result)\r\n                dispatch(addPcr(Result));\r\n                setPcrState(true);\r\n            } \r\n        }else{\r\n            alert('Please select correct PCR result')\r\n        }\r\n    }\r\n\r\n\r\n    const [NIClength, SetNIClength] = useState(10);\r\n\r\n    const handleSelected =(check) =>{\r\n        if(check === true){\r\n            schema.NIC_number = Yup.string().max(12, \"'Invalid NIC Number. Ex:- 199812345678'\")\r\n             .matches(/19[3-9][0-9]{9,9}$|200[0-3][0-9]{8,8}$/, 'Invalid NIC Number. Ex:- 199812345678').required('NIC number is required...')\r\n            SetNIClength(12)\r\n        }if(check === false){\r\n            schema.NIC_number = Yup.string().max(10, \"'Invalid NIC Number. Ex:- 1234567V'\")\r\n             .matches(/[3-9]+[0-9]{8,8}(v|x)$/, 'Invalid NIC Number. Ex:- 1234567V').required('NIC number is required...')\r\n            SetNIClength(10)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n       if(pcrState && pcrAdded){\r\n           dispatch(toastAction({ message: \"PCR added successfully...\" , type: 'info'}))\r\n       }\r\n       else if(pcrState && !pcrAdded){\r\n            dispatch(toastAction({ message: \"PCR added successfully...\" , type: 'error'}))\r\n       }\r\n    },[dispatch, pcrAdded])\r\n\r\n    return (\r\n        <>\r\n        {auth.loggedIn ? \r\n        <Container className=' formContainer mt-3'>\r\n        <Formik\r\n            validationSchema = {Yup.object().shape(schema)}\r\n            onSubmit = {submitForm}\r\n            initialValues = {initialValues}\r\n        >\r\n            {({\r\n                handleSubmit,\r\n                handleChange,\r\n                handleBlur,\r\n                values,\r\n                touched,\r\n                isValid,\r\n                dirty,\r\n                errors\r\n            }) => (\r\n            <Form noValidate onSubmit={handleSubmit}>\r\n            <h2 style={{textAlign:'center', fontWeight:'700'}}>ADD PCR RESULTS</h2>\r\n\r\n            {/* <Col>\r\n                <Row> */}\r\n   \r\n        <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n            <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                <div className=\"set-animation from-left animate\">\r\n                    <Form.Group controlId = 'firstName' className='m-2' style={{width:'100%'}}>\r\n                        <Form.Label className = 'form-label m-2'>First Name</Form.Label>\r\n                            <Form.Control \r\n                                className='textBox'\r\n                                type='text'\r\n                                name='first_name'\r\n                                value={values.first_name}\r\n                                onChange={handleChange}\r\n                                placeholder='First Name'\r\n                                isValid={touched.first_name && !errors.first_name}\r\n                                isInvalid={!!errors.first_name}\r\n                                size = {'lg'} \r\n                                autoComplete='disabled'\r\n                            />\r\n                            <FormControl.Feedback type='invalid'>{errors.first_name}</FormControl.Feedback>\r\n                    </Form.Group>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                <div className=\"set-animation from-left animate\">\r\n\r\n                    <Form.Group controlId = 'lastName' className='m-2 float-right' style={{width:'100%', float:'right'}}>\r\n                    <Form.Label className = 'form-label m-2'>Last Name</Form.Label>\r\n                        <Form.Control \r\n                            className='textBox'\r\n                            type='text'\r\n                            name='last_name'\r\n                            value={values.last_name}\r\n                            onChange={handleChange}\r\n                            placeholder='Last Name'\r\n                            isValid={touched.last_name && !errors.last_name}\r\n                            isInvalid={!!errors.last_name}\r\n                            size = {'lg'} \r\n                            autoComplete = 'disabled'\r\n                        />\r\n                        <FormControl.Feedback type='invalid'>{errors.last_name}</FormControl.Feedback>\r\n                    </Form.Group>\r\n                </div>\r\n            </div>\r\n        </div>\r\n                {/* </Row>\r\n\r\n                <Row> */}\r\n        <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n            <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                <div className=\"set-animation from-left animate\">\r\n\r\n                    <Form.Group controlId = 'telNumber' className='m-2 float-right' style={{width:'100%', float:'right'}}>\r\n                        <Form.Label className = 'form-label'>Telephone Number</Form.Label>\r\n                            <Form.Control \r\n                                className='textBox'\r\n                                type='text'\r\n                                name='Tel_number'\r\n                                value={values.Tel_number}\r\n                                onChange={handleChange}\r\n                                placeholder='Telephone Number'\r\n                                isValid={touched.Tel_number && !errors.Tel_number}\r\n                                isInvalid={!!errors.Tel_number}\r\n                                size = {'lg'} \r\n                                autoComplete = 'off'\r\n                            />\r\n                        <FormControl.Feedback type='invalid'>{errors.Tel_number}</FormControl.Feedback>\r\n                    </Form.Group>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                <div className=\"set-animation from-left animate\">\r\n\r\n                    <Form.Group controlId = 'NicNumber' className='m-2 float-right' style={{width:'100%', float:'right'}}>\r\n                            <Row>\r\n                                <input \r\n                                    type='checkbox'\r\n                                    style={{width:'5%', marginTop:'5px', marginLeft:'50px'}}\r\n                                    onChange={(e) =>{\r\n                                        let checked = e.target.checked;\r\n                                        handleSelected(checked)\r\n                                    }}\r\n                                />\r\n                                <Form.Label className = 'form-label w-75'>Please select here if new NIC Number</Form.Label> \r\n                            </Row>\r\n\r\n                            <div>\r\n                                <Form.Control \r\n                                    className='textBox'\r\n                                    type='text'\r\n                                    maxLength={NIClength}\r\n                                    name='NIC_number'\r\n                                    value={values.NIC_number}\r\n                                    onChange={handleChange}\r\n                                    placeholder='NIC Number'\r\n                                    isValid={touched.NIC_number && !errors.NIC_number}\r\n                                    isInvalid={!!errors.NIC_number}\r\n                                    size = {'lg'} \r\n                                    autoComplete = 'disabled'\r\n                                />\r\n                                <FormControl.Feedback type='invalid'>{errors.NIC_number}</FormControl.Feedback>\r\n                            </div>\r\n\r\n                    </Form.Group>\r\n                </div>\r\n            </div>\r\n        </div>\r\n       \r\n\r\n                {/* </Row>\r\n\r\n                <Row> */}\r\n        <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n            <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                <div className=\"set-animation from-left animate\">\r\n                   <Form.Group controlId = 'PcrResult' className='m-2 float-right' style={{width:'100%', float:'right'}}>\r\n                        <Form.Label className = 'form-label'>PCR test result</Form.Label>\r\n                        <Form.Control \r\n                                style={{height:'48px'}}\r\n                                name='Test_result' \r\n                                onChange = {(e) => {\r\n                                    setSelectedResult(e.target.value)\r\n                                }} as=\"select\">\r\n                                    <option  value=\"\">Select the PCR result </option>\r\n                                    <option  value=\"positive\">Positive</option>\r\n                                    <option  value=\"negative\">Negative</option>\r\n                            </Form.Control>\r\n                    </Form.Group>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                <div className=\"set-animation from-left animate\">\r\n\r\n                    {/* <Form.Group controlId = 'lastName' className='m-2 float-right' style={{width:'100%', float:'right'}}>\r\n                    <Form.Label className = 'form-label'>Age</Form.Label>\r\n                        <Form.Control \r\n                            className='textBox'\r\n                            type='text'\r\n                            name='age'\r\n                            value={values.age}\r\n                            onChange={handleChange}\r\n                            placeholder='Age'\r\n                            isValid={touched.age && !errors.age}\r\n                            isInvalid={!!errors.age}\r\n                            size = {'lg'} \r\n                            autoComplete = 'disabled'\r\n                        />\r\n                        <FormControl.Feedback type='invalid'>{errors.age}</FormControl.Feedback>\r\n                    </Form.Group> */}\r\n                   <Form.Group controlId = 'birthYer' className='m-2 float-right' style={{width:'100%', float:'right'}}>\r\n                        <Form.Label className = 'form-label'>Birth Year</Form.Label>\r\n                            <Form.Control \r\n                                className='textBox'\r\n                                type='text'\r\n                                name='birth_year'\r\n                                minLength={4}\r\n                                value={values.birth_year}\r\n                                onChange={handleChange}\r\n                                placeholder='Birth Year'\r\n                                isValid={touched.birth_year && !errors.birth_year}\r\n                                isInvalid={!!errors.birth_year}\r\n                                size = {'lg'} \r\n                                autoComplete = 'off'\r\n                            />\r\n                        <FormControl.Feedback type='invalid'>{errors.birth_year}</FormControl.Feedback>\r\n                    </Form.Group>\r\n                </div>\r\n            </div>\r\n        </div>\r\n                {/* </Row> */}\r\n\r\n            {/* </Col> */}\r\n            <br/><br/>\r\n            <div class=\"col-md-12 text-center\">\r\n                <Button \r\n                    type='submit'\r\n                    className='mb-3'\r\n                    style={{float:'center'}}\r\n                >\r\n                Add PCR Results\r\n                </Button>\r\n            </div>\r\n            </Form>\r\n            )}\r\n        </Formik>\r\n        </Container> : history.push('/')}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddPcrResults\r\n","import { createSelector, createSlice } from '@reduxjs/toolkit';\r\nimport { apiCallBegan } from './apiActions';\r\n//Auth Slice\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        data: {},\r\n        token: '',\r\n        logging: false,\r\n        loggedIn : false,\r\n        wardAdded: false,\r\n        wardUpdated:false,\r\n        wardDelete: false\r\n    },\r\n    reducers: {\r\n\r\n        userLoginRequested(user, action){\r\n            user.logging = true;\r\n        },\r\n\r\n        userLoginFailed(user, action) {\r\n            user.logging = false;\r\n            user.error = action.payload;\r\n        },\r\n\r\n        userLoginSucceeded(user, action){\r\n            user.logging = false;\r\n            delete user.error;\r\n            user.data = action.payload.data;\r\n            user.token = action.payload.token; \r\n            //Cookies.set(\"token\", user.token) \r\n            user.loggedIn = true;\r\n            console.log(user.data)\r\n        },\r\n\r\n        // userLoginRequested(user, action){\r\n        //     auth.logging = true;\r\n        // },\r\n\r\n        // userLoginFailed(user, action) {\r\n        //     auth.logging = false;\r\n        //     auth.error = action.payload;\r\n        // },\r\n\r\n        // userLoginSucceeded(auth, action){\r\n        //     auth.logging = false;\r\n        //     delete auth.error;\r\n        //    // auth.data = action.payload.data;\r\n        //     auth.token = action.payload.data.auth.token;  \r\n        //     auth.loggedIn = true;\r\n        //     console.log(auth.loggedIn);\r\n        // },\r\n\r\n\r\n\r\n\r\n        userLoggedOut(user,action){\r\n            user.loggedIn = false;\r\n            user.data = {};\r\n            user.token=''\r\n        },\r\n\r\n        authDataUpdated(user, action){\r\n            user.data = {...user.data, ...action.payload};\r\n        },\r\n\r\n        wardCreateRequested(auth, action) {\r\n            // hospital.loading = true;\r\n             auth.wardAdded = false;\r\n        },\r\n\r\n        wardCreateRequestFailed(auth, action){\r\n           // hospital.loading = false;\r\n        },\r\n\r\n        wardCreateRequestSucceeded(auth, action){\r\n            auth.wardAdded = true\r\n            auth.data.user.admin.hospital.wards.push(action.payload.data.ward) //= wardId.hospital\r\n        },\r\n\r\n        wardUpdated(auth, action){\r\n            auth.wardUpdated = true\r\n            //console.log(action.payload.data.ward.totalBeds)\r\n            const index =  auth.data.user.admin.hospital.wards.findIndex(p => p.name === action.payload.data.ward.name)\r\n            auth.data.user.admin.hospital.wards[index].totalBeds = action.payload.data.ward.totalBeds\r\n           \r\n       },\r\n\r\n       wardDelete(auth, action){\r\n           auth.wardDelete = true;\r\n           const newWardList = auth.data.user.admin.hospital.wards.filter(p => p.name !== action.payload.data.ward.name)\r\n           auth.data.user.admin.hospital.wards = newWardList\r\n       },\r\n\r\n        userUpdated(auth, action){\r\n            auth.data.user.user = action.payload.data.user\r\n            console.log(action.payload.data)\r\n        },\r\n    }\r\n});\r\n\r\n\r\n//Reducer\r\nexport default slice.reducer;\r\n\r\n\r\n//Action Creators\r\nexport const { \r\n    userLoginRequested, \r\n    userLoginFailed, \r\n    userLoginSucceeded, \r\n    userLoggedOut,\r\n    authDataUpdated,\r\n    wardUpdated,\r\n    wardDelete,\r\n    wardCreateRequested,\r\n    wardCreateRequestFailed,\r\n    wardCreateRequestSucceeded,\r\n    userUpdated,\r\n    } = slice.actions;\r\n\r\nconst hospitalURL = \"/api/v1/hospital\";\r\n\r\n\r\n//Action Invokers\r\nexport const login = (data) => (dispatch) => {\r\n    const url = '/api/v1/users/login';\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url,\r\n            onStart: userLoginRequested.type,\r\n            onError: userLoginFailed.type,\r\n            onSuccess: userLoginSucceeded.type,\r\n            method: 'post',\r\n            data : data\r\n        })\r\n    );\r\n};\r\n\r\n\r\nexport const logout = () => (dispatch) =>dispatch(userLoggedOut());\r\n\r\n\r\n//Selectors\r\n\r\nexport const getAuthDetails = createSelector(\r\n    state => state.auth.data,\r\n    userData => userData\r\n);\r\n\r\nexport const getAllAuthDetails = createSelector(\r\n    state => state.auth,\r\n    auth => auth\r\n);\r\n\r\n\r\nexport const getLoggedInStatus = createSelector(\r\n    state => state.auth,\r\n  //  loggedIn => loggedIn\r\n    auth => auth.loggedIn\r\n);\r\n\r\nexport const updateAuthData = (data) => authDataUpdated(data);\r\n\r\nexport const addWard = (ward) => (dispatch) => {\r\n    console.log(ward)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: hospitalURL + `/ward`,\r\n            method: \"post\",\r\n            data: ward,\r\n            onStart: wardCreateRequested,\r\n            onSuccess: wardCreateRequestSucceeded.type,\r\n            onError: wardCreateRequestFailed\r\n        })\r\n    );\r\n}\r\n\r\nexport const updateWard= (ward, wardId) => (dispatch) => {\r\n    console.log(ward)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: hospitalURL + `/ward/${wardId}`,\r\n            method: \"patch\",\r\n            data: ward,\r\n            onSuccess: wardUpdated.type,\r\n        })\r\n    );\r\n\r\n}\r\n\r\nexport const deleteWard= (ward, id) => (dispatch) => {\r\n    console.log(ward, id)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: hospitalURL + `wards/${id}`,\r\n            method: \"patch\",\r\n            data: ward,\r\n            onSuccess: wardDelete.type,\r\n        })\r\n    );\r\n}\r\n\r\nexport const updateUser = (user) => (dispatch) => {\r\n    console.log(user)\r\n    return dispatch(\r\n        apiCallBegan({\r\n            url: 'api/v1/users/update',\r\n            method: \"patch\",\r\n            data: user,\r\n            onSuccess: userUpdated.type,\r\n        })\r\n    );\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react'\r\nimport {Container, Button, Card, Row, Col, Nav, Form, FormControl} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {  Formik } from 'formik';\r\nimport axios from 'axios';\r\nimport * as Yup from 'yup';\r\n//import { updateUser } from '../../store/entities/users';\r\nimport { updateUser } from '../../store/auth';\r\n//import  { getPatientById,  updatePatient} from '../../store/entities/patients';\r\nimport { toastAction } from '../../store/toastActions';\r\n\r\nconst EditProfile = ({match, history}) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const patientId = match.params.id\r\n\r\n   // const auth = useSelector(state => state.auth);\r\n   // console.log(auth)\r\n\r\n    const userDetails = useSelector(state => state.auth);\r\n    const { user } = userDetails.data.user\r\n    const patient = user\r\n\r\n   // console.log(patient)\r\n\r\n   const districts = [{id:'0', name:'Ampara'},{ id:'1', name:'Anuradhapura'},{id:'2',name:'Badulla'},\r\n   {id:'3', name:'Batticaloa'},{id:'4', name:'Colombo'},{id:'5', name:'Galle'},{id:'6', name:'Gampaha'}, \r\n   {id:'7', name:'Hambanthota'},{id:'8', name:'Jaffna'},{id:'9', name:'Kalutara'},{id:'10', name:'Kandy'},\r\n   {id:'11', name:'Kegalle'},{id:'12', name:'Kilinochchi'},{id:'13', name:'Kurunegala'},{id:'14', name:'Mannar'},\r\n   {id:'15', name:'Matale'},{id:'16', name:'Matara'},{id:'17', name:'Monaragala'},{id:'18', name:'Mullativu'},\r\n   {id:'19', name:'Nuwara Eliya'},{id:'20', name:'Polonnaruwa'},{id:'21', name:'Puttalam'},\r\n   {id:'22', name:'Ratnapura'},{id:'23', name:'Trincomalee'},{id:'24', name:'Vavuniya'},  ]\r\n\r\n   const [currentDistrict, setDistrict] = useState('Ampara')\r\n   console.log(currentDistrict)\r\n  \r\n\r\n    const { address, birthday, contactNo, name } = patient\r\n    const birthDay = birthday.split(\"-\")\r\n    const dateFormat = birthDay[0]+\"-\"+birthDay[1]+\"-\"+birthDay[2][0]+birthDay[2][1]\r\n\r\n    const { line1, line2, city, district} = address\r\n    const districtId = getDistrict(districts, district)\r\n    //setDistrict(districtId)\r\n    console.log(districtId)\r\n    const { firstName, lastName} = name\r\n\r\n\r\n    const [ schema, setSchema ] = useState({ \r\n        first_name : Yup.string().required('First Name is required...'),\r\n        last_name : Yup.string().required(\"Last Name is required...\"),\r\n        Tel_number : Yup.string().matches(/^(?:7|0|(?:\\+94))[0-9]{9,9}$/, 'Invalid Phone Number. Ex:- 0123458907')\r\n                        .required('Phone number is required...'),\r\n       // address: Yup.string().required('Address is required'),\r\n        line1: Yup.string().required('Address is required'),\r\n        line2: Yup.string().required('Address is required'),\r\n        city: Yup.string().required('City is required')\r\n\r\n\r\n    });\r\n\r\n    const [initialValues, setInitialValues ] = useState({\r\n        first_name: firstName,\r\n        last_name: lastName,\r\n        Tel_number: contactNo,\r\n        line1: line1,\r\n        line2: line2,\r\n        city: city,\r\n        birthday: dateFormat,\r\n        district: currentDistrict\r\n    });\r\n\r\n    const submitForm = (values) => {\r\n        const {first_name, last_name, Tel_number, birthday, line1, line2, city } = values;\r\n        //const dis = districts[currentDistrict].name\r\n        let patientDistrict = ''\r\n        if(typeof(currentDistrict) === 'number'){\r\n            patientDistrict  = districts[currentDistrict].name\r\n        }else{\r\n            patientDistrict  = currentDistrict\r\n        }\r\n        const Result = {\r\n                name : {\r\n                    firstName: first_name,\r\n                    lastName : last_name,\r\n                },\r\n                contactNo : parseInt(Tel_number),\r\n                birthday: birthday,\r\n                address : {\r\n                    line1: line1,\r\n                    line2: line2,\r\n                    city: city,\r\n                    district: patientDistrict \r\n                },\r\n              //  city,\r\n              //  patientDistrict ,\r\n        }\r\n        console.log(Result)\r\n        dispatch(updateUser(Result))\r\n      //  dispatch(updatePatient(Result, patientId));\r\n        //dispatch(toastAction({ message: \"Profile Updated Successfully\", type: 'info' }))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        // const fetchPatient = async () => {\r\n        //     const {data} = await axios.get(`http://localhost:8000/api/v1/patients/${patientId}`)\r\n        //     setPatient(data.data)\r\n        // }\r\n\r\n        // fetchPatient()\r\n    }, [dispatch])\r\n\r\n    return (\r\n\r\n            <Container className=' formContainer mt-3'>\r\n                 {userDetails.loggedIn ? \r\n            <Formik\r\n                validationSchema = {Yup.object().shape(schema)}\r\n                onSubmit = {submitForm}\r\n                initialValues = {initialValues}\r\n            >\r\n                {({\r\n                    handleSubmit,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    values,\r\n                    touched,\r\n                    isValid,\r\n                    dirty,\r\n                    errors\r\n                }) => (\r\n                <Form noValidate onSubmit={handleSubmit}>\r\n                <h3 style={{textAlign:'center', fontWeight:'700'}}>EDIT PATIENT PERSONAL DETAILS</h3>\r\n    \r\n       \r\n            <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n                <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                    <div className=\"set-animation from-left animate\">\r\n                        <Form.Group controlId = 'firstName' className='m-2' style={{width:'100%'}}>\r\n                            <Form.Label className = 'form-label m-2'>First Name</Form.Label>\r\n                                <Form.Control \r\n                                    className='textBox'\r\n                                    type='text'\r\n                                    name='first_name'\r\n                                    value={values.first_name}\r\n                                    onChange={handleChange}\r\n                                    placeholder='First Name'\r\n                                    isValid={touched.first_name && !errors.first_name}\r\n                                    isInvalid={!!errors.first_name}\r\n                                    size = {'lg'} \r\n                                    autoComplete='disabled'\r\n                                />\r\n                                <FormControl.Feedback type='invalid'>{errors.first_name}</FormControl.Feedback>\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n    \r\n                <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                    <div className=\"set-animation from-left animate\">\r\n    \r\n                        <Form.Group controlId = 'lastName' className='m-2 float-right' style={{width:'100%', float:'right'}}>\r\n                        <Form.Label className = 'form-label m-2'>Last Name</Form.Label>\r\n                            <Form.Control \r\n                                className='textBox'\r\n                                type='text'\r\n                                name='last_name'\r\n                                value={values.last_name}\r\n                                onChange={handleChange}\r\n                                placeholder='Last Name'\r\n                                isValid={touched.last_name && !errors.last_name}\r\n                                isInvalid={!!errors.last_name}\r\n                                size = {'lg'} \r\n                                autoComplete = 'disabled'\r\n                            />\r\n                            <FormControl.Feedback type='invalid'>{errors.last_name}</FormControl.Feedback>\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n                <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                    <div className=\"set-animation from-left animate\">\r\n                        <Form.Group controlId = 'telNumber' className='m-2 float-right' style={{width:'100%', float:'right'}}>\r\n                            <Form.Label className = 'form-label'>Birthday</Form.Label>\r\n                                <Form.Control \r\n                                    className='textBox'\r\n                                    type='date'\r\n                                    name='birthday'\r\n                                    value={values.birthday}\r\n                                    onChange={handleChange}\r\n                                    placeholder='Birthday'\r\n                                    isValid={touched.birthday && !errors.birthday}\r\n                                    isInvalid={!!errors.birthday}\r\n                                    size = {'lg'} \r\n                                    autoComplete = 'off'\r\n                                />\r\n                            <FormControl.Feedback type='invalid'>{errors.birthday}</FormControl.Feedback>\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                    <div className=\"set-animation from-left animate\">\r\n    \r\n                        <Form.Group controlId = 'telNumber' className='m-2 float-right' style={{width:'100%', float:'right'}}>\r\n                            <Form.Label className = 'form-label'>Telephone Number</Form.Label>\r\n                                <Form.Control \r\n                                    className='textBox'\r\n                                    type='text'\r\n                                    name='Tel_number'\r\n                                    value={values.Tel_number}\r\n                                    onChange={handleChange}\r\n                                    placeholder='Telephone Number'\r\n                                    isValid={touched.Tel_number && !errors.Tel_number}\r\n                                    isInvalid={!!errors.Tel_number}\r\n                                    size = {'lg'} \r\n                                    autoComplete = 'off'\r\n                                />\r\n                            <FormControl.Feedback type='invalid'>{errors.Tel_number}</FormControl.Feedback>\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n                <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-4\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                    <div className=\"set-animation from-left animate\">\r\n    \r\n                        <Form.Group controlId = 'address' className='m-2 float-right' style={{width:'100%', float:'right'}}>\r\n                        <Form.Label className = 'form-label'>Line 1</Form.Label>\r\n                            <Form.Control \r\n                                className='textBox'\r\n                                type='text'\r\n                                name='age'\r\n                                value={values.line1}\r\n                                onChange={handleChange}\r\n                                placeholder='Address'\r\n                                isValid={touched.line1 && !errors.line1}\r\n                                isInvalid={!!errors.line1}\r\n                                size = {'lg'} \r\n                                autoComplete = 'disabled'\r\n                            />\r\n                            <FormControl.Feedback type='invalid'>{errors.line1}</FormControl.Feedback>\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-4\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                    <div className=\"set-animation from-left animate\">\r\n    \r\n                        <Form.Group controlId = 'address' className='m-2 float-right' style={{width:'100%', float:'right'}}>\r\n                        <Form.Label className = 'form-label'>Line 2</Form.Label>\r\n                            <Form.Control \r\n                                className='textBox'\r\n                                type='text'\r\n                                name='age'\r\n                                value={values.line2}\r\n                                onChange={handleChange}\r\n                                placeholder='Address'\r\n                                isValid={touched.line2 && !errors.line2}\r\n                                isInvalid={!!errors.line2}\r\n                                size = {'lg'} \r\n                                autoComplete = 'disabled'\r\n                            />\r\n                            <FormControl.Feedback type='invalid'>{errors.line2}</FormControl.Feedback>\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-4\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                    <div className=\"set-animation from-left animate\">\r\n    \r\n                        <Form.Group controlId = 'city' className='m-2 float-right' style={{width:'100%', float:'right'}}>\r\n                        <Form.Label className = 'form-label'>City</Form.Label>\r\n                            <Form.Control \r\n                                className='textBox'\r\n                                type='text'\r\n                                name='city'\r\n                                value={values.city}\r\n                                onChange={handleChange}\r\n                                placeholder='Address'\r\n                                isValid={touched.city && !errors.city}\r\n                                isInvalid={!!errors.city}\r\n                                size = {'lg'} \r\n                                autoComplete = 'disabled'\r\n                            />\r\n                            <FormControl.Feedback type='invalid'>{errors.city}</FormControl.Feedback>\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-4\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                    <div className=\"set-animation from-left animate\">\r\n                        <Form.Group controlId = 'city' className='m-2 float-right' style={{width:'100%', float:'right'}}>\r\n                            <Form.Label >District</Form.Label>\r\n                            <Form.Control \r\n                                className='textBox'\r\n                                style={{height:'48px'}}\r\n                               // value={values.district}\r\n                                onChange = {(e) => {\r\n                                    setDistrict(e.target.value)\r\n                                }} as=\"select\">\r\n                                {districts.map((c,index) => <option selected={index === values.district ? 'slected': null}>{`${c.name}`}</option>)}\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n                <br/><br/>\r\n                <div class=\"col-md-12 text-center\">\r\n                    <Button \r\n                        type='submit'\r\n                        className='mb-3'\r\n                        style={{float:'center'}}\r\n                    >\r\n                    Submit\r\n                    </Button>\r\n                </div>\r\n                </Form>\r\n                )}\r\n            </Formik>: history.push('/')}\r\n            </Container>\r\n        )\r\n}\r\n\r\nexport default EditProfile\r\n\r\nfunction getDistrict(districtList, district){\r\n    if( typeof(district) !== 'undefined'){\r\n        const value = districtList.filter( p=> p.name === district )\r\n        console.log(value)\r\n        return value.id\r\n    }\r\n    return ''\r\n}\r\n\r\n","import React from 'react'\r\nimport { Button } from 'react-bootstrap'\r\n//import \"./PopUp.css\"\r\n\r\nconst PopUp = ({closePopUp}) => {\r\n    return (\r\n        <div className=\"popupBackground\">\r\n            <div className=\"popupContainer\">\r\n                <div className=\"titleCloseBtn\">\r\n                    <Button onClick={ () => closePopUp(false)}>X</Button>\r\n                </div>\r\n\r\n                <div className=\"popupTitle\">\r\n                    <h1>Are you sure want to continue?</h1>\r\n                </div>\r\n                <div className=\"popupBody\">\r\n                    <p>dfrgregerger</p>\r\n                </div>\r\n                <div className=\"popupFooter\">\r\n                    <Button onClick={ () => closePopUp(false)} id=\"cancelBtn\">Cancel</Button>\r\n                    <Button>Continue</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PopUp\r\n","import React, {useState} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {  updateTransferPatient, changePatientWard} from '../../store/entities/patients';\r\nimport { Card, Button, Col, Form,} from 'react-bootstrap';\r\nimport PopUp from '../popUp/PopUp';\r\nimport { toastAction } from '../../store/toastActions';\r\n\r\nconst Actions = ({patients, hospitals, wards, popUpHandler, wardHandler}) => {\r\n    const currentMedicalHistory = (patients.medicalHistory)[patients.medicalHistory.length-1]\r\n    const currentWardId = currentMedicalHistory.ward\r\n    const currentHospitalId = currentMedicalHistory.hospital\r\n   // console.log(currentMedicalHistory )\r\n    const dispatch = useDispatch()\r\n    const [tranferSt, transferState ] = useState('false');\r\n    const [hospitalName, setTransferHospital] = useState(hospitals[0].name)\r\n    const [wardName, setWardName] = useState(wards[0].name)\r\n\r\n    if(typeof(hospitals) ==! undefined && hospitals.length > 0){\r\n        setTransferHospital(hospitals[0].name)\r\n    }\r\n\r\n\r\n    const transferPatient = (TransferState) => {\r\n        if(currentHospitalId === getHospitalId(hospitals, hospitalName)){\r\n            dispatch(toastAction({ message: \"New hospital cannot be current hospital...\", type: 'error' }));\r\n        }\r\n        else{\r\n            const hospitalUpdate = {\r\n                hospital: getHospitalId(wards, wardName)\r\n            }\r\n    \r\n            console.log(hospitalUpdate)\r\n            dispatch(updateTransferPatient(hospitalUpdate, patients._id));\r\n        }\r\n        // const transferUpdate = {\r\n        //     patientId: patients._id,\r\n        //     transferDetails:{\r\n        //         hospitalName : hospitalName,\r\n        //         transferState : TransferState\r\n        //     }\r\n        // }\r\n   //     console.log(transferUpdate)\r\n   //     dispatch(updateTransferPatient(transferUpdate));\r\n        // if(TransferState == 'pending'){\r\n        //     transferState(TransferState)\r\n        // }else{\r\n        //    transferState('false')\r\n        // }\r\n    }\r\n\r\n    \r\n    const changeWard = () => {\r\n        if(currentWardId === getWardId(wards, wardName)){\r\n            dispatch(toastAction({ message: \"New ward cannot be current ward...\", type: 'error' }));\r\n        }\r\n        else{\r\n            const wardUpdate = {\r\n                ward: getWardId(wards, wardName)\r\n            }\r\n    \r\n          //  console.log(wardUpdate)\r\n            wardHandler(wardUpdate, patients._id)\r\n            //dispatch(changePatientWard(wardUpdate, patients._id));\r\n           // window.location.reload(false)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Card className='m-2 con-vs-card text-center'>\r\n            <br></br>\r\n            <div className='text-center' >\r\n            <Button \r\n                type='submit'  \r\n                className=' w-50 text-center' \r\n                onClick ={ () => popUpHandler(true)}\r\n            >Discharge</Button></div>\r\n\r\n            \r\n            <hr style={{color: '#000000',backgroundColor: '#000000',height: .25,borderColor : '#000000'}}/>\r\n                {typeof(hospitals) === 'undefined' || hospitals.length === 0 ? \r\n                    <Card style={{backgroundColor:'#fca8a4', color:'#b73333', opacity:'0.5', padding:'10px', margin:'5px'}}\r\n                          className='m-2'\r\n                    >No Wards</Card> :\r\n                <Col>\r\n                    <h5>Change Ward</h5>\r\n                    <Form.Group>\r\n                        <Form.Control onChange = {(e) => {\r\n                            if(e.target.value !== \"Select Ward\"){\r\n                                setWardName(e.target.value);\r\n                            }\r\n                        }} as=\"select\">\r\n                        {wards.map((c,index) => <option selected={index === 0? 'slected': null}>{`${c.name}`}</option>)}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Button\r\n                        onClick ={ () => changeWard()}\r\n                    >Change Ward</Button>  \r\n                </Col> }\r\n            <hr style={{color: '#000000',backgroundColor: '#000000',height: .25,borderColor : '#000000'}}/>\r\n            \r\n            <div>\r\n                {typeof(hospitals) === 'undefined' || hospitals.length === 0 ? \r\n                    <Card style={{backgroundColor:'#fca8a4', color:'#b73333', opacity:'0.5', padding:'10px', margin:'5px'}}\r\n                          className='m-2'\r\n                    >No Hospitals</Card> :\r\n                <Col>\r\n                    <h5 >Transfer Patient</h5>\r\n                    <Form.Group>\r\n                        <Form.Control onChange = {(e) => {\r\n                            if(e.target.value !== \"Select Hospital\"){\r\n                                setTransferHospital(e.target.value);\r\n                            }\r\n                        }} as=\"select\">\r\n                        {hospitals.map((c,index) => <option selected={index === 0? 'slected': null}>{`${c.name}`}</option>)}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Col> }\r\n\r\n                <Button className='btn btn-primary m-2 text-center' disabled={tranferSt === 'pending' ? true : false} onClick={()=>transferPatient('pending')}>Transfer</Button>\r\n                <Button className='btn btn-danger m-2 text-center' disabled={tranferSt === 'false'? true : false} onClick={()=>transferPatient('canceled')}>Cancel</Button>\r\n                \r\n            </div>\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Actions\r\n\r\n\r\nfunction getWardId(wards, ward){\r\n    let id = \"\"\r\n    if(typeof(wards) === 'undefined' || wards.length === 0){\r\n         return id\r\n    } \r\n\r\n    const wardDetail = wards.filter(p=> p.name === ward)\r\n    return wardDetail[0]._id\r\n}\r\n\r\nfunction getHospitalId(hospitals, hospital){\r\n    let id = \"\"\r\n    if(typeof(hospitals) === 'undefined' || hospitals.length === 0){\r\n         return id\r\n    } \r\n\r\n    const hospitalDetail = hospitals.filter(p=> p.name === hospital)\r\n    return hospitalDetail[0]._id\r\n}\r\n\r\n","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\nexport default function AlertDialog({dialogSet, closePopUp, dischargeHandler}) {\r\n\r\n\r\n  const handleClose = () => {\r\n    dischargeHandler()\r\n    closePopUp(false)\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={dialogSet}\r\n        onClose={!dialogSet}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          {\"Are you continue this action?\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {/* <DialogContentText id=\"alert-dialog-description\">\r\n            Let Google help apps determine location. This means sending anonymous\r\n            location data to Google, even when no apps are running.\r\n          </DialogContentText> */}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={ () => closePopUp(false)}>Cancel</Button>\r\n          <Button onClick={ () => handleClose()}>Continue</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react'\r\nimport {Container, Button, Card, Row, Col, Nav, Form,FormControl} from 'react-bootstrap'\r\nimport Loader from '../../components/Loader'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getPatientById, updateTransferPatient, loadPatients, dischargePatient, changePatientWard} from '../../store/entities/patients';\r\nimport {getAllHospitals, loadHospitals} from '../../store/entities/hospitals'\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport PersonalInfo from '../../components/patientProfile/PersonalInfo'\r\nimport CurrentInfo from '../../components/patientProfile/CurrentInfo'\r\nimport Actions from '../../components/patientProfile/Actions'\r\nimport History from '../../components/patientProfile/History'\r\nimport AlertDialog from '../../components/dialog/Dialog';\r\n\r\nconst Profile =  ({match, history}) => {\r\n    const dispatch = useDispatch()\r\n    const patientId = match.params.id\r\n    \r\n    const userDetails = useSelector(state => state.auth);\r\n    const { admin, user } = userDetails.data.user\r\n    let wardsDetails = ''\r\n    let userHospital_id =''\r\n    if(admin){\r\n        const {wards, _id } = admin.hospital\r\n        wardsDetails = wards\r\n        userHospital_id = _id\r\n    }\r\n\r\n    const auth = user\r\n\r\n    const patients = useSelector(getPatientById(patientId))\r\n    const hospitals = useSelector(getAllHospitals)\r\n    console.log(patients)\r\n\r\n    const currentHospital_id = getCurrentHospitalId(patients)\r\n\r\n    const [startDate, setStartDate] = useState('');\r\n    const [endDate, setEndDate] = useState('');\r\n\r\n    const [popup, setPopUp] = useState(false);\r\n\r\n   const [filteredHistory, setFilteredHistory] = useState([])\r\n   const [patientHistory, changeHistory ] = useState(filteredHistory) \r\n   const [findHistory, setfindHistory] = useState(false)\r\n\r\n   const [action, setAction ] = useState('')\r\n\r\n\r\n   const setDischargeHandler = () =>{\r\n       console.log('discharge')\r\n       //dispatch(dischargePatient(patientId))\r\n   }\r\n\r\n   const setChangeWardHandler = (ward, patientId) =>{\r\n      console.log(ward)\r\n     dispatch(changePatientWard(ward, patientId))\r\n    // window.location.reload(false)\r\n   }\r\n\r\n    const setDates = (date, type) =>{\r\n        if(type === 'start'){\r\n            setStartDate(date);\r\n        }else{\r\n            setEndDate(date)\r\n        }\r\n    }\r\n\r\n    const searchHistory =() =>{\r\n        if(startDate <= endDate){\r\n            let medicalHistories = getMedicalHistories(startDate, endDate, patients);\r\n           // console.log(medicalHistories)\r\n            changeHistory(medicalHistories)\r\n            setFilteredHistory(medicalHistories);\r\n            setfindHistory(true)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if(auth.role === 'patient'){\r\n            dispatch(loadPatients())\r\n        }else{\r\n          //  dispatch(loadPatients())\r\n            dispatch(loadHospitals())\r\n        }\r\n        \r\n    }, [patients, hospitals])\r\n\r\n    return (\r\n        <Container>\r\n            {userDetails.loggedIn ? \r\n            <div>\r\n                <h4 style={{textAlign:'center', fontWeight:'700'}}>PATIENT PROFILE</h4>\r\n                <div>\r\n                    <Button \r\n                        className='btn btn-primary m-2'\r\n                        onClick= {() => history.push({pathname : '/hospital/PcrView', state: {pcr: patients.pcrTest}})} \r\n                    >Pcr Test Results</Button>\r\n                </div>\r\n                <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n                    \r\n                    <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-3\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                        <div className=\"set-animation from-left animate\">\r\n                            <PersonalInfo patients={objectDestructure(patients, \"user\")} currentHospital={currentHospital_id}\r\n                                userHospital={userHospital_id} id={patients ._id}>\r\n                            </PersonalInfo>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                        <div className=\"set-animation from-left animate\">\r\n                            {patients.currentMedicalHistory && userHospital_id === currentHospital_id? \r\n                                <CurrentInfo patients={objectDestructure(patients, \"history\").slice(-1)[0]}\r\n                                    userHospital={userHospital_id} currentHospital={currentHospital_id} hospitals={hospitals} wards={wardsDetails} pcr={patients.pcrTest}\r\n                                ></CurrentInfo> : \r\n\r\n                                <CurrentInfo patients={\"\"} currentHospital={\"\"}\r\n                                    userHospital={\"\"}\r\n                                ></CurrentInfo>}\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    {auth.role !== 'patient' &&\r\n                    <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-3\" style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                            <div className=\"set-animation from-left animate\">\r\n                            {currentHospital_id === userHospital_id ? \r\n                                <Actions patients={patients} hospitals={hospitals} wards ={wardsDetails} popUpHandler={setPopUp} wardHandler={setChangeWardHandler}></Actions> \r\n                               //<Card>rfergre</Card>\r\n                                :''\r\n                            }\r\n                            </div>\r\n                    </div> }\r\n                </div>\r\n\r\n                <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n                    <div className=\"vs-col vs-xs vs-sm-12 vs-lg-3\" style={{marginLeft:'0%',marginRight:'0%',width:'100%'}}>\r\n                        <Card className='m-2'>\r\n                            <h5 className=\"m-2 font-weight-bold\" style={{textAlign:'center'}}>SEARCH MEDICAL HISTORY</h5>\r\n                            <Form.Group as={Col} controlId='sd'>\r\n                                <Form.Label class=\"float-left\" className = 'form-label'>Start Date:</Form.Label>\r\n                                <Form.Control \r\n                                    type='date'\r\n                                    name='start_date' \r\n                                    onChange={(e)=>{\r\n                                        setDates(e.target.value, 'start')\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            <FormControl.Feedback type='invalid'>This field is required!</FormControl.Feedback>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Col} controlId='ed'>\r\n                                <Form.Label class=\"float-left\" className = 'form-label'>End Date:</Form.Label>\r\n                                <Form.Control \r\n                                    type='date'\r\n                                    name='end_date' \r\n                                    onChange={(e)=>{\r\n                                        setDates(e.target.value, 'end')\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            <FormControl.Feedback type='invalid'>This field is required!</FormControl.Feedback>\r\n                            </Form.Group>\r\n                            \r\n                            { startDate !== '' && endDate !== '' && startDate > endDate ?\r\n                            <Card \r\n                                style={{backgroundColor:'#fca8a4', color:'#b73333', opacity:'0.5', padding:'10px', margin:'5px'}}\r\n                                className='m-2'\r\n                            >Start date must be past to the end date</Card> : ''}\r\n                            { startDate !== '' && endDate !== '' && filteredHistory.length === 0 && findHistory?\r\n                            <Card \r\n                                style={{backgroundColor:'#fca8a4', color:'#b73333', opacity:'0.5', padding:'10px', margin:'5px'}}\r\n                                className='m-2'\r\n                            >No Medical History Data</Card> : ''}\r\n                            <Button \r\n                                className='btn btn-primary m-2'\r\n                                disabled ={startDate === '' || endDate === ''}\r\n                                onClick= {() => searchHistory()} \r\n                            >Search</Button>\r\n\r\n                        </Card>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"vs-col vs-xs vs-sm-12 vs-lg-6\" style={{marginLeft:'0%',marginRight:'0%',width:'100%'}}>\r\n                        <History patientHistory={patientHistory} filteredHistory={filteredHistory} hospital={getHospitalName(filteredHistory, hospitals)} ward={getWardName(filteredHistory, wardsDetails)}></History>\r\n                    </div>\r\n                    \r\n                    {filteredHistory.length !== 0 &&\r\n                    <div className=\"vs-col vs-xs vs-sm-12 vs-lg-3\" style={{marginLeft:'0%',marginRight:'0%',width:'100%'}}>\r\n                    <Card className='m-2'>\r\n                       \r\n                        <div>\r\n                            <h5 className='text-center m-2 font-weight-bold'>MEDICAL HISTORY LIST</h5>\r\n                            <Scrollbars style={{ width: '100%',minHeight:'15rem', height:'auto', overflowX:'hidden', border:'1px black'}}>\r\n                                <ul className=\"m-2\">\r\n                                {filteredHistory.map( p=> \r\n                                    <Button \r\n                                        className=\"btn btn-light\"\r\n                                        style={{width:'80%', borderRadius:'0px'}}\r\n                                        onClick={()=>changeHistory(p)}\r\n                                        >\r\n                                        {p.admittedDate}\r\n                                    </Button>)}\r\n                                </ul>\r\n                            </Scrollbars>\r\n                        </div>\r\n                    </Card>\r\n                    </div>}\r\n\r\n                    \r\n\r\n                </div>\r\n            </div>: history.push('/')}\r\n\r\n             <AlertDialog dialogSet={popup} closePopUp={setPopUp}  dischargeHandler={setDischargeHandler}/>\r\n            \r\n        </Container>    \r\n    \r\n    )\r\n}\r\n\r\n\r\nexport default Profile\r\n\r\n\r\nexport function getMedicalHistories(start_date, end_date, patients){\r\n    const histories = objectDestructure(patients, \"history\")\r\n    if(histories !== \"\"){\r\n        //console.log(histories)\r\n        return histories.filter ( p=> p.admittedDate >= start_date && p.admittedDate <= end_date)\r\n    }\r\n    return \"\"\r\n}\r\n\r\nexport function objectDestructure ( patients, type){\r\n    let newList = \"\"\r\n    if(typeof(patients) === 'undefined' || patients.length === 0){\r\n         return newList\r\n    } \r\n \r\n    const {medicalHistory, user } = patients\r\n    if(user){\r\n         if(type === \"user\"){\r\n            return user\r\n         }\r\n    }\r\n\r\n    if(medicalHistory){\r\n        if(type === \"history\"){\r\n           return medicalHistory\r\n        }\r\n    }\r\n\r\n    return newList\r\n}\r\n\r\nfunction getHospitalName(filteredhistory, hospitals){\r\n   // console.log(filteredhistory)\r\n    if(filteredhistory.length === 0){\r\n        return \"\"\r\n    }\r\n    const hospitalName = hospitals.filter(p=> p._id === filteredhistory[0].hospital)\r\n    return hospitalName[0]\r\n}\r\n\r\nfunction getWardName(filteredhistory, wards){\r\n    // console.log(filteredhistory)\r\n     if(filteredhistory.length === 0){\r\n         return \"\"\r\n     }\r\n     const wardName = wards.filter(p=> p._id === filteredhistory[0].ward)\r\n     return wardName[0]\r\n }\r\n\r\nfunction getCurrentHospitalId(patients){\r\n    let id = \"\"\r\n    if(typeof(patients) === 'undefined' || patients.length === 0){\r\n         return id\r\n    } \r\n\r\n    if(patients.currentMedicalHistory){\r\n        const lastHistory = patients.medicalHistory.slice(-1)[0]\r\n        return lastHistory.hospital\r\n    }\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react'\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Table, Container, Button, Row, Card} from 'react-bootstrap'\r\nimport Loader from '../../components/Loader'\r\nimport { updatePcrAproval, getPcrLoadingStatus, getToConfirmPcrLoadingStatus, getToConfirmPcrs, loadToConfirmPcrs} from '../../store/entities/pcr';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\n\r\nconst AprovePcrResults = ({}) => {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const auth = useSelector(state => state.auth);\r\n    const [userType, setUserType] = useState('')\r\n\r\n    const pcrList = useSelector(getToConfirmPcrs);\r\n\r\n    const [patientState, setPatientState] = useState(getOnlyIds(pcrList));\r\n    const [selected, setSelected] = useState([]);\r\n    const [allSelected, setAllSelected] = useState(false);\r\n    const patientsLoading = useSelector(getToConfirmPcrLoadingStatus);\r\n\r\n    useEffect(() => {\r\n       if(!auth.loggedIn){\r\n           window.location='/'\r\n       }\r\n       setUserType(auth.data.user.role)\r\n       dispatch(loadToConfirmPcrs());\r\n\r\n       if(pcrList){\r\n            setPatientState(\r\n                pcrList.map( p=>{\r\n                    return {\r\n                        select: false,\r\n                        _id: p._id,\r\n                        name: objectDestructure(p, \"name\"),\r\n                        age: p.age,\r\n                        telephone:p.contactNumber,\r\n                        result:p.result\r\n                    }\r\n                })\r\n            )\r\n       }\r\n\r\n\r\n    },[dispatch, pcrList])\r\n\r\n    const Aproval = (decision, patientId)=>{\r\n        const updateAprove = {\r\n\r\n            ids: [\r\n                patientId\r\n            ],\r\n        }\r\n        console.log(updateAprove)\r\n\r\n        dispatch(updatePcrAproval(updateAprove));\r\n       // setPatientState(patientState.filter(p=>p._id !== patientId))\r\n    }\r\n\r\n    const AproveSelected =(dicision) =>{\r\n        const updateAprove = {\r\n\r\n             ids : selected\r\n        }\r\n        console.log(updateAprove)\r\n        dispatch(updatePcrAproval(updateAprove));\r\n       // dispatch(updateTransferPatient(transferUpdate))\r\n        setSelected([]);\r\n        setPatientState(patientState.filter(p=>p.select === false))\r\n\r\n        //console.log(selected)\r\n    }\r\n\r\n    const handleSelected =(value, data)=>{\r\n        if(value === false && selected.length === pcrList.length){\r\n            setAllSelected(false);\r\n        }\r\n        if(value === true && selected.length === pcrList.length-1){\r\n            setAllSelected(true);\r\n        }\r\n        if(value === true){\r\n            let selectedList = [...selected]\r\n            let patient = pcrList.filter(p => p._id === data._id );\r\n            selectedList.push(patient[0]._id);\r\n            setSelected(selectedList);\r\n        }else{\r\n           // setSelected(selected.filter(p=>p._id !== data._id));\r\n           setSelected(selected.filter(p=>p !== data._id));\r\n        }\r\n    }\r\n\r\n    const handleSelectAll =(check)=>{\r\n        if(check === true){\r\n            setAllSelected(check);\r\n            //setSelected(pcrList)\r\n            setSelected(getOnlyIds(pcrList))\r\n        }else{\r\n            setAllSelected(check);\r\n            setSelected([]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {auth.loggedIn && patientsLoading && (<Loader></Loader>)}\r\n        {auth.loggedIn /*&& userType === 'hospitalAdmin' */? \r\n        <Container>\r\n           \r\n        <h2 style={{textAlign:'center', marginBottom:'40px', fontWeight:'700'}}>APROVE PCR RESULTS</h2>\r\n        {patientState.length === 0 ? <Card style={{backgroundColor:'#fca8a4', color:'#b73333', opacity:'0.5', padding:'10px'}}>No data</Card>:\r\n        <div>\r\n            <Row className='ml-3 mb-2'>\r\n                <Button\r\n                    value = {selected}\r\n                    disabled={selected.length === 0}\r\n                    onClick = { () => AproveSelected('accept')}\r\n                    className=\"btn btn-primary w-25 mr-2\"\r\n                >Confirm Selected</Button>\r\n                {/* <Button\r\n                    value = {selected}\r\n                    disabled={selected.length === 0}\r\n                    onClick = { () => AproveSelected('declined')}\r\n                    className=\"btn btn-danger w-25\"\r\n                    style={{opacity:'0.7'}}\r\n                >Decline Selected</Button> */}\r\n            </Row>\r\n\r\n            <Table striped bordered hover variant=\"light\">\r\n                <thead>\r\n                    <tr>\r\n                    <th><input \r\n                        type='checkBox'\r\n                        onChange ={(e) =>{\r\n                            let checked = e.target.checked\r\n                            setPatientState(patientState.map(p=>{\r\n                                p.select = checked;\r\n                                return p;\r\n                            }))\r\n                            handleSelectAll(checked)\r\n                        }}\r\n                        checked={allSelected}\r\n                    /></th>\r\n                    <th>Name</th>\r\n                    {/* <th>Age</th> */}\r\n                    <th>Telephone</th>\r\n                    <th>PCR Result</th>\r\n                    <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {patientState.map( p =>\r\n                    \r\n                        <tr>\r\n                            {/* <td>{p._id}</td> */}\r\n                            <td><input \r\n                                type='checkBox' \r\n                                onChange={(e) =>{\r\n                                    let checked = e.target.checked;\r\n                                    handleSelected(checked, p)\r\n                                    setPatientState(patientState.map( data=>{\r\n                                        if(data._id == p._id){\r\n                                            data.select = checked;\r\n                                        }\r\n                                        return data;\r\n                                    }))\r\n                                }}\r\n                                checked ={p.select}\r\n                            /></td>\r\n                            <td>{p.name}</td>\r\n                            {/* <td>{p.name}</td> */}\r\n                            <td>{p.telephone}</td>\r\n                            <td>{p.result}</td>\r\n                            <td>\r\n                                <Row>\r\n                                    <Button \r\n                                        value = {p._id}\r\n                                        onClick = { () => Aproval('accept', p._id)}\r\n                                        className=\"btn btn-primary mr-2 ml-2 text-center\"\r\n                                        style={{width:'80%'}}>Confirm</Button>\r\n                                    {/* <Button \r\n                                        value = {p._id}\r\n                                        style={{opacity:'0.8'}}\r\n                                        onClick = { () => Aproval('declined',p._id)}\r\n                                        className=\"btn btn-danger text-center\"\r\n                                        style={{width:'40%',opacity:'0.7'}}>Decline</Button> */}\r\n                                </Row>\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n        </div> \r\n        }\r\n      \r\n\r\n        {/* <Pagination\r\n            itemsCount = {pcrList.length} \r\n            pageSize = {pageSize} \r\n            currentPage = {currentPage}\r\n            onPageChange = {(page) => {\r\n                setCurrentPage(page);\r\n                setPaginated(paginate(pcrList, page, pageSize));\r\n            }}\r\n        /> */}\r\n        \r\n        </Container>\r\n         : history.goBack()/*window.location='/'*/}\r\n        \r\n    </>\r\n    )\r\n}\r\n\r\nexport default AprovePcrResults\r\n\r\nfunction getOnlyIds(pcrList){\r\n    let list =[]\r\n\r\n    if(pcrList){\r\n        if ( pcrList.length === 0) return list;\r\n\r\n        for ( let i =0; i<= pcrList.length-1 ; i++){\r\n            list.push(pcrList[i]._id)\r\n        }\r\n\r\n        return list;\r\n    }\r\n    //console.log(list)\r\n    return list;\r\n}\r\n\r\nfunction objectDestructure ( pcr, type){\r\n    let newList = \"\"\r\n    if(typeof(pcr) === 'undefined' || pcr.length === 0){\r\n        return newList\r\n    } \r\n\r\n    const { name, contactNumber } = pcr\r\n    if(name){\r\n        if(type === \"name\"){\r\n            const { firstName , lastName } = pcr.name;\r\n            const patientName = firstName + \" \" + lastName\r\n           // console.log(patientName)\r\n            return patientName;\r\n        }\r\n    }\r\n    if(contactNumber){\r\n        if(type === \"tel\"){\r\n            return contactNumber\r\n        }\r\n    }\r\n    else{\r\n        return newList\r\n    }\r\n}\r\n","\r\nimport {Form, Button, Col, Row} from 'react-bootstrap';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Container from '@mui/material/Container';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addWard} from '../../../store/entities/hospitals';\r\n\r\nexport default function AddWard(props){\r\n    const dispatch = useDispatch();\r\n    const auth = useSelector(state => state.auth);\r\n\r\n    const [ward_name, setWardName] = useState('');\r\n    const [total_beds, setTotalBeds] = useState(0);\r\n    const [admitted_patients, setAdmittedPatients] = useState(0);\r\n    const [empty_beds, setEmptyBeds] = useState(0);\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        // TODO: sign in action\r\n        let ward= {\r\n            name: ward_name,\r\n            totalBeds: total_beds,\r\n            admittedPatients: admitted_patients,\r\n            emptyBeds: empty_beds\r\n        }\r\n\r\n        dispatch(addWard())\r\n    };\r\n\r\nreturn (\r\n              <Container maxWidth=\"sm\" >\r\n                  <Box sx={{ bgcolor: '#cfe8fc', height: '100vh' }}>\r\n                  <br />\r\n                      <div class=\"col-10 mx-auto banner text-center\">\r\n                          <h3 class=\"text-capitalize\">\r\n                              <strong class=\"banner-title\">Want to Add new Ward?</strong></h3>\r\n                  \r\n                  <Form className=\"form\" onSubmit={submitHandler}>\r\n                      <Form.Row>\r\n                      <Form.Group as={Col} controlId='ward_name'>\r\n                      <Form.Label class=\"float-left\" className = 'form-label'><strong>WARD NAME:</strong></Form.Label>\r\n                      <Form.Control \r\n                          type='text'\r\n                          id='ward_name' \r\n                          onChange={(e) => setWardName(e.target.value)}\r\n                          placeholder='Enter Ward Name'\r\n                          required\r\n                      />\r\n                      </Form.Group>\r\n\r\n                      <Form.Group as={Col} controlId='total_beds'>\r\n                      <Form.Label class=\"float-left\" className = 'form-label'><strong>TOTAL BEDS:</strong></Form.Label>\r\n                      <Form.Control \r\n                          type='number'\r\n                          id='total_beds' \r\n                          onChange={(e) => setTotalBeds(e.target.value)}\r\n                          placeholder='Enter Total Number of Beds'\r\n                          required\r\n                      />\r\n                      </Form.Group>\r\n                     \r\n                      <Form.Group as={Col} controlId='admitted_patients'>\r\n                      <Form.Label class=\"float-left\" className = 'form-label'><strong>TOTAL ADMITTED PATIENTS:</strong></Form.Label>\r\n                      <Form.Control \r\n                          type='number'\r\n                          id='total_beds' \r\n                          onChange={(e) => setAdmittedPatients(e.target.value)}\r\n                          placeholder='Enter Total Number of Beds'\r\n                          required\r\n                      />\r\n                      </Form.Group>\r\n\r\n                      <Form.Group as={Col} controlId='empty_beds'>\r\n                      <Form.Label class=\"float-left\" className = 'form-label'><strong>EMPTY BEDS:</strong></Form.Label>\r\n                      <Form.Control \r\n                          type='number'\r\n                          id='empty_beds'  \r\n                          onChange={(e) => setEmptyBeds(e.target.value)}\r\n                          placeholder='Enter Number of Empty Beds'\r\n                          required\r\n                      />\r\n                      </Form.Group>\r\n                      </Form.Row>\r\n                      <br/>\r\n                      <Button variant=\"primary\" type=\"submit\">Submit</Button>\r\n                      \r\n                  </Form>\r\n                  </div>\r\n                  </Box>\r\n              </Container>\r\n                        \r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://localhost:8000/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n  return http.get(\"/hospital/wards\");\r\n};\r\n\r\nconst get = (id) => {\r\n  return http.get(`/hospital/wards/${id}`);\r\n};\r\n\r\nconst create = (data) => {\r\n  return http.post(\"/hospital/wards\", data);\r\n};\r\n\r\nconst update = (id, data) => {\r\n  return http.put(`/hospital/wards/${id}`, data);\r\n};\r\n\r\nconst remove = (id) => {\r\n  return http.delete(`/hospital/wards/${id}`);\r\n};\r\n\r\nconst removeAll = () => {\r\n  return http.delete(`/hospital/wards`);\r\n};\r\n\r\nconst findByTitle = (ward_name) => {\r\n  return http.get(`/hospital/wards?ward_name=${ward_name}`);\r\n};\r\n\r\nconst WardService = {\r\n  getAll,\r\n  get,\r\n  create,\r\n  update,\r\n  remove,\r\n  removeAll,\r\n  findByTitle,\r\n};\r\n\r\nexport default WardService;","import React, { useState, useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"@fortawesome/fontawesome-free/css/all.css\";\r\nimport \"@fortawesome/fontawesome-free/js/all.js\";\r\nimport WardDataService from \"../../../services/WardService\";\r\nimport { Link} from 'react-router-dom';\r\n\r\nconst Ward = props => {\r\n  const initialWardState = {\r\n    id: null,\r\n    ward_name: \"\",\r\n    description: \"\",\r\n    total_beds: \"\",\r\n  };\r\n  const [currentWard, setCurrentWard] = useState(initialWardState);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const getWard = id => {\r\n    WardDataService.get(id)\r\n      .then(response => {\r\n        setCurrentWard(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWard(props.match.params.id);\r\n  }, [props.match.params.id]);\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n    setCurrentWard({ ...currentWard, [name]: value });\r\n  };\r\n\r\n  const updateWard = () => {\r\n    WardDataService.update(currentWard.id, currentWard)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        setMessage(\"The ward was updated successfully!\");\r\n        alert('Updated: ' + this.state);\r\n        \r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const deleteWard = () => {\r\n    WardDataService.remove(currentWard.id)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        props.history.push(\"/hospital/wards\");\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <><div>\r\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n        <a /**href=\"/hospital/wards\" */className=\"navbar-brand\">\r\n          Wards\r\n        </a>\r\n        <div className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item\">\r\n            <Link to={\"/hospital/wards\"} className=\"nav-link\">\r\n              Wards\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link to={\"/hospital/add_wards\"} className=\"nav-link\">\r\n              Add Wards\r\n            </Link>\r\n          </li>\r\n        </div>\r\n      </nav></div>\r\n    <br></br>\r\n    \r\n    <div>\r\n      {currentWard ? (\r\n        <div className=\"edit-form\">\r\n          <div class=\"container-sm border\">\r\n            <div class=\"row max-height justify-content-center align-items-center\">\r\n            <div class=\"col-10 mx-auto banner text-center\">\r\n                        <h3 class=\"text-capitalize\">\r\n                            <strong class=\"banner-title\">Edit Ward Details ?</strong></h3>\r\n                            <div class=\"card-body register-card-body\"></div>\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <label class=\"float-left\" htmlFor=\"title\">Ward Name:</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"ward_name\"\r\n                name=\"ward_name\"\r\n                value={currentWard.ward_name}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label class=\"float-left\" htmlFor=\"description\">Description:</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"description\"\r\n                name=\"description\"\r\n                value={currentWard.description}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label class=\"float-left\" htmlFor=\"total_beds\">Total no of beds:</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                id=\"total_beds\"\r\n                name=\"total_beds\"\r\n                value={currentWard.total_beds}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n\r\n          </form>\r\n          <div class=\"btn-group\">\r\n          <button \r\n            type=\"submit\"\r\n            class=\"btn btn-success\"\r\n            onClick={updateWard}\r\n          >\r\n            Update\r\n          </button> </div>\r\n          <div class=\"btn-group\">\r\n          <button \r\n          type= \"button\"\r\n          class=\"btn btn-danger\"\r\n          onClick={deleteWard}>\r\n            Delete\r\n          </button></div></div></div></div>\r\n          <p>{message}</p>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <br />\r\n          <p>Please click on a Ward...</p>\r\n        </div>\r\n      )}\r\n    </div></>\r\n  );\r\n};\r\n\r\nexport default Ward","import React, { useEffect, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { getAllWards, getWardsLoadingStatus, loadWards/*, updateWard,addWard*/, deleteWard} from '../../../store/entities/hospitals';\r\nimport { updateWard, addWard } from \"../../../store/auth\";\r\nimport { toastAction } from '../../../store/toastActions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport CRUDTable, {\r\n  Fields,\r\n  Field,\r\n  CreateForm,\r\n  UpdateForm,\r\n  DeleteForm,\r\n  Pagination \r\n} from \"react-crud-table\";\r\n\r\n// Component's Base CSS\r\nimport \"./wardList.css\";\r\n//import { update } from \"../../../../../backend/models/userModel\";\r\n\r\nconst DescriptionRenderer = ({ field }) => <textarea {...field} />;\r\n\r\n\r\n// let wards = [\r\n//   {\r\n//     ward_id: \"1\",\r\n//     ward_no: 1,\r\n//   .name: \"Ward 1\",\r\n//     description: \"Labour Ward 1\",\r\n//     totalBeds: \"45\"\r\n//   },\r\n//   {\r\n//     ward_id: \"2\",\r\n//     ward_no: 2,\r\n//   .name: \"Ward 2\",\r\n//     description: \"Labour Ward 2\",\r\n//     totalBeds: \"19\"\r\n//   },\r\n//   {\r\n//     ward_id: \"3\",\r\n//     ward_no: 3,\r\n//   .name: \"Ward 3\",\r\n//     description: \"Pediatric Ward 1\",\r\n//     totalBeds: \"45\"\r\n//   },\r\n//   {\r\n//     ward_no: 4,\r\n//   .name: \"Ward 4\",\r\n//     description: \"Pediatric Ward 2\",\r\n//     totalBeds: \"34\"\r\n//   }\r\n// ];\r\n\r\n// const SORTERS = {\r\n//   NUMBER_ASCENDING: mapper => (a, b) => mapper(a) - mapper(b),\r\n//   NUMBER_DESCENDING: mapper => (a, b) => mapper(b) - mapper(a),\r\n//   STRING_ASCENDING: mapper => (a, b) => mapper(a).localeCompare(mapper(b)),\r\n//   STRING_DESCENDING: mapper => (a, b) => mapper(b).localeCompare(mapper(a))\r\n// };\r\n\r\n// const getSorter = data => {\r\n//   const mapper = x => x[data.field];\r\n//   let sorter = SORTERS.STRING_ASCENDING(mapper);\r\n\r\n//   if (data.field === \"ward_no\") {\r\n//     sorter =\r\n//       data.direction === \"ascending\"\r\n//         ? SORTERS.NUMBER_ASCENDING(mapper)\r\n//         : SORTERS.NUMBER_DESCENDING(mapper);\r\n//   } else {\r\n//     sorter =\r\n//       data.direction === \"ascending\"\r\n//         ? SORTERS.STRING_ASCENDING(mapper)\r\n//         : SORTERS.STRING_DESCENDING(mapper);\r\n//   }\r\n\r\n//   return sorter;\r\n// };\r\n\r\n\r\n// let count = wards.length;\r\n// console.log(count)\r\n// const service = {\r\n//   fetchItems: payload => {\r\n//     const { activePage, itemsPerPage } = payload.pagination;\r\n//     const start = (activePage - 1) * itemsPerPage;\r\n//     const end = start + itemsPerPage;\r\n//     let result = Array.from(wards);\r\n//     // result = result.sort(getSorter(payload.sort));\r\n//     return Promise.resolve(result.slice(start, end));\r\n//   },\r\n//   fetchTotal: payload => {\r\n//     return Promise.resolve(wards.length);\r\n//   },\r\n//   create: ward => {\r\n//     count += 1;\r\n//     wards.push({\r\n//       ...ward,\r\n//       ward_no: count\r\n//     });\r\n//     return Promise.resolve(ward);\r\n//   },\r\n//   update: data => {\r\n//     const ward = wards.find(t => t.ward_no === data.ward_no);\r\n//     ward.name = data.name;\r\n//     ward.description = data.description;\r\n//     ward.totalBeds = data.totalBeds;\r\n//   //  updateData(ward)\r\n//     return Promise.resolve(ward);\r\n//   },\r\n//   delete: data => {\r\n//     const ward = wards.find(t => t.ward_no === data.ward_no);\r\n//     wards = wards.filter(t => t.ward_no !== ward.ward_no);\r\n//     return Promise.resolve(ward);\r\n//   }\r\n// };\r\n\r\n// const styles = {\r\n//   container: { margin: \"auto\", width: \"max-content\" }\r\n// };\r\n\r\nexport default function WardsList() {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector(state => state.auth);\r\n  const { admin, user } = userDetails.data.user\r\n  const { wards } = admin.hospital\r\n\r\n  const [wardAddState, setWardAddState] = useState(false)\r\n  const [wardUpdateState, setWardUpdateState] = useState(false)\r\n  const [wardDeleteState, setWardDeleteState] = useState(false)\r\n\r\n\r\nlet count = wards.length;\r\nconst service = {\r\n  fetchItems: payload => {\r\n    const { activePage, itemsPerPage } = payload.pagination;\r\n    const start = (activePage - 1) * itemsPerPage;\r\n    const end = start + itemsPerPage;\r\n    let result = Array.from(wards);\r\n    // result = result.sort(getSorter(payload.sort));\r\n    return Promise.resolve(result.slice(start, end));\r\n  },\r\n  fetchTotal: payload => {\r\n    return Promise.resolve(wards.length);\r\n  },\r\n\r\n\r\n  // create: ward => {\r\n  //   count += 1;\r\n  //   wards.push({\r\n  //     ...ward,\r\n  //     ward_no: count\r\n  //   });\r\n  //   return Promise.resolve(ward);\r\n  // },\r\n  // update: data => {\r\n  //   const ward = wards.find(t => t._id === data._d);\r\n  //   ward.name = data.name;\r\n  //  // ward.description = data.description;\r\n  //   ward.totalBeds = data.totalBeds;\r\n  // //  updateData(ward)\r\n  //   return Promise.resolve(ward);\r\n  // },\r\n  // delete: data => {\r\n  //   const ward = wards.find(t => t.ward_no === data.ward_no);\r\n  //   wards = wards.filter(t => t.ward_no !== ward.ward_no);\r\n  //   return Promise.resolve(ward);\r\n  // }\r\n};\r\n\r\nconst styles = {\r\n  container: { margin: \"auto\", width: \"max-content\" }\r\n};\r\n\r\n function updateCurrentWard(ward){\r\n    const wardDetails = {\r\n       name: ward.name,\r\n       totalBeds: ward.totalBeds,\r\n    }\r\n\r\n    if(ward.totalBeds < ward.admittedPatients){\r\n       dispatch(toastAction({ message: \"No of Beds cannot be lass than admitted patients\" , type: 'error'}))\r\n    }\r\n    else{\r\n      dispatch(updateWard(wardDetails, ward._id))\r\n      setWardUpdateState(true)\r\n    }\r\n\r\n    return Promise.resolve(ward)\r\n }\r\n\r\n function addNewWard(ward){\r\n   const wardDetails = {\r\n      name: ward.name,\r\n      totalBeds: ward.totalBeds,\r\n   }\r\n   dispatch(addWard(wardDetails))\r\n   setWardAddState(true)\r\n   return Promise.resolve(ward)\r\n}\r\n\r\nfunction deleteCurrentWard(ward){\r\n   const wardDetails = {\r\n      name: ward.name,\r\n      totalBeds: ward.totalBeds,\r\n   }\r\n\r\n   if(ward.admittedPatients.length > 0){\r\n     dispatch(toastAction({ message: \"Invalid Action, Cannot delete patient admitted ward\" , type: 'error'}))\r\n   }\r\n   else{\r\n   // dispatch(toastAction({ message: \"Invalid Action, Cannot delete patient admitted ward\" , type: 'info'}))\r\n    //dispatch(deleteWard(wardDetails, ward.ward_id))\r\n    //setWardDeleteState(true)\r\n   }\r\n   return Promise.resolve(ward)\r\n}\r\n\r\n useEffect (() => {\r\n   if(userDetails.wardAdded && wardAddState){\r\n      setWardAddState(false)\r\n      dispatch(toastAction({ message: \"Ward Addes Successfully, Please Refresh Page...\" , type: 'info'}))\r\n   }\r\n   if(userDetails.wardUpdated && wardUpdateState){\r\n    setWardUpdateState(false)\r\n    dispatch(toastAction({ message: \"Ward Updated Successfully, Please Refresh Page...\" , type: 'info'}))\r\n   }\r\n   if(userDetails.wardDelete && wardDeleteState){\r\n    setWardDeleteState(false)\r\n    dispatch(toastAction({ message: \"Ward Deleted Successfully, Please Refresh Page...\" , type: 'info'}))\r\n   }\r\n },[userDetails])\r\n\r\n\r\nreturn (\r\n  <div style={styles.container}>\r\n    <CRUDTable\r\n      caption=\"WARDS\"\r\n      fetchItems={payload => service.fetchItems(payload)}\r\n    >\r\n      <Fields>\r\n        {/* <Field name=\"ward_no\" label=\"WARD NO\" hideInCreateForm /> */}\r\n        <Field name=\"name\" label=\"WARD NAME\" placeholder=\"Enter Ward Name\" />5\r\n        <Field name=\"totalBeds\" type=\"number\" label=\"TOTAL BEDS\" placeholder=\"Enter Total number of Beds\" />\r\n      </Fields>\r\n\r\n      \r\n      <CreateForm\r\n        Ward Name=\"Ward Creation\"\r\n        message=\"Create a new ward!\"\r\n        trigger=\"ADD NEW WARDS\"\r\n        onSubmit={ward => addNewWard(ward)}\r\n        submitText=\"CREATE\"\r\n        validate={values => {\r\n          const errors = {};\r\n          if (!values.name) {\r\n            errors.name = \"Please, provide ward's Ward Name\";\r\n          }\r\n\r\n          return errors;\r\n        }}\r\n      />\r\n\r\n      <UpdateForm\r\n        title=\"Ward Update Process\"\r\n        message=\"Update ward\"\r\n        trigger=\"UPDATE\"\r\n       // onSubmit={ward => service.update(ward)}\r\n        onSubmit = { ward => updateCurrentWard(ward)}\r\n        submitText=\"Update\"\r\n        validate={values => {\r\n          const errors = {};\r\n\r\n          // if (!values.ward_no) {\r\n          //   errors.ward_no = \"Please, provide Ward Number\";\r\n          // }\r\n\r\n          if (!values.name) {\r\n            errors.name = \"Please, provide ward's Ward Name\";\r\n          }\r\n\r\n\r\n          return errors;\r\n        }}\r\n      />\r\n\r\n      <DeleteForm\r\n        title=\"Ward Delete Process\"\r\n        message=\"Are you sure you want to delete the Ward?\"\r\n        trigger=\"DELETE\"\r\n        onSubmit={ward => deleteCurrentWard(ward)}\r\n        submitText=\"Delete\"\r\n        validate={values => {\r\n          const errors = {};\r\n          // if (!values.ward_no) {\r\n          //   errors.ward_no = \"Please, provide Ward Number\";\r\n          // }\r\n          return errors;\r\n        }}\r\n      />\r\n      <Pagination\r\n        itemsPerPage={3}\r\n        fetchTotalOfItems={payload => service.fetchTotal(payload)}\r\n      />\r\n    </CRUDTable>\r\n  </div>\r\n);\r\n\r\n      }\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n// import LoadingBox from '../components/LoadingBox';\r\n// import MessageBox from '../components/MessageBox';\r\nimport {Form, Button} from 'react-bootstrap';\r\nimport { login, getLoggedInStatus } from './../store/auth';\r\nimport { toastAction } from './../store/toastActions';\r\n//import User from '../../../backend/models/userModel';\r\n//import { signin } from '../actions/userAction';\r\n\r\nexport default function SigninScreen(props) {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n\r\n//   const redirect = props.location.search\r\n//     ? props.location.search.split('=')[1]\r\n//     : '/';\r\n\r\n//   const userSignin = useSelector((state) => state.userSignin);\r\n    //  const { data, loading, error } = userSignin;\r\n\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const submitHandler = (e) => {\r\n\r\n    const data ={\r\n        email: email,\r\n        password: password\r\n    }\r\n    e.preventDefault();\r\n    // TODO: sign in action\r\n\r\n    dispatch(login(data));\r\n  };\r\n\r\n    const loggedIn = useSelector(getLoggedInStatus)\r\n\r\n    const userDetails = useSelector(state => state.auth.data);\r\n    const auth = userDetails\r\n\r\n    // let auth = \"\";\r\n    // if(userDetails.loggedIn){\r\n    //   const { user } = userDetails.data.user\r\n    //   auth = user\r\n    // }\r\n\r\n    //console.log(auth.user.role)\r\n    //console.log(admin)\r\n\r\n    \r\n    useEffect(() => {\r\n        if (loggedIn === true) {\r\n           //props.history.push(redirect);\r\n          // console.log(auth.user.user)\r\n           // console.log('logged in suceessfully');\r\n            dispatch(toastAction({ message: \"Logged in Success...\", type: 'info' }));\r\n            if(auth.user.user.role === 'hospitalAdmin' || 'hospital user'){\r\n               window.location ='/hospital/dashboard'\r\n            }\r\n             if(auth.user.user.role === 'patient'){\r\n               window.location =`/hospital/patientProfile/${auth.user.user._id}`\r\n            }\r\n             if(auth.user.user.role === 'admin'){\r\n              window.location ='/healthMinistry/dashboard'\r\n            }\r\n           /// ;\r\n        }else{\r\n           // console.log('not logged in suceessfully');\r\n        }\r\n   },);\r\n\r\n  return (\r\n    <div>\r\n      <Form className=\"form\" onSubmit={submitHandler}>\r\n        <div>\r\n          <h1><strong class=\"banner-title\" >SIGN IN</strong></h1>\r\n        </div>\r\n        {/* {loading && <LoadingBox></LoadingBox>}\r\n        {error && <MessageBox variant=\"danger\">{error}</MessageBox>} */}\r\n        <div>\r\n          <label htmlFor=\"email\">Email address:</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            placeholder=\"Enter email\"\r\n            required\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          ></input>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"password\">Password:</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            placeholder=\"Enter password\"\r\n            required\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          ></input>\r\n        </div>\r\n        <div>\r\n          <label />\r\n          <Button className=\"primary\" type=\"submit\">\r\n            Sign In\r\n          </Button>\r\n        </div>\r\n\r\n        <div>\r\n          <Link to={{ pathname :\"/forgotPassword\" }}>Forgot Password</Link>\r\n          {/* <a>Forgot Password</a> */}\r\n        </div>\r\n      </Form>\r\n    </div>\r\n  );\r\n}","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { logout} from '../store/auth';\r\nimport { toastAction } from './../store/toastActions';\r\n\r\nconst Logout = ({ history }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(logout());\r\n        window.location = '/';\r\n       // dispatch(toastAction({ message: \"Logout Successfull...\", type: 'info' }))\r\n    });\r\n\r\n    return null\r\n}\r\n \r\nexport default Logout;","import React, {useEffect, useState} from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TextField from '@mui/material/TextField';\r\nimport { AddCircleOutline} from \"@material-ui/icons\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAllHospitals, getHospitalLoadingStatus, loadHospitals} from '../../store/entities/hospitals';\r\nimport './hospitals.css';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650\r\n  }\r\n});\r\n\r\nexport default function Hospitals() {\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const dispatch = useDispatch()\r\n  const auth = useSelector(state => state.auth);\r\n//  console.log(auth)\r\n\r\n  const hospital = useSelector(getAllHospitals)\r\n  const hospitalsLoading = useSelector(getHospitalLoadingStatus);\r\n\r\n  const [data, setData] = useState(hospital);\r\n  const [searchKey, setSearchKey] = useState('');\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    dispatch(loadHospitals())\r\n\r\n},[dispatch, hospital])\r\n\r\n  return (\r\n    <Paper sx={{ width: '100%', overflow: 'hidden' }}>\r\n      <TableContainer sx={{ maxHeight: 600 }}>\r\n      <Link to=\"/healthMinistry/addHospital\"><button className=\"wardAddButton\"><AddCircleOutline/>Add New Hospital</button></Link>\r\n      <TextField id=\"search\" label=\"Search ................\" variant=\"filled\" type=\"text\" \r\n      onChange= {(event) => {\r\n        setSearchKey(event.target.value);\r\n      }}\r\n      />\r\n    <Table className={classes.table} aria-label=\"simple table\">\r\n          <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"left\">NAME</TableCell>\r\n            <TableCell align=\"left\">CONTACT</TableCell>\r\n            <TableCell align=\"left\">DISTRICT</TableCell>\r\n            <TableCell align=\"left\">CITY</TableCell>\r\n            <TableCell align=\"left\">PROVINCE</TableCell>\r\n            <TableCell align=\"left\">ACTION</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data\r\n          .filter((row)=>{\r\n            if (searchKey ==\"\"){\r\n              return row\r\n            }else if(row.address.district.toLowerCase().includes(searchKey.toLowerCase())){\r\n              return row\r\n            }else if(row.address.province.toLowerCase().includes(searchKey.toLowerCase())){\r\n              return row\r\n            }else if(row.name.toLowerCase().includes(searchKey.toLowerCase())){\r\n              return row\r\n            }else if(row.address.city.toLowerCase().includes(searchKey.toLowerCase())){\r\n              return row\r\n          }})\r\n          .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n          .map(row => (\r\n            <TableRow key={row._id}>\r\n              <TableCell align=\"left\">{row.name}</TableCell>\r\n              <TableCell align=\"left\">0{row.Contact[0]}</TableCell>\r\n              <TableCell align=\"left\">{row.address.district}</TableCell>\r\n              <TableCell align=\"left\">{row.address.city}</TableCell>\r\n              <TableCell align=\"left\">{row.address.province}</TableCell>\r\n\r\n              <>\r\n              <TableCell align=\"left\">\r\n                <Link to={\"addHospitalAdmin/\"+row._id}>\r\n                <button className=\"wardListEdit\" aria-label=\"edit\" >\r\n                  <AddCircleOutline/>Add Hospital Admin \r\n                </button></Link>\r\n              </TableCell></>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n    <TablePagination\r\n        rowsPerPageOptions={[5, 10, 20]}\r\n        component=\"div\"\r\n        count={data.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n","import React,  {useEffect} from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { DeleteOutline, AddCircleOutline, Visibility} from \"@material-ui/icons\";\r\nimport {Link} from \"react-router-dom\";\r\nimport './staffList.css';\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAllStaff, getAllUsers, getUserLoadingStatus, loadUsers } from \"../../../store/entities/users\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650\r\n  }\r\n});\r\n\r\nexport default function StaffList() {\r\n  const dispatch = useDispatch()\r\n\r\n  const user = useSelector(getAllUsers)\r\n  const usersLoading = useSelector(getUserLoadingStatus);\r\n\r\n  const [data, setData] = useState(user)\r\n  const classes = useStyles();\r\n\r\n  const handleDelete = (staff_id)=>{\r\n    setData(data.filter((item)=>item.staff_id !== staff_id));\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(loadUsers())\r\n\r\n},[dispatch, user])\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Link to=\"/hospital/addHospitalStaff\"><button className=\"staffAddButton\"><AddCircleOutline/> Add New Staff</button></Link>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"left\">First Name</TableCell>\r\n            <TableCell align=\"left\">Last name</TableCell>\r\n            <TableCell align=\"left\">Email</TableCell>\r\n            <TableCell align=\"left\">Actions</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data\r\n          .filter(row=>row.role === 'hospital user')\r\n          .map(row => (\r\n            <TableRow key={row._id}>\r\n              <TableCell align=\"left\">{row.name.firstName}</TableCell>\r\n              <TableCell align=\"left\">{row.name.lastName}</TableCell>\r\n              <TableCell align=\"left\">{row.email}</TableCell>\r\n              <>\r\n              <TableCell align=\"left\">\r\n                <DeleteOutline className=\"staffListDelete\" onclick={()=>handleDelete(data.staff_id)}/>\r\n              </TableCell></>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}","import React, {useEffect, useState} from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Table, Container, Button, Row, Card} from 'react-bootstrap'\r\nimport Loader from '../../components/Loader'\r\nimport {getAllPcrs, loadPcrs, updatePcrAproval, getPcrLoadingStatus} from '../../store/entities/pcr';\r\nimport { getAllHospitals, getHospitalLoadingStatus, loadHospitals} from '../../store/entities/hospitals';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst ConfirmData = () => {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const auth = useSelector(state => state.auth);\r\n    const [userType, setUserType] = useState('')\r\n   // console.log(userType)\r\n\r\n    const hospital = useSelector(getAllHospitals)\r\n    const hospitalsLoading = useSelector(getHospitalLoadingStatus);\r\n\r\n  //  const patientsList = useSelector(getAllPcrs);\r\n  //  console.log(patientsList)\r\n\r\n    const [hospitalState, setHospitalState] = useState(hospital);\r\n    const [selected, setSelected] = useState([]);\r\n    console.log(selected)\r\n    const [allSelected, setAllSelected] = useState(false);\r\n   // const patientsLoading = useSelector(getPcrLoadingStatus);\r\n\r\n    useEffect(() => {\r\n       if(!auth.loggedIn){\r\n           window.location='/'\r\n       }\r\n       setUserType(auth.data.user.role)\r\n       dispatch(loadPcrs());\r\n\r\n        setHospitalState(\r\n            hospital.map( p=>{\r\n                return {\r\n                     select: false,\r\n                    _id: p._id,\r\n                    name: p.name,\r\n                    // age: p.age,\r\n                    // telephone:p.telephone,\r\n                    // result:p.result\r\n                    'newCases': 50,\r\n                    'deaths': 0,\r\n                    'recover': 22\r\n                }\r\n            })\r\n        )\r\n\r\n    },[dispatch])\r\n\r\n    const Aproval = (decision, patientId)=>{\r\n        // const updateAprove = {\r\n\r\n        //     ids: [\r\n        //         patientId\r\n        //     ],\r\n        //     token: auth.token\r\n        // }\r\n\r\n        // dispatch(updatePcrAproval(updateAprove));\r\n        // setHospitalState(hospitalState.filter(p=>p._id !== patientId))\r\n    }\r\n\r\n    const AproveSelected =(dicision) =>{\r\n    //     const updateAprove = {\r\n\r\n    //          ids : selected\r\n    //     }\r\n    //     console.log(updateAprove)\r\n    //     dispatch(updatePcrAproval(updateAprove));\r\n    //    // dispatch(updateTransferPatient(transferUpdate))\r\n    //     setSelected([]);\r\n    //     setPatientState(patientState.filter(p=>p.select === false))\r\n\r\n        //console.log(selected)\r\n    }\r\n\r\n    const handleSelected =(value, data)=>{\r\n        if(value === false && selected.length === hospital.length){\r\n            setAllSelected(false);\r\n        }\r\n        if(value === true && selected.length === hospital.length-1){\r\n            setAllSelected(true);\r\n        }\r\n        if(value === true){\r\n            let selectedList = [...selected]\r\n            let hospitalDetail = hospital.filter(p => p._id === data._id );\r\n            selectedList.push(hospitalDetail[0]);\r\n            setSelected(selectedList);\r\n        }else{\r\n            setSelected(selected.filter(p=>p._id !== data._id));\r\n          // setSelected(selected.filter(p=>p !== data._id));\r\n        }\r\n    }\r\n\r\n    const handleSelectAll =(check)=>{\r\n        if(check === true){\r\n            setAllSelected(check);\r\n            //setSelected(patientsList)\r\n            setSelected(hospital)\r\n        }else{\r\n            setAllSelected(check);\r\n            setSelected([]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {auth.loggedIn && hospitalsLoading && (<Loader></Loader>)}\r\n        {auth.loggedIn /*&& userType === 'admin'*/ ? \r\n        <Container>\r\n           \r\n        <h2 style={{textAlign:'center', marginBottom:'40px', fontWeight:'700'}}>APROVE UPDATED DETAILS</h2>\r\n        {hospitalState.length === 0 ? <Card style={{backgroundColor:'#fca8a4', color:'#b73333', opacity:'0.5', padding:'10px'}}>No data</Card>:\r\n        <div>\r\n            <Row className='ml-3 mb-2'>\r\n                <Button\r\n                    value = {selected}\r\n                    disabled={selected.length === 0}\r\n                    onClick = { () => AproveSelected('accept')}\r\n                    className=\"btn btn-primary w-25 mr-2\"\r\n                >Confirm Selected</Button>\r\n                {/* <Button\r\n                    value = {selected}\r\n                    disabled={selected.length === 0}\r\n                    onClick = { () => AproveSelected('declined')}\r\n                    className=\"btn btn-danger w-25\"\r\n                    style={{opacity:'0.7'}}\r\n                >Decline Selected</Button> */}\r\n            </Row>\r\n\r\n            <Table striped bordered hover variant=\"light\">\r\n                <thead>\r\n                    <tr>\r\n                    <th><input \r\n                        type='checkBox'\r\n                        onChange ={(e) =>{\r\n                            let checked = e.target.checked\r\n                            setHospitalState(hospitalState.map(p=>{\r\n                                p.select = checked;\r\n                                return p;\r\n                            }))\r\n                            handleSelectAll(checked)\r\n                        }}\r\n                        checked={allSelected}\r\n                    /></th>\r\n                    <th>Name</th>\r\n                    <th>Total Cases</th>\r\n                    <th>Deaths</th>\r\n                    <th>Recovery</th>\r\n                    <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {hospitalState.map( p =>\r\n                    \r\n                        <tr>\r\n                            {/* <td>{p._id}</td> */}\r\n                            <td><input \r\n                                type='checkBox' \r\n                                onChange={(e) =>{\r\n                                    let checked = e.target.checked;\r\n                                    handleSelected(checked, p)\r\n                                    setHospitalState(hospitalState.map( data=>{\r\n                                        if(data._id == p._id){\r\n                                            data.select = checked;\r\n                                        }\r\n                                        return data;\r\n                                    }))\r\n                                }}\r\n                                checked ={p.select}\r\n                            /></td>\r\n                            <td>{p.name}</td>\r\n                            <td className='text-warning font-weight-bold'>{p.newCases}</td>\r\n                            <td className='text-danger font-weight-bold'>{p.deaths}</td>\r\n                            <td className='text-success font-weight-bold'>{p.recover}</td>\r\n                            <td>\r\n                                <Row>\r\n                                    <Button \r\n                                        value = {p._id}\r\n                                        onClick = { () => Aproval('accept', p._id)}\r\n                                        className=\"btn btn-primary mr-2 ml-2 text-center\"\r\n                                        style={{width:'80%'}}>Confirm</Button>\r\n                                    {/* <Button \r\n                                        value = {p._id}\r\n                                        style={{opacity:'0.8'}}\r\n                                        onClick = { () => Aproval('declined',p._id)}\r\n                                        className=\"btn btn-danger text-center\"\r\n                                        style={{width:'40%',opacity:'0.7'}}>Decline</Button> */}\r\n                                </Row>\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n        </div> \r\n        }\r\n      \r\n\r\n        {/* <Pagination\r\n            itemsCount = {patientsList.length} \r\n            pageSize = {pageSize} \r\n            currentPage = {currentPage}\r\n            onPageChange = {(page) => {\r\n                setCurrentPage(page);\r\n                setPaginated(paginate(patientsList, page, pageSize));\r\n            }}\r\n        /> */}\r\n        \r\n        </Container>\r\n         : history.goBack()/*window.location='/'*/}\r\n        \r\n    </>\r\n    )\r\n\r\n}\r\n\r\nexport default ConfirmData\r\n\r\n// function getOnlyIds(patientsList){\r\n//     let list =[]\r\n\r\n//     if ( patientsList.length === 0) return list;\r\n\r\n//     for ( let i =0; i<= patientsList.length-1 ; i++){\r\n//         list.push(patientsList[i]._id)\r\n//     }\r\n//     //console.log(list)\r\n//     return list;\r\n// }\r\n","import React, {useEffect, useState, Component} from 'react'\r\nimport { Container, Button, FormControl, InputGroup, Row, Card, Form} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toastAction } from '../../store/toastActions';\r\nimport { loadPatients, getAllPatients, getPatientsLoadingStatus, admitPatient, getPatientAdmitState } from '../../store/entities/patients';\r\n\r\nconst AdmitPatient = ({history}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const patientsDetails = useSelector(getAllPatients);\r\n    const patients = patientsDetails.list;\r\n\r\n    const patientAdmitSate = useSelector(getPatientAdmitState)\r\n    const [submitState, setSubmitSate] = useState(false)\r\n   // console.log(patients)\r\n\r\n    const auth = useSelector(state => state.auth);\r\n    const { admin, user } = auth.data.user\r\n    const {wards } = admin.hospital\r\n   // console.log(wards)\r\n    //console.log(admin)\r\n\r\n    const [searchKeyword, setSearchKeyword ] = useState('');\r\n    const [patientName, setPatientName] = useState();\r\n    console.log(patientName)\r\n    const [ward, setWard] = useState(wards[0].name);\r\n    //const [wardId, setWardId] = useState(wards[0]._id);\r\n  //  console.log(ward)\r\n    const [isKid, setIsKid] = useState(false)\r\n   // console.log(isKid)\r\n    const [patient, selectedPatient] = useState();\r\n\r\n    const serachPatient =() =>{\r\n        const filteredPatient = getFilteredSearchedPatients(patients, searchKeyword, isKid)\r\n        setPatientName(filteredPatient)\r\n        selectedPatient(filteredPatient)\r\n    }\r\n\r\n    const AdmitPatient =() =>{\r\n        if(patientName.length > 1){\r\n            dispatch(toastAction({ message: \"Please select only one patient\", type: 'error' }))\r\n        }\r\n        else{\r\n            if(patientName[0]){\r\n                const patientDetails = {\r\n                    patient: patientName[0]._id,\r\n                    ward : getWardId(wards, ward)\r\n                }\r\n                dispatch(admitPatient(patientDetails))\r\n                setSubmitSate(true)\r\n                console.log(patientDetails)\r\n            }\r\n            else{\r\n                const patientDetails = {\r\n                    patient: patientName._id,\r\n                    ward : getWardId(wards, ward)\r\n                }\r\n               dispatch(admitPatient(patientDetails))\r\n               setSubmitSate(true)\r\n               console.log(patientDetails)\r\n            }\r\n           \r\n           // dispatch(admitPatient(patientName[0]._id, ward))\r\n        }\r\n\r\n    }\r\n\r\n    // const selectPatient =(patient) => {\r\n\r\n    // }\r\n\r\n    // const handleSelected =(check) =>{\r\n    //     if(check === true){\r\n    //         setIsKid(true)\r\n    //     }if(check === false){\r\n    //         setIsKid(false)\r\n    //     }\r\n    // }\r\n\r\n    useEffect(() => {\r\n        if(!auth.loggedIn){\r\n           history.push('/')\r\n        }\r\n\r\n        if(patientAdmitSate.medicalHistory && submitState){\r\n            setSubmitSate(false)\r\n            dispatch(toastAction({ message: \"Patient admitted successfully\", type: 'info' }))\r\n        }\r\n        dispatch(loadPatients())\r\n    },[dispatch,patientAdmitSate, searchKeyword])\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <p className='m-3'>Check Whether Patient is Already Registered in the system</p>\r\n            <Row>\r\n                <div style={{width:'80%'}}>\r\n                    <InputGroup id = 'search-bar' style={{padding:'0 0 10px 0', color:'blue'}}>\r\n                    <FormControl\r\n                        className='textBox'\r\n                        placeholder=\"search patient by using name or NIC...\"\r\n                        aria-label=\"searchPatient\"\r\n                        aria-describedby=\"basic-addon2\"\r\n                        size = 'lg'\r\n                     value = {searchKeyword}\r\n                     onChange = { e => setSearchKeyword(e.target.value)}\r\n                    />\r\n                    </InputGroup>\r\n                </div>\r\n\r\n                <div style={{width: '15%',padding:'5px 10px'}}>\r\n                    <Button \r\n                        className='text-center'\r\n                        onClick= { ()=> serachPatient()}\r\n                    >Search</Button>\r\n                </div>\r\n            </Row>\r\n\r\n            <div>\r\n                <input \r\n                    type='checkbox'\r\n                    style={{width:'5%', marginTop:'5px', marginLeft:'50px'}}\r\n                    onChange={(e) =>{\r\n                        let checked = e.target.checked;\r\n                        setIsKid(checked)\r\n                    }}\r\n                />\r\n                <Form.Label className = 'form-label w-75'>IF Patient is kid add select in check box</Form.Label> \r\n            </div>\r\n            {patient && patient.length !==0 &&\r\n            <div> \r\n                {patient.length === 1 && \r\n                <Card style={{backgroundColor:'#0cce39', color:'#000f05', opacity:'0.5', padding:'10px', width:'80%'}}>\r\n                    {patientName[0].nic.nicno} is already registered patient\r\n                </Card>}\r\n\r\n                {patient.length > 1 && \r\n                <div>\r\n                    <p>There are more than one patient registered under this NIC number, Please select correct one</p>\r\n                    <Card style={{backgroundColor:'#0cce39', color:'#000f05', opacity:'0.5', padding:'10px', width:'80%'}}>\r\n                    {patient.map( p=> \r\n                                    <Button \r\n                                        className=\"btn btn-light\"\r\n                                        style={{width:'80%', borderRadius:'0px'}}\r\n                                        onClick={()=>setPatientName(p)}\r\n                                        >\r\n                                        {p.user.name.firstName + \" \" + p.user.name.lastName}\r\n                                    </Button>)}\r\n                    </Card>\r\n                </div>\r\n                }\r\n\r\n                <Form.Group className='mt-2 w-25'>\r\n                    <Form.Control onChange = {(e) => {\r\n                        if(e.target.value !== \"Select ward\"){\r\n                            setWard(e.target.value);\r\n                            //setWardId(e.target.value)\r\n                        }\r\n                    }} as=\"select\">\r\n                    {wards.map((c,index) => <option selected={index === 0? 'slected': null}>{`${c.name}`}</option>)}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <p>{ward} is selected</p>\r\n\r\n                <Button \r\n                    className='text-center my-2'\r\n                    onClick= { ()=> AdmitPatient()}\r\n                >Admit Patient</Button>\r\n\r\n            </div>}\r\n\r\n            {patientName && patientName.length ===0 &&\r\n            <div>\r\n                <Card style={{backgroundColor:'#fca8a4', color:'#b73333', opacity:'0.5', padding:'10px', width:'80%'}}>\r\n                    Not Found please register patient\r\n                </Card>\r\n                <Button \r\n                    className='text-center my-2'\r\n                    onClick= { ()=> history.push('/hospital/addPatient')}\r\n                >Register New Patient</Button>\r\n            </div>}\r\n\r\n\r\n           \r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default AdmitPatient\r\n\r\nfunction getFilteredSearchedPatients(patients, filterBy, isKid){\r\n    let name;\r\n    if(!isKid){\r\n        name =  patients.filter(p => \r\n            objectDestructure(p, \"nic\") === filterBy.toString()  && getAge(p) > 18\r\n         );\r\n        //  if(name.length === 1){\r\n        //     return name[0]\r\n        //  }\r\n         return name\r\n    }\r\n    else{\r\n        name =  patients.filter(p => \r\n            objectDestructure(p, \"nic\") === filterBy.toString() && getAge(p) < 18\r\n        );\r\n        // if(name.length === 1){\r\n        //     return name[0]\r\n        //  }\r\n        return name\r\n    }\r\n\r\n}\r\n\r\nfunction objectDestructure(patient, type){\r\n    let newList = \"\"\r\n    if(typeof(patient) === 'undefined' || patient.length === 0){\r\n        return newList\r\n    } \r\n\r\n    const { nic } = patient\r\n    if(nic){\r\n        if(type === \"nic\"){\r\n            const { nicno } = nic;\r\n            //console.log(nicno)\r\n            return nicno.toString()\r\n        }\r\n    }else{\r\n        return newList\r\n    }\r\n}\r\n\r\nfunction getAge(patient){\r\n    let age = null\r\n    if(typeof(patient) === 'undefined' || patient.length === 0){\r\n        return age\r\n    } \r\n\r\n    const { birthday } = patient.user\r\n    const onlyYear = birthday.split(\"/\")[0]\r\n    const currentYear = new Date().getFullYear()\r\n    age =  (currentYear - parseInt(onlyYear))\r\n    console.log(age)\r\n    return age\r\n}\r\n\r\nfunction getWardId(wards, wardName){\r\n    const wardId = wards.filter( p=> p.name === wardName)\r\n    //console.log(wardId)\r\n    return wardId[0]._id\r\n}\r\n","import React, {useEffect, useState, Component} from 'react'\r\nimport { Table, Container, Button, InputGroup, FormControl, Form} from 'react-bootstrap'\r\nimport { paginate } from '../../utils/paginate';\r\nimport Loader from '../../components/Loader'\r\nimport Pagination from '../../components/Pagination';\r\nimport {getAllPcrs, loadPcrs, getPcrLoadingStatus,changeStatus} from '../../store/entities/pcr';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nconst SearchPCR = ({history}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const auth = useSelector(state => state.auth);\r\n   // console.log(auth)\r\n\r\n    const pcrList = useSelector(getAllPcrs);\r\n    console.log(pcrList)\r\n\r\n    const pcrLoading = useSelector(getPcrLoadingStatus);\r\n    const [filtered, setFiltered] = useState(pcrList);\r\n\r\n    const pageSize = 5;\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    let [paginated, setPaginated] = useState(pcrList);\r\n\r\n    const [searchKeyword, setSearchKeyword ] = useState('');\r\n\r\n    const status = ['select status', 'active', 'recovered', 'death']\r\n    const [patientStatus, setStatus] = useState('')\r\n    // console.log(patientStatus)\r\n\r\n    const changePatientStatus = (id) => {\r\n        console.log(patientStatus)\r\n        if(patientStatus === '' || patientStatus === 'select status'){\r\n            alert(\"Please select valid status\")\r\n        }\r\n        else{\r\n            dispatch(changeStatus(id, patientStatus))\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if(!auth.loggedIn){\r\n           history.push('/')\r\n        }\r\n        dispatch(loadPcrs())\r\n        const updatedSearchFiltered = getFilteredSearchedPatients(pcrList, searchKeyword)\r\n        setFiltered(updatedSearchFiltered);\r\n        setPaginated(paginate(updatedSearchFiltered, currentPage, pageSize));\r\n\r\n    },[dispatch, searchKeyword, pcrList])\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* {auth.loggedIn && patientsLoading && (<Loader></Loader>)}\r\n            {auth.loggedIn ?  */}\r\n            {(typeof(pcrList) === 'undefined' || pcrList.length == 0) && pcrLoading && (<Loader></Loader>)}\r\n            <Container>\r\n                <h3 style={{textAlign:'center', marginBottom:'40px', fontWeight:'700'}}>PCR DETAILS</h3>\r\n\r\n                <Button \r\n                    className=\"btn btn-success\"\r\n                    style={{float:'right',padding:'10px'}}\r\n                    onClick = { () => history.push('/hospital/addPcrResults')}\r\n                >+ add pcr result</Button>\r\n\r\n                <InputGroup id = 'search-bar' style={{padding:'0px 200px 20px 200px', color:'blue'}}>\r\n                            <FormControl\r\n                                className='textBox'\r\n                                placeholder=\"search pcr by using name or NIC...\"\r\n                                aria-label=\"searchPatient\"\r\n                                aria-describedby=\"basic-addon2\"\r\n                                size = 'lg'\r\n                                value = {searchKeyword}\r\n                                onChange = { e => setSearchKeyword(e.target.value)}\r\n                            />\r\n                </InputGroup>\r\n\r\n            {pcrList.length === 0 ? <h1>No data</h1>:\r\n\r\n            <Table striped bordered hover variant=\"light\">\r\n                <thead>\r\n                    <tr>\r\n                    <th>Name</th>\r\n                    <th>NIC</th>\r\n                    <th>Tel</th>\r\n                    <th>Result</th>\r\n                    <th>Status</th>\r\n                    <th>Action</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {paginated.map( p =>\r\n                        <tr>\r\n                            <td>\r\n                               {(objectDestructure(p , \"name\"))}\r\n                            </td>\r\n                            <td>{(objectDestructure(p , \"nic\"))}</td>\r\n                            <td>{p.contactNumber}</td>\r\n                            <td>{p.result}</td>\r\n                            {/* <td>{p.name}</td> */}\r\n                            <td>\r\n                                <Form.Label>{p.status || 'No status'}</Form.Label>\r\n                                <Form.Group>\r\n                                    <Form.Control onChange = {(e) => {\r\n                                        setStatus(e.target.value);\r\n                                    }} as=\"select\">\r\n                                    {status.map((c,index) => <option selected={index === 0? 'slected': null}>{`${c}`}</option>)}\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </td>\r\n                            <td>\r\n                                {//patientStatus && \r\n                                    <Button \r\n                                        value = {p._id}\r\n                                        onClick = { () => changePatientStatus(p._id)}\r\n                                        className=\"btn btn-primary\">Change</Button>\r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                    //)\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n\r\n            }\r\n\r\n            <Pagination\r\n                itemsCount = {filtered.length} \r\n                pageSize = {pageSize} \r\n                currentPage = {currentPage}\r\n                onPageChange = {(page) => {\r\n                    setCurrentPage(page);\r\n                    setPaginated(paginate(filtered, page, pageSize));\r\n                }}\r\n            />\r\n\r\n            </Container>\r\n            {/* : history.push('/')} */}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport function getFilteredSearchedPatients(pcr, filterBy){\r\n\r\n    if(typeof(pcr) === 'undefined' || pcr.length === 0){\r\n       return {}\r\n    }\r\n    return pcr.filter(p => objectDestructure(p, \"name\").toLowerCase().includes(filterBy) || getNic(p).includes(filterBy.toString()));\r\n}\r\n\r\nexport function objectDestructure ( pcr, type){\r\n    let newList = \"\"\r\n    if(typeof(pcr) === 'undefined' || pcr.length === 0){\r\n        return newList\r\n    } \r\n\r\n    if(type === \"name\"){\r\n        const { firstName , lastName } = pcr.name;\r\n        const patientName = firstName + \" \" + lastName\r\n        return patientName;\r\n    }\r\n    \r\n    if(type === \"nic\"){\r\n        const { nicno } = pcr.nic;\r\n            return nicno\r\n    }\r\n\r\n    if(type === \"tel\"){\r\n        const { contactNumber } = pcr;\r\n        return contactNumber\r\n    }\r\n}\r\n\r\nfunction getNic(patient){\r\n    const { nic } = patient\r\n    if(nic){\r\n        const {nicno} = nic\r\n        return nicno.toString()\r\n    }\r\n    return \"\"\r\n}\r\n\r\nexport default SearchPCR \r\n\r\n","import React, {useEffect, useState, Component} from 'react'\r\nimport { Table, Container, Button, InputGroup, FormControl, Card} from 'react-bootstrap'\r\nimport CommonListGroup from '../../components/common/CommonListGroup'\r\nimport { paginate } from '../../utils/paginate';\r\nimport Loader from '../../components/Loader'\r\nimport Pagination from '../../components/Pagination';\r\n//import { listPatients } from '../../actions/patientActions'\r\nimport { loadAdmittedPatients, getAllAdmittedPatients, getPatientsLoadingStatus, getAdmittedPatientsLoadingStatus} from '../../store/entities/patients';\r\nimport { useLocation, Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nconst AdmittedPatients = ({history}) => {\r\n    const dispatch = useDispatch()\r\n\r\n   // const auth = useSelector(state => state.auth);\r\n\r\n    const userDetails = useSelector(state => state.auth);\r\n  // console.log(userDetails)\r\n    // const { user } = userDetails.data.user\r\n    // const auth = user\r\n\r\n  //  console.log(auth)\r\n\r\n    const patients = useSelector(getAllAdmittedPatients);\r\n   // const patients = patientsDetails.list;\r\n   // const data = objectDestructure (patients);\r\n   // const {medicalHistory, nic, pcrTest, user, _id } = patientsDetails.list;\r\n    console.log(patients)\r\n    const patientsLoading = useSelector(getAdmittedPatientsLoadingStatus);\r\n\r\n  //  const location = useLocation()\r\n  //  let { category:passedCategory  } = location\r\n  //  if(!passedCategory) passedCategory = 'All'\r\n\r\n   // const AllCategories = ['All','Active', 'Recovered', 'Transffered', 'Deaths']\r\n   // const categories = AllCategories.filter(c=> c!== passedCategory)\r\n\r\n //   const [selectedCategory, setSelectedCategory] = useState(passedCategory);\r\n    const [filtered, setFiltered] = useState(patients);\r\n    //console.log(filtered)\r\n\r\n    const pageSize = 5;\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    let [paginated, setPaginated] = useState(patients);\r\n    //console.log(paginated)\r\n\r\n    const [searchKeyword, setSearchKeyword ] = useState('');\r\n\r\n\r\n    useEffect(() => {\r\n        if(!userDetails.loggedIn){\r\n           // window.location('/')\r\n           history.push('/')\r\n        }\r\n        dispatch(loadAdmittedPatients())\r\n\r\n        const updatedSearchFiltered = getFilteredSearchedPatients(patients, searchKeyword)\r\n       // const updatedFiltered = getFilteredPatients(updatedSearchFiltered, categories, selectedCategory);\r\n        setFiltered(updatedSearchFiltered);\r\n        setPaginated(paginate(updatedSearchFiltered, currentPage, pageSize));\r\n       // getFilteredSearchedPatients(patients, searchKeyword)\r\n       // console.log(searchKeyword)\r\n    },[searchKeyword])\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* {auth.loggedIn && patientsLoading && (<Loader></Loader>)}\r\n            {auth.loggedIn ?  */}\r\n            {(typeof(patients) === 'undefined' || patients.length == 0) && patientsLoading && (<Loader></Loader>)}\r\n            <Container>\r\n                <h3 style={{textAlign:'center', marginBottom:'40px', fontWeight:'700'}}>ADMITTED PATIENTS</h3>\r\n\r\n                <Button \r\n                    className=\"btn btn-success\"\r\n                    style={{float:'right',padding:'10px'}}\r\n                    onClick = { () => history.push('/hospital/admitPatient')}\r\n                >+ admit patient</Button>\r\n\r\n                <InputGroup id = 'search-bar' style={{padding:'0px 200px 20px 200px', color:'blue'}}>\r\n                            <FormControl\r\n                                className='textBox'\r\n                                placeholder=\"search patient by using name or NIC...\"\r\n                                aria-label=\"searchPatient\"\r\n                                aria-describedby=\"basic-addon2\"\r\n                                size = 'lg'\r\n                                value = {searchKeyword}\r\n                                onChange = { e => setSearchKeyword(e.target.value)}\r\n                            />\r\n                </InputGroup>\r\n\r\n                {/* <CommonListGroup \r\n                onSelect = {(category) => {\r\n                    setSelectedCategory(category);\r\n                    const updatedFiltered = getFilteredPatients(patients, AllCategories, category);\r\n                    setFiltered(updatedFiltered);\r\n                    setPaginated(paginate(updatedFiltered, 1, pageSize));\r\n                }} \r\n                defaultSelected ={passedCategory} selected={selectedCategory} \r\n                list={categories.map(c => c)}\r\n                /> */}\r\n\r\n            {patients.length === 0 ? <h1>No data</h1>:\r\n\r\n            <Table striped bordered hover variant=\"light\">\r\n                <thead>\r\n                    <tr>\r\n                    <th>Name</th>\r\n                    <th>Age</th>\r\n                    <th>Tel</th>\r\n                    <th>Address</th>\r\n                    {/* <th>Status</th> */}\r\n                    <th>Action</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {paginated.map( p =>\r\n                        <tr>\r\n                            <td>\r\n                               {(objectDestructure(p , \"name\"))}\r\n                            </td>\r\n                            <td>{(objectDestructure(p , \"age\"))}</td>\r\n                            <td>{(objectDestructure(p , \"tel\"))}</td>\r\n                            <td>{(objectDestructure(p , \"address\"))}</td>\r\n                            {/* <td>{p.name}</td> */}\r\n                            <td>\r\n                                <Button \r\n                                    value = {p._id}\r\n                                    onClick = { () => history.push(`/hospital/Profile/${p._id}`)}\r\n                                    className=\"btn btn-primary\">Profile</Button>\r\n                            </td>\r\n                        </tr>\r\n                    //)\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n\r\n            }\r\n\r\n            <Pagination\r\n                itemsCount = {filtered.length} \r\n                pageSize = {pageSize} \r\n                currentPage = {currentPage}\r\n                onPageChange = {(page) => {\r\n                    setCurrentPage(page);\r\n                    setPaginated(paginate(filtered, page, pageSize));\r\n                }}\r\n            />\r\n\r\n            </Container>\r\n            {/* : history.push('/')} */}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nfunction getFilteredPatients(patients, categories, filter){\r\n    const patient = patients.filter(c => c.currentMedicalHistory)\r\n    console.log(patient)\r\n    return patient\r\n\r\n  //  const category = categories.find(c => c === filter);\r\n   //return patients;\r\n}\r\n\r\nexport function getFilteredSearchedPatients(patients, filterBy){\r\n  //  console.log(patients)\r\n   // console.log(filterBy)\r\n    if(typeof(patients) === 'undefined' || patients.length === 0){\r\n       return {}\r\n    }\r\n    //return patients\r\n    //return patients.filter(p => p.user)\r\n    return patients.filter(p => objectDestructure(p, \"name\").toLowerCase().includes(filterBy) || getNic(p).includes(filterBy.toString()));\r\n    //return patients.filter(p => p.name.toLowerCase().includes(filterBy) //||\r\n        //p.description.toLowerCase().includes(filterBy.toLowerCase())\r\n       // console.log(p.name.toLowerCase())\r\n    //);\r\n}\r\n\r\nexport function objectDestructure ( patients, type){\r\n    let newList = \"\"\r\n    if(typeof(patients) === 'undefined' || patients.length === 0){\r\n        return newList\r\n    } \r\n\r\n    const { user } = patients\r\n    if(user){\r\n        if(type === \"name\"){\r\n            const { firstName , lastName } = user.name;\r\n            const patientName = firstName + \" \" + lastName\r\n            return patientName;\r\n        }\r\n        \r\n        if(type === \"age\"){\r\n            const { birthday } = user;\r\n            const date = new Date().getFullYear();\r\n            const birthYear = birthday.split(\"-\")[0]\r\n            return (date - birthYear)\r\n        }\r\n\r\n        if(type === \"tel\"){\r\n            const { contactNo } = user;\r\n            return contactNo\r\n        }\r\n        if(type === \"address\"){\r\n            const { city, line1, line2, province } = user.address;\r\n            return (city + \",\" + line1 + \",\" + line2 + \",\" + province)\r\n        }\r\n    }else{\r\n        return newList\r\n    }\r\n}\r\n\r\nfunction getNic(patient){\r\n    const { nic } = patient\r\n    if(nic){\r\n        const {nicno} = nic\r\n        return nicno.toString()\r\n    }\r\n    return \"\"\r\n}\r\n\r\nexport default AdmittedPatients\r\n\r\n","import React, {useEffect, useState} from 'react'\r\nimport {Container, Button, Card, Row, Col, Nav, Form, FormControl} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { forgotPassword, getEmailSentState } from '../store/entities/users'\r\nimport {  Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { toastAction } from './../store/toastActions';\r\n\r\nconst ForgotPassword = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const emailSentState = useSelector(getEmailSentState);\r\n\r\n    const [submitState, setSubmitState] = useState(false)\r\n\r\n    const [ schema, setSchema ] = useState({ \r\n        email : Yup.string().required('email is required...').matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i, \"Invalid Email. EX :- john@gmail.com\"),\r\n    });\r\n\r\n    const [initialValues, setInitialValues ] = useState({\r\n        email: ''\r\n    });\r\n\r\n    const submitForm = (values) => {\r\n        const {email} = values\r\n\r\n        const result = {\r\n            email: email\r\n        }\r\n\r\n        dispatch(forgotPassword(result))\r\n        setSubmitState(true)\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(emailSentState.isEmailSent && submitState){\r\n            setSubmitState(false)\r\n            dispatch(toastAction({ message: \"Email sent Successfully...\", type: 'info' }));\r\n        }\r\n    },[emailSentState ]);\r\n\r\n    return (\r\n        \r\n    <Container className=' formContainer mt-3'>\r\n    <Formik\r\n        validationSchema = {Yup.object().shape(schema)}\r\n        onSubmit = {submitForm}\r\n        initialValues = {initialValues}\r\n    >\r\n        {({\r\n            handleSubmit,\r\n            handleChange,\r\n            handleBlur,\r\n            values,\r\n            touched,\r\n            isValid,\r\n            dirty,\r\n            errors\r\n        }) => (\r\n        <Form noValidate onSubmit={handleSubmit}>\r\n        <h3 style={{textAlign:'center', fontWeight:'700'}}>FORGOT PASSWORD</h3>\r\n\r\n\r\n    <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n        <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n            <div className=\"set-animation from-left animate\">\r\n                <Form.Group controlId = 'firstName' className='m-2' style={{width:'100%'}}>\r\n                    <Form.Label className = 'form-label m-2'>Email</Form.Label>\r\n                        <Form.Control \r\n                            className='textBox'\r\n                            type='email'\r\n                            name='email'\r\n                            value={values.email}\r\n                            onChange={handleChange}\r\n                            placeholder='Email'\r\n                            isValid={touched.email && !errors.email}\r\n                            isInvalid={!!errors.email}\r\n                            size = {'lg'} \r\n                            autoComplete='disabled'\r\n                        />\r\n                        <FormControl.Feedback type='invalid'>{errors.email}</FormControl.Feedback>\r\n                </Form.Group>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n        <br/><br/>\r\n        <div class=\"col-md-12 text-center\">\r\n            <Button \r\n                type='submit'\r\n                className='mb-3'\r\n                style={{float:'center'}}\r\n            >\r\n            Submit\r\n            </Button>\r\n        </div>\r\n        </Form>\r\n        )}\r\n    </Formik>\r\n   </Container>\r\n  )\r\n}\r\n\r\nexport default ForgotPassword\r\n","import React, {useEffect, useState} from 'react'\r\nimport {Container, Button, Card, Row, Col, Nav, Form, FormControl} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { resetPassword, getPasswordResetState } from '../store/entities/users'\r\nimport {  Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { ref } from \"yup\";\r\nimport { toastAction } from './../store/toastActions';\r\nimport { logout} from '../store/auth';\r\n\r\nconst ResetPassword = ({match}) => {\r\n    const userDetails = useSelector(state => state.auth);\r\n\r\n    const dispatch = useDispatch()\r\n    const token = match.params.token\r\n    const [submitState, setSubmitState] = useState(false)\r\n\r\n    const resetPasswordState = useSelector(getPasswordResetState);\r\n\r\n    const [ schema, setSchema ] = useState({ \r\n        password : Yup.string().required('password is required...').matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{6,}$/, \"Password should atleast be of 6 characters. Should include atleast one simple letter, capital letter, special character and number\"),\r\n        confirmPassword : Yup.string().required(\"Please confirm your password\").oneOf([ref(\"password\")], \"Passwords do not match\")\r\n    });\r\n\r\n    const [initialValues, setInitialValues ] = useState({\r\n        password : '',\r\n        confirmPassword : ''\r\n    });\r\n\r\n    const submitForm = (values) => {\r\n        const {password, confirmPassword} = values\r\n\r\n        const result = {\r\n            password: password,\r\n            passwordConfirm: confirmPassword\r\n        }\r\n\r\n        dispatch(resetPassword(result, token))\r\n        setSubmitState(true)\r\n      //  dispatch(toastAction({ message: \"Password reset successfully...\", type: 'info' }));\r\n        // console.log(token)\r\n        // console.log(result)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(resetPasswordState.isPasswordReset && submitState){\r\n            setSubmitState(false)\r\n            dispatch(toastAction({ message: \"Password Reset Successfully...\", type: 'info' }));\r\n\r\n            if(userDetails.loggedIn){\r\n                dispatch(logout())\r\n                window.location = '/signin';\r\n            }\r\n            else{\r\n                window.location = '/signin'\r\n            }\r\n        }\r\n    },[resetPasswordState]);\r\n\r\n    return (\r\n        <Container className=' formContainer mt-3'>\r\n        <Formik\r\n            validationSchema = {Yup.object().shape(schema)}\r\n            onSubmit = {submitForm}\r\n            initialValues = {initialValues}\r\n        >\r\n            {({\r\n                handleSubmit,\r\n                handleChange,\r\n                handleBlur,\r\n                values,\r\n                touched,\r\n                isValid,\r\n                dirty,\r\n                errors\r\n            }) => (\r\n            <Form noValidate onSubmit={handleSubmit}>\r\n            <h3 style={{textAlign:'center', fontWeight:'700'}}>ADD NEW PASSWORD</h3>\r\n    \r\n    \r\n        <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n            <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                <div className=\"set-animation from-left animate\">\r\n                    <Form.Group controlId = 'password' className='m-2' style={{width:'100%'}}>\r\n                        <Form.Label className = 'form-label m-2'>Password</Form.Label>\r\n                            <Form.Control \r\n                                className='textBox'\r\n                                type='password'\r\n                                name='password'\r\n                                value={values.password}\r\n                                onChange={handleChange}\r\n                                placeholder='password'\r\n                                isValid={touched.password && !errors.password}\r\n                                isInvalid={!!errors.password}\r\n                                size = {'lg'} \r\n                                autoComplete='disabled'\r\n                            />\r\n                            <FormControl.Feedback type='invalid'>{errors.password}</FormControl.Feedback>\r\n                    </Form.Group>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                <div className=\"set-animation from-left animate\">\r\n                    <Form.Group controlId = 'confirmPassword' className='m-2' style={{width:'100%'}}>\r\n                        <Form.Label className = 'form-label m-2'>Confirm Password</Form.Label>\r\n                            <Form.Control \r\n                                className='textBox'\r\n                                type='password'\r\n                                name='confirmPassword'\r\n                                value={values.confirmPassword}\r\n                                onChange={handleChange}\r\n                                placeholder='confirm password'\r\n                                isValid={touched.confirmPassword && !errors.confirmPassword}\r\n                                isInvalid={!!errors.confirmPassword}\r\n                                size = {'lg'} \r\n                                autoComplete='disabled'\r\n                            />\r\n                            <FormControl.Feedback type='invalid'>{errors.confirmPassword}</FormControl.Feedback>\r\n                    </Form.Group>\r\n                </div>\r\n            </div>\r\n    \r\n        </div>\r\n    \r\n            <br/><br/>\r\n            <div class=\"col-md-12 text-center\">\r\n                <Button \r\n                    type='submit'\r\n                    className='mb-3'\r\n                    style={{float:'center'}}\r\n                >\r\n                Submit\r\n                </Button>\r\n            </div>\r\n            </Form>\r\n            )}\r\n        </Formik>\r\n       </Container>\r\n    )\r\n}\r\n\r\nexport default ResetPassword\r\n","import React, {useEffect, useState} from 'react'\r\nimport {Container, Button, Card, Row, Col, Nav, Form, FormControl} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { resetPassword, getPasswordResetState, resetPasswordLoggedIn } from '../store/entities/users'\r\nimport {  Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { ref } from \"yup\";\r\nimport { toastAction } from './../store/toastActions';\r\nimport { logout} from '../store/auth';\r\n\r\nconst ResetPasswordLoggedIn = ({match}) => {\r\n    const userDetails = useSelector(state => state.auth);\r\n\r\n    const dispatch = useDispatch()\r\n    const token = match.params.token\r\n    const [submitState, setSubmitState] = useState(false)\r\n\r\n    const resetPasswordState = useSelector(getPasswordResetState);\r\n\r\n    const [ schema, setSchema ] = useState({ \r\n        currentPassword : Yup.string().required('current password is required...'),\r\n        password : Yup.string().required('password is required...').matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{6,}$/, \"Password should atleast be of 6 characters. Should include atleast one simple letter, capital letter, special character and number\"),\r\n        confirmPassword : Yup.string().required(\"Please confirm your password\").oneOf([ref(\"password\")], \"Passwords do not match\")\r\n    });\r\n\r\n    const [initialValues, setInitialValues ] = useState({\r\n        currentPassword: '',\r\n        password : '',\r\n        confirmPassword : ''\r\n    });\r\n\r\n    const submitForm = (values) => {\r\n        const {currentPassword, password, confirmPassword} = values\r\n\r\n        const result = {\r\n            passwordCurrent : currentPassword,\r\n            password: password,\r\n            passwordConfirm: confirmPassword\r\n        }\r\n\r\n        dispatch(resetPasswordLoggedIn(result))\r\n        setSubmitState(true)\r\n      //  dispatch(toastAction({ message: \"Password reset successfully...\", type: 'info' }));\r\n        // console.log(token)\r\n        // console.log(result)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(resetPasswordState.isPasswordReset && submitState){\r\n            setSubmitState(false)\r\n            dispatch(toastAction({ message: \"Password Reset Successfully...\", type: 'info' }));\r\n\r\n            if(userDetails.loggedIn){\r\n                dispatch(logout())\r\n                window.location = '/signin';\r\n            }\r\n            else{\r\n                window.location = '/signin'\r\n            }\r\n        }\r\n    },[resetPasswordState]);\r\n\r\n    return (\r\n        <Container className=' formContainer mt-3'>\r\n        <Formik\r\n            validationSchema = {Yup.object().shape(schema)}\r\n            onSubmit = {submitForm}\r\n            initialValues = {initialValues}\r\n        >\r\n            {({\r\n                handleSubmit,\r\n                handleChange,\r\n                handleBlur,\r\n                values,\r\n                touched,\r\n                isValid,\r\n                dirty,\r\n                errors\r\n            }) => (\r\n            <Form noValidate onSubmit={handleSubmit}>\r\n            <h3 style={{textAlign:'center', fontWeight:'700'}}>CHANGE PASSWORD</h3>\r\n    \r\n    \r\n                <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n                    <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-12\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                        <div className=\"set-animation from-left animate\">\r\n                            <Form.Group controlId = 'currentpassword' className='m-2' style={{width:'100%'}}>\r\n                                <Form.Label className = 'form-label m-2'>Current Password</Form.Label>\r\n                                    <Form.Control \r\n                                        className='textBox'\r\n                                        type='password'\r\n                                        name='currentPassword'\r\n                                        value={values.currentPassword}\r\n                                        onChange={handleChange}\r\n                                        placeholder='current password'\r\n                                        isValid={touched.currentPassword && !errors.currentPassword}\r\n                                        isInvalid={!!errors.currentPassword}\r\n                                        size = {'lg'} \r\n                                        autoComplete='disabled'\r\n                                    />\r\n                                    <FormControl.Feedback type='invalid'>{errors.currentPassword}</FormControl.Feedback>\r\n                            </Form.Group>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-12\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                        <div className=\"set-animation from-left animate\">\r\n                            <Form.Group controlId = 'password' className='m-2' style={{width:'100%'}}>\r\n                                <Form.Label className = 'form-label m-2'>Password</Form.Label>\r\n                                    <Form.Control \r\n                                        className='textBox'\r\n                                        type='password'\r\n                                        name='password'\r\n                                        value={values.password}\r\n                                        onChange={handleChange}\r\n                                        placeholder='password'\r\n                                        isValid={touched.password && !errors.password}\r\n                                        isInvalid={!!errors.password}\r\n                                        size = {'lg'} \r\n                                        autoComplete='disabled'\r\n                                    />\r\n                                    <FormControl.Feedback type='invalid'>{errors.password}</FormControl.Feedback>\r\n                            </Form.Group>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-12\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                    <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n                        <div className=\"set-animation from-left animate\">\r\n                            <Form.Group controlId = 'confirmPassword' className='m-2' style={{width:'100%'}}>\r\n                                <Form.Label className = 'form-label m-2'>Confirm Password</Form.Label>\r\n                                    <Form.Control \r\n                                        className='textBox'\r\n                                        type='password'\r\n                                        name='confirmPassword'\r\n                                        value={values.confirmPassword}\r\n                                        onChange={handleChange}\r\n                                        placeholder='confirm password'\r\n                                        isValid={touched.confirmPassword && !errors.confirmPassword}\r\n                                        isInvalid={!!errors.confirmPassword}\r\n                                        size = {'lg'} \r\n                                        autoComplete='disabled'\r\n                                    />\r\n                                    <FormControl.Feedback type='invalid'>{errors.confirmPassword}</FormControl.Feedback>\r\n                            </Form.Group>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    \r\n            <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n                <div class=\"col-md-12 text-center\">\r\n                    <Button \r\n                        type='submit'\r\n                        className='mb-3'\r\n                        style={{float:'center'}}\r\n                    >\r\n                    Submit\r\n                    </Button>\r\n                </div>\r\n            </div>  \r\n            </Form>\r\n            )}\r\n        </Formik>\r\n       </Container>\r\n    )\r\n}\r\n\r\nexport default ResetPasswordLoggedIn\r\n","import React from 'react'\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { Container, Card} from 'react-bootstrap'\r\n\r\nconst PcrView = () => {\r\n    const location = useLocation();\r\n    const result = location.state.pcr\r\n    console.log(location.state.pcr)\r\n    return (\r\n        <Container className=' formContainer mt-3'>\r\n            {result.length > 0 ? \r\n            <div className=\"vs-row top-content\" style={{display:'flex', width:'100%'}}>\r\n                {result.map(p=> \r\n                <div className=\"vs-col vs-xs- vs-sm-12 vs-lg-6\"style={{margin:'0%',width:'100%', position:'relative'}}>\r\n                    <div className=\"set-animation from-left animate\">\r\n                        <Card  className=\"m-2\" bg=\"#ffffff\" text=\"black\" style={{ width: '100%'}}>\r\n                            <ul className=\"profile-info-list mt-2\">\r\n                                <li className=\"title \">PCR Test</li>\r\n                                <li>\r\n                                    <div className=\"field\">Name:</div>\r\n                                    <div className=\"value\">{p.name.firstName +\" \"+ p.name.lastName}</div>\r\n                                </li>\r\n                                <li>\r\n                                    <div className=\"field\">Contact Number:</div>\r\n                                    <div className=\"value\">{p.contactNumber}</div>\r\n                                </li>\r\n                                <li>\r\n                                    <div className=\"field\">Result:</div>\r\n                                    <div className=\"value\">{p.result}</div>\r\n                                </li>\r\n                            </ul>\r\n                        </Card>\r\n                    </div>\r\n                </div>)}\r\n            </div> : <h1>No Data</h1>}\r\n       </Container>\r\n    )\r\n}\r\n\r\nexport default PcrView\r\n","import React from 'react'\r\nimport { BrowserRouter as Router,Route, Switch } from 'react-router-dom'\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Header from './components/Header'\r\nimport Footer from './components/Footer'\r\nimport HomeScreen from './screens/HomeScreen'\r\nimport Dashboard from './screens/hospital/Dashboard'\r\nimport Patient from './screens/hospital/Patients'\r\nimport PatientProfile from './screens/hospital/PatientProfile'\r\nimport AdminDashboard from './screens/healthMinistry/AdminDashBoard'\r\nimport AddHospital from './screens/healthMinistry/AddHospital'\r\nimport AddHospitalAdmin from './screens/healthMinistry/AddHospitalAdmin'\r\nimport AddPatient from './screens/hospital/AddPatient'\r\nimport AddHospitalStaff from './screens/hospital/staffs/AddHospitalStaff'\r\nimport EditCurrentDetails from './screens/hospital/EditCurrentDetails';\r\nimport AcceptanceWaiting from './screens/hospital/AcceptanceWaiting';\r\nimport AddPcrResults from './screens/hospital/AddPcrResults';\r\nimport EditProfile from './screens/hospital/EditProfile';\r\nimport Profile from './screens/hospital/Profile';\r\nimport AprovePcrResults from './screens/hospital/AprovePcrResults';\r\nimport './bootstrap.min.css';\r\nimport './App.css';\r\nimport AddWard from './screens/hospital/wards/AddWard'\r\nimport Ward from './screens/hospital/wards/Ward'\r\nimport WardsList from './screens/hospital/wards/WardsList'\r\nimport SigninScreen from './screens/SigninScreen';\r\nimport Logout from './components/Logout';\r\nimport Hospitals from './screens/healthMinistry/Hospitals';\r\nimport StaffList from './screens/hospital/staffs/StaffsList';\r\nimport ConfirmData from './screens/healthMinistry/ConfirmData'\r\nimport AdmitPatient from './screens/hospital/AdmitPatient'\r\nimport SearchPCR from './screens/hospital/SerchPCR';\r\nimport AdmittedPatients from './screens/hospital/AdmittedPatients';\r\nimport ForgotPassword from './screens/ForgotPassword';\r\nimport ResetPassword from './screens/ResetPassword';\r\nimport ResetPasswordLoggedIn from './screens/resetPasswordLoggedIn';\r\nimport PcrView from './screens/hospital/PcrView';\r\n//import Login from './screens/Login'\r\n\r\n\r\n\r\nconst App = () =>{\r\n  return (\r\n    <Router>\r\n      <Header />\r\n      <main className='py-3'>\r\n        <ToastContainer\r\n              position=\"top-right\"\r\n              autoClose={5000}\r\n              hideProgressBar={false}\r\n              newestOnTop={false}\r\n              closeOnClick\r\n              rtl={false}\r\n              pauseOnFocusLoss\r\n              draggable\r\n              pauseOnHover            \r\n          ></ToastContainer>\r\n        {/* <Container> */}\r\n          <switch>\r\n           <Route path='/signin' component={SigninScreen}/>\r\n            <Route path='/hospital/dashboard' component={Dashboard}/>\r\n            <Route path='/hospital/patients' component={Patient}/>\r\n            <Route path='/hospital/patientProfile/:id' component={PatientProfile}/>\r\n            <Route path='/healthMinistry/dashboard' component={AdminDashboard}/>\r\n            <Route path='/healthMinistry/confirmData' component={ConfirmData}/>\r\n            <Route path='/healthMinistry/addHospital' component={AddHospital}/>\r\n            <Route path='/healthMinistry/addHospitalAdmin/:id' component={AddHospitalAdmin}/>\r\n            <Route path='/hospital/addHospitalStaff' component={AddHospitalStaff}/>\r\n            <Route path='/hospital/addPatient' component={AddPatient}/>\r\n            <Route path='/hospital/editCurrentDetails/:id' component={EditCurrentDetails}/>\r\n            <Route path='/hospital/acceptanceWaiting' component={AcceptanceWaiting}/>\r\n            <Route path='/hospital/addPcrResults' component={AddPcrResults}/>\r\n            <Route path='/hospital/editProfile/:id' component={EditProfile}/>\r\n            <Route path='/hospital/profile/:id' component={Profile}/>\r\n            <Route path='/hospital/aprovePcrResults' component={AprovePcrResults}/>\r\n            <Route path='/hospital/admitPatient' component={AdmitPatient}/>\r\n            <Route path='/logout' component={Logout}/>\r\n            <Route path='/' component={HomeScreen} exact/>\r\n            <Route path='/hospital/wards/:id' component={Ward}/>\r\n            <Route path='/hospital/addWard' component={AddWard}/>\r\n            <Route path='/hospital/wards' component={WardsList}/>\r\n            <Route path= '/healthMinistry/hospital' component={Hospitals}/>\r\n            <Route path='/hospital/staffs' component={StaffList}/>\r\n            <Route path='/hospital/searchPCR' component={SearchPCR}/>\r\n            <Route path='/hospital/admittedPatients' component={AdmittedPatients}/>\r\n            <Route path='/forgotPassword' component={ForgotPassword}/>\r\n            <Route path='/resetpassword/:token' component={ResetPassword}/>\r\n            <Route path='/resetpasswordloggedin' component={ResetPasswordLoggedIn}/>\r\n            <Route path='/hospital/PcrView' component={PcrView}/>\r\n\r\n        {/* </Container> */}\r\n          </switch>\r\n      </main>\r\n      <Footer />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers} from \"redux\";\r\nimport patientReducer from './patients'\r\nimport pcrReducer from './pcr';\r\nimport hospitalReducer from './hospitals';\r\nimport userReducer from './users';\r\nimport dashboardReducer from './dashboard';\r\n\r\nexport default combineReducers({\r\n    patients: patientReducer,\r\n    pcr: pcrReducer,\r\n    hospital: hospitalReducer,\r\n    user: userReducer,\r\n    dashboard: dashboardReducer,\r\n})\r\n","import { combineReducers } from \"redux\";\r\nimport entitiesReducer from \"./entities/entities\";\r\nimport authReducer from \"./auth\";\r\n\r\nexport default combineReducers({\r\n    entities: entitiesReducer,\r\n    auth: authReducer\r\n})","import { toast } from 'react-toastify';\r\nimport { toastAction } from '../toastActions';\r\n\r\nconst toastGenerator = store => next => action => {\r\n  if (action.type === toastAction.type) {\r\n    toast[action.payload.type](action.payload.message);\r\n  }\r\n  else return next(action);\r\n};\r\n\r\nexport default toastGenerator;\r\n","import axios from \"axios\";\r\nimport * as actions from \"../apiActions\";\r\nimport configData from '../../config.json';\r\nimport { toastAction } from '../toastActions';\r\n\r\n\r\nconst api = ({ dispatch }) => next => async action => {\r\n  axios.defaults.withCredentials = true;\r\n  if (action.type !== actions.apiCallBegan.type) return next(action);\r\n  const { url, method, data, config, onStart, onSuccess, onError } = action.payload;\r\n  if (onStart) dispatch({ type: onStart });\r\n  next(action);\r\n  try {\r\n   // console.log(action.payload)\r\n    const response = await axios.request({\r\n      baseURL: configData.API_URL,\r\n      url,\r\n      method,\r\n      data,\r\n      config,\r\n    });\r\n\r\n\r\n    dispatch(actions.apiCallSuccess(response.data));\r\n\r\n    if (onSuccess) dispatch({ type: onSuccess, payload: response.data });\r\n    //console.log(response.data)\r\n  } catch (error) {\r\n      const response = error.response;\r\n      const message = response ? response.data.message : error.message;\r\n\r\n      dispatch(actions.apiCallFailed({ message }));\r\n      dispatch(toastAction({ message, type: 'error' }));\r\n \r\n      if (onError) dispatch({ type: onError, payload: message });\r\n  }\r\n};\r\n\r\nexport default api;\r\n","export const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n}; \r\n\r\nexport const saveState = (state) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider} from 'react-redux'\r\n// import stores from './stores'\r\nimport './bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport configureStore from './store/configureStore';\r\nimport { saveState } from './store/localStorage';\r\n\r\nconst store = configureStore();\r\nstore.subscribe(() => {\r\n  saveState({\r\n    auth: store.getState().auth, \r\n    entities: {\r\n      patients: store.getState().entities.patients,\r\n      pcr: store.getState().entities.pcr,\r\n      hospital: store.getState().entities.hospital,\r\n      dashboard: store.getState().entities.dashboard\r\n    }\r\n  });\r\n});\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport reducer from \"./reducer\";\r\nimport toastGenerator from \"./middleware/toast\";\r\nimport api from \"./middleware/api\";\r\nimport { loadState } from './localStorage';\r\n\r\nexport default function() {\r\n    return configureStore({\r\n      reducer,\r\n      middleware: [\r\n        ...getDefaultMiddleware(),\r\n        toastGenerator,\r\n        api,\r\n      ],\r\n      preloadedState: loadState()\r\n    });\r\n  }"],"sourceRoot":""}